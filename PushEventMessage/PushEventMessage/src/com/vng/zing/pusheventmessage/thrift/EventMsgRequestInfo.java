/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vng.zing.pusheventmessage.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class EventMsgRequestInfo implements org.apache.thrift.TBase<EventMsgRequestInfo, EventMsgRequestInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EventMsgRequestInfo");

  private static final org.apache.thrift.protocol.TField RESPONSE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("responseCode", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("platform", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField OS_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("osVersion", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField VIEW_COUNTER_FIELD_DESC = new org.apache.thrift.protocol.TField("viewCounter", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField VIEW_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("viewLimit", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField APP_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("appVersion", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField SDK_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("sdkVersion", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField SDK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sdkId", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField MSG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("msgId", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("reason", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new EventMsgRequestInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new EventMsgRequestInfoTupleSchemeFactory());
  }

  public int responseCode; // optional
  /**
   * 
   * @see MobilePlatform
   */
  public MobilePlatform platform; // optional
  public String osVersion; // optional
  public long viewCounter; // optional
  public long viewLimit; // optional
  public String appVersion; // optional
  public String sdkVersion; // optional
  public long sdkId; // optional
  public long msgId; // optional
  public String reason; // optional
  public long timestamp; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RESPONSE_CODE((short)1, "responseCode"),
    /**
     * 
     * @see MobilePlatform
     */
    PLATFORM((short)2, "platform"),
    OS_VERSION((short)3, "osVersion"),
    VIEW_COUNTER((short)4, "viewCounter"),
    VIEW_LIMIT((short)5, "viewLimit"),
    APP_VERSION((short)6, "appVersion"),
    SDK_VERSION((short)7, "sdkVersion"),
    SDK_ID((short)8, "sdkId"),
    MSG_ID((short)9, "msgId"),
    REASON((short)10, "reason"),
    TIMESTAMP((short)11, "timestamp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RESPONSE_CODE
          return RESPONSE_CODE;
        case 2: // PLATFORM
          return PLATFORM;
        case 3: // OS_VERSION
          return OS_VERSION;
        case 4: // VIEW_COUNTER
          return VIEW_COUNTER;
        case 5: // VIEW_LIMIT
          return VIEW_LIMIT;
        case 6: // APP_VERSION
          return APP_VERSION;
        case 7: // SDK_VERSION
          return SDK_VERSION;
        case 8: // SDK_ID
          return SDK_ID;
        case 9: // MSG_ID
          return MSG_ID;
        case 10: // REASON
          return REASON;
        case 11: // TIMESTAMP
          return TIMESTAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RESPONSECODE_ISSET_ID = 0;
  private static final int __VIEWCOUNTER_ISSET_ID = 1;
  private static final int __VIEWLIMIT_ISSET_ID = 2;
  private static final int __SDKID_ISSET_ID = 3;
  private static final int __MSGID_ISSET_ID = 4;
  private static final int __TIMESTAMP_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.RESPONSE_CODE,_Fields.PLATFORM,_Fields.OS_VERSION,_Fields.VIEW_COUNTER,_Fields.VIEW_LIMIT,_Fields.APP_VERSION,_Fields.SDK_VERSION,_Fields.SDK_ID,_Fields.MSG_ID,_Fields.REASON,_Fields.TIMESTAMP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RESPONSE_CODE, new org.apache.thrift.meta_data.FieldMetaData("responseCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("platform", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MobilePlatform.class)));
    tmpMap.put(_Fields.OS_VERSION, new org.apache.thrift.meta_data.FieldMetaData("osVersion", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VIEW_COUNTER, new org.apache.thrift.meta_data.FieldMetaData("viewCounter", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VIEW_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("viewLimit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.APP_VERSION, new org.apache.thrift.meta_data.FieldMetaData("appVersion", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SDK_VERSION, new org.apache.thrift.meta_data.FieldMetaData("sdkVersion", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SDK_ID, new org.apache.thrift.meta_data.FieldMetaData("sdkId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MSG_ID, new org.apache.thrift.meta_data.FieldMetaData("msgId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REASON, new org.apache.thrift.meta_data.FieldMetaData("reason", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EventMsgRequestInfo.class, metaDataMap);
  }

  public EventMsgRequestInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EventMsgRequestInfo(EventMsgRequestInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.responseCode = other.responseCode;
    if (other.isSetPlatform()) {
      this.platform = other.platform;
    }
    if (other.isSetOsVersion()) {
      this.osVersion = other.osVersion;
    }
    this.viewCounter = other.viewCounter;
    this.viewLimit = other.viewLimit;
    if (other.isSetAppVersion()) {
      this.appVersion = other.appVersion;
    }
    if (other.isSetSdkVersion()) {
      this.sdkVersion = other.sdkVersion;
    }
    this.sdkId = other.sdkId;
    this.msgId = other.msgId;
    if (other.isSetReason()) {
      this.reason = other.reason;
    }
    this.timestamp = other.timestamp;
  }

  public EventMsgRequestInfo deepCopy() {
    return new EventMsgRequestInfo(this);
  }

  @Override
  public void clear() {
    setResponseCodeIsSet(false);
    this.responseCode = 0;
    this.platform = null;
    this.osVersion = null;
    setViewCounterIsSet(false);
    this.viewCounter = 0;
    setViewLimitIsSet(false);
    this.viewLimit = 0;
    this.appVersion = null;
    this.sdkVersion = null;
    setSdkIdIsSet(false);
    this.sdkId = 0;
    setMsgIdIsSet(false);
    this.msgId = 0;
    this.reason = null;
    setTimestampIsSet(false);
    this.timestamp = 0;
  }

  public int getResponseCode() {
    return this.responseCode;
  }

  public EventMsgRequestInfo setResponseCode(int responseCode) {
    this.responseCode = responseCode;
    setResponseCodeIsSet(true);
    return this;
  }

  public void unsetResponseCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESPONSECODE_ISSET_ID);
  }

  /** Returns true if field responseCode is set (has been assigned a value) and false otherwise */
  public boolean isSetResponseCode() {
    return EncodingUtils.testBit(__isset_bitfield, __RESPONSECODE_ISSET_ID);
  }

  public void setResponseCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESPONSECODE_ISSET_ID, value);
  }

  /**
   * 
   * @see MobilePlatform
   */
  public MobilePlatform getPlatform() {
    return this.platform;
  }

  /**
   * 
   * @see MobilePlatform
   */
  public EventMsgRequestInfo setPlatform(MobilePlatform platform) {
    this.platform = platform;
    return this;
  }

  public void unsetPlatform() {
    this.platform = null;
  }

  /** Returns true if field platform is set (has been assigned a value) and false otherwise */
  public boolean isSetPlatform() {
    return this.platform != null;
  }

  public void setPlatformIsSet(boolean value) {
    if (!value) {
      this.platform = null;
    }
  }

  public String getOsVersion() {
    return this.osVersion;
  }

  public EventMsgRequestInfo setOsVersion(String osVersion) {
    this.osVersion = osVersion;
    return this;
  }

  public void unsetOsVersion() {
    this.osVersion = null;
  }

  /** Returns true if field osVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetOsVersion() {
    return this.osVersion != null;
  }

  public void setOsVersionIsSet(boolean value) {
    if (!value) {
      this.osVersion = null;
    }
  }

  public long getViewCounter() {
    return this.viewCounter;
  }

  public EventMsgRequestInfo setViewCounter(long viewCounter) {
    this.viewCounter = viewCounter;
    setViewCounterIsSet(true);
    return this;
  }

  public void unsetViewCounter() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIEWCOUNTER_ISSET_ID);
  }

  /** Returns true if field viewCounter is set (has been assigned a value) and false otherwise */
  public boolean isSetViewCounter() {
    return EncodingUtils.testBit(__isset_bitfield, __VIEWCOUNTER_ISSET_ID);
  }

  public void setViewCounterIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIEWCOUNTER_ISSET_ID, value);
  }

  public long getViewLimit() {
    return this.viewLimit;
  }

  public EventMsgRequestInfo setViewLimit(long viewLimit) {
    this.viewLimit = viewLimit;
    setViewLimitIsSet(true);
    return this;
  }

  public void unsetViewLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIEWLIMIT_ISSET_ID);
  }

  /** Returns true if field viewLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetViewLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __VIEWLIMIT_ISSET_ID);
  }

  public void setViewLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIEWLIMIT_ISSET_ID, value);
  }

  public String getAppVersion() {
    return this.appVersion;
  }

  public EventMsgRequestInfo setAppVersion(String appVersion) {
    this.appVersion = appVersion;
    return this;
  }

  public void unsetAppVersion() {
    this.appVersion = null;
  }

  /** Returns true if field appVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetAppVersion() {
    return this.appVersion != null;
  }

  public void setAppVersionIsSet(boolean value) {
    if (!value) {
      this.appVersion = null;
    }
  }

  public String getSdkVersion() {
    return this.sdkVersion;
  }

  public EventMsgRequestInfo setSdkVersion(String sdkVersion) {
    this.sdkVersion = sdkVersion;
    return this;
  }

  public void unsetSdkVersion() {
    this.sdkVersion = null;
  }

  /** Returns true if field sdkVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetSdkVersion() {
    return this.sdkVersion != null;
  }

  public void setSdkVersionIsSet(boolean value) {
    if (!value) {
      this.sdkVersion = null;
    }
  }

  public long getSdkId() {
    return this.sdkId;
  }

  public EventMsgRequestInfo setSdkId(long sdkId) {
    this.sdkId = sdkId;
    setSdkIdIsSet(true);
    return this;
  }

  public void unsetSdkId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SDKID_ISSET_ID);
  }

  /** Returns true if field sdkId is set (has been assigned a value) and false otherwise */
  public boolean isSetSdkId() {
    return EncodingUtils.testBit(__isset_bitfield, __SDKID_ISSET_ID);
  }

  public void setSdkIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SDKID_ISSET_ID, value);
  }

  public long getMsgId() {
    return this.msgId;
  }

  public EventMsgRequestInfo setMsgId(long msgId) {
    this.msgId = msgId;
    setMsgIdIsSet(true);
    return this;
  }

  public void unsetMsgId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MSGID_ISSET_ID);
  }

  /** Returns true if field msgId is set (has been assigned a value) and false otherwise */
  public boolean isSetMsgId() {
    return EncodingUtils.testBit(__isset_bitfield, __MSGID_ISSET_ID);
  }

  public void setMsgIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MSGID_ISSET_ID, value);
  }

  public String getReason() {
    return this.reason;
  }

  public EventMsgRequestInfo setReason(String reason) {
    this.reason = reason;
    return this;
  }

  public void unsetReason() {
    this.reason = null;
  }

  /** Returns true if field reason is set (has been assigned a value) and false otherwise */
  public boolean isSetReason() {
    return this.reason != null;
  }

  public void setReasonIsSet(boolean value) {
    if (!value) {
      this.reason = null;
    }
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public EventMsgRequestInfo setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RESPONSE_CODE:
      if (value == null) {
        unsetResponseCode();
      } else {
        setResponseCode((Integer)value);
      }
      break;

    case PLATFORM:
      if (value == null) {
        unsetPlatform();
      } else {
        setPlatform((MobilePlatform)value);
      }
      break;

    case OS_VERSION:
      if (value == null) {
        unsetOsVersion();
      } else {
        setOsVersion((String)value);
      }
      break;

    case VIEW_COUNTER:
      if (value == null) {
        unsetViewCounter();
      } else {
        setViewCounter((Long)value);
      }
      break;

    case VIEW_LIMIT:
      if (value == null) {
        unsetViewLimit();
      } else {
        setViewLimit((Long)value);
      }
      break;

    case APP_VERSION:
      if (value == null) {
        unsetAppVersion();
      } else {
        setAppVersion((String)value);
      }
      break;

    case SDK_VERSION:
      if (value == null) {
        unsetSdkVersion();
      } else {
        setSdkVersion((String)value);
      }
      break;

    case SDK_ID:
      if (value == null) {
        unsetSdkId();
      } else {
        setSdkId((Long)value);
      }
      break;

    case MSG_ID:
      if (value == null) {
        unsetMsgId();
      } else {
        setMsgId((Long)value);
      }
      break;

    case REASON:
      if (value == null) {
        unsetReason();
      } else {
        setReason((String)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RESPONSE_CODE:
      return Integer.valueOf(getResponseCode());

    case PLATFORM:
      return getPlatform();

    case OS_VERSION:
      return getOsVersion();

    case VIEW_COUNTER:
      return Long.valueOf(getViewCounter());

    case VIEW_LIMIT:
      return Long.valueOf(getViewLimit());

    case APP_VERSION:
      return getAppVersion();

    case SDK_VERSION:
      return getSdkVersion();

    case SDK_ID:
      return Long.valueOf(getSdkId());

    case MSG_ID:
      return Long.valueOf(getMsgId());

    case REASON:
      return getReason();

    case TIMESTAMP:
      return Long.valueOf(getTimestamp());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RESPONSE_CODE:
      return isSetResponseCode();
    case PLATFORM:
      return isSetPlatform();
    case OS_VERSION:
      return isSetOsVersion();
    case VIEW_COUNTER:
      return isSetViewCounter();
    case VIEW_LIMIT:
      return isSetViewLimit();
    case APP_VERSION:
      return isSetAppVersion();
    case SDK_VERSION:
      return isSetSdkVersion();
    case SDK_ID:
      return isSetSdkId();
    case MSG_ID:
      return isSetMsgId();
    case REASON:
      return isSetReason();
    case TIMESTAMP:
      return isSetTimestamp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof EventMsgRequestInfo)
      return this.equals((EventMsgRequestInfo)that);
    return false;
  }

  public boolean equals(EventMsgRequestInfo that) {
    if (that == null)
      return false;

    boolean this_present_responseCode = true && this.isSetResponseCode();
    boolean that_present_responseCode = true && that.isSetResponseCode();
    if (this_present_responseCode || that_present_responseCode) {
      if (!(this_present_responseCode && that_present_responseCode))
        return false;
      if (this.responseCode != that.responseCode)
        return false;
    }

    boolean this_present_platform = true && this.isSetPlatform();
    boolean that_present_platform = true && that.isSetPlatform();
    if (this_present_platform || that_present_platform) {
      if (!(this_present_platform && that_present_platform))
        return false;
      if (!this.platform.equals(that.platform))
        return false;
    }

    boolean this_present_osVersion = true && this.isSetOsVersion();
    boolean that_present_osVersion = true && that.isSetOsVersion();
    if (this_present_osVersion || that_present_osVersion) {
      if (!(this_present_osVersion && that_present_osVersion))
        return false;
      if (!this.osVersion.equals(that.osVersion))
        return false;
    }

    boolean this_present_viewCounter = true && this.isSetViewCounter();
    boolean that_present_viewCounter = true && that.isSetViewCounter();
    if (this_present_viewCounter || that_present_viewCounter) {
      if (!(this_present_viewCounter && that_present_viewCounter))
        return false;
      if (this.viewCounter != that.viewCounter)
        return false;
    }

    boolean this_present_viewLimit = true && this.isSetViewLimit();
    boolean that_present_viewLimit = true && that.isSetViewLimit();
    if (this_present_viewLimit || that_present_viewLimit) {
      if (!(this_present_viewLimit && that_present_viewLimit))
        return false;
      if (this.viewLimit != that.viewLimit)
        return false;
    }

    boolean this_present_appVersion = true && this.isSetAppVersion();
    boolean that_present_appVersion = true && that.isSetAppVersion();
    if (this_present_appVersion || that_present_appVersion) {
      if (!(this_present_appVersion && that_present_appVersion))
        return false;
      if (!this.appVersion.equals(that.appVersion))
        return false;
    }

    boolean this_present_sdkVersion = true && this.isSetSdkVersion();
    boolean that_present_sdkVersion = true && that.isSetSdkVersion();
    if (this_present_sdkVersion || that_present_sdkVersion) {
      if (!(this_present_sdkVersion && that_present_sdkVersion))
        return false;
      if (!this.sdkVersion.equals(that.sdkVersion))
        return false;
    }

    boolean this_present_sdkId = true && this.isSetSdkId();
    boolean that_present_sdkId = true && that.isSetSdkId();
    if (this_present_sdkId || that_present_sdkId) {
      if (!(this_present_sdkId && that_present_sdkId))
        return false;
      if (this.sdkId != that.sdkId)
        return false;
    }

    boolean this_present_msgId = true && this.isSetMsgId();
    boolean that_present_msgId = true && that.isSetMsgId();
    if (this_present_msgId || that_present_msgId) {
      if (!(this_present_msgId && that_present_msgId))
        return false;
      if (this.msgId != that.msgId)
        return false;
    }

    boolean this_present_reason = true && this.isSetReason();
    boolean that_present_reason = true && that.isSetReason();
    if (this_present_reason || that_present_reason) {
      if (!(this_present_reason && that_present_reason))
        return false;
      if (!this.reason.equals(that.reason))
        return false;
    }

    boolean this_present_timestamp = true && this.isSetTimestamp();
    boolean that_present_timestamp = true && that.isSetTimestamp();
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(EventMsgRequestInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    EventMsgRequestInfo typedOther = (EventMsgRequestInfo)other;

    lastComparison = Boolean.valueOf(isSetResponseCode()).compareTo(typedOther.isSetResponseCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResponseCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.responseCode, typedOther.responseCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlatform()).compareTo(typedOther.isSetPlatform());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlatform()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platform, typedOther.platform);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOsVersion()).compareTo(typedOther.isSetOsVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOsVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.osVersion, typedOther.osVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetViewCounter()).compareTo(typedOther.isSetViewCounter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetViewCounter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.viewCounter, typedOther.viewCounter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetViewLimit()).compareTo(typedOther.isSetViewLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetViewLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.viewLimit, typedOther.viewLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppVersion()).compareTo(typedOther.isSetAppVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appVersion, typedOther.appVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSdkVersion()).compareTo(typedOther.isSetSdkVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSdkVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sdkVersion, typedOther.sdkVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSdkId()).compareTo(typedOther.isSetSdkId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSdkId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sdkId, typedOther.sdkId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMsgId()).compareTo(typedOther.isSetMsgId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsgId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgId, typedOther.msgId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReason()).compareTo(typedOther.isSetReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reason, typedOther.reason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("EventMsgRequestInfo(");
    boolean first = true;

    if (isSetResponseCode()) {
      sb.append("responseCode:");
      sb.append(this.responseCode);
      first = false;
    }
    if (isSetPlatform()) {
      if (!first) sb.append(", ");
      sb.append("platform:");
      if (this.platform == null) {
        sb.append("null");
      } else {
        sb.append(this.platform);
      }
      first = false;
    }
    if (isSetOsVersion()) {
      if (!first) sb.append(", ");
      sb.append("osVersion:");
      if (this.osVersion == null) {
        sb.append("null");
      } else {
        sb.append(this.osVersion);
      }
      first = false;
    }
    if (isSetViewCounter()) {
      if (!first) sb.append(", ");
      sb.append("viewCounter:");
      sb.append(this.viewCounter);
      first = false;
    }
    if (isSetViewLimit()) {
      if (!first) sb.append(", ");
      sb.append("viewLimit:");
      sb.append(this.viewLimit);
      first = false;
    }
    if (isSetAppVersion()) {
      if (!first) sb.append(", ");
      sb.append("appVersion:");
      if (this.appVersion == null) {
        sb.append("null");
      } else {
        sb.append(this.appVersion);
      }
      first = false;
    }
    if (isSetSdkVersion()) {
      if (!first) sb.append(", ");
      sb.append("sdkVersion:");
      if (this.sdkVersion == null) {
        sb.append("null");
      } else {
        sb.append(this.sdkVersion);
      }
      first = false;
    }
    if (isSetSdkId()) {
      if (!first) sb.append(", ");
      sb.append("sdkId:");
      sb.append(this.sdkId);
      first = false;
    }
    if (isSetMsgId()) {
      if (!first) sb.append(", ");
      sb.append("msgId:");
      sb.append(this.msgId);
      first = false;
    }
    if (isSetReason()) {
      if (!first) sb.append(", ");
      sb.append("reason:");
      if (this.reason == null) {
        sb.append("null");
      } else {
        sb.append(this.reason);
      }
      first = false;
    }
    if (isSetTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("timestamp:");
      sb.append(this.timestamp);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EventMsgRequestInfoStandardSchemeFactory implements SchemeFactory {
    public EventMsgRequestInfoStandardScheme getScheme() {
      return new EventMsgRequestInfoStandardScheme();
    }
  }

  private static class EventMsgRequestInfoStandardScheme extends StandardScheme<EventMsgRequestInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, EventMsgRequestInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RESPONSE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.responseCode = iprot.readI32();
              struct.setResponseCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PLATFORM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.platform = MobilePlatform.findByValue(iprot.readI32());
              struct.setPlatformIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OS_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.osVersion = iprot.readString();
              struct.setOsVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VIEW_COUNTER
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.viewCounter = iprot.readI64();
              struct.setViewCounterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // VIEW_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.viewLimit = iprot.readI64();
              struct.setViewLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // APP_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appVersion = iprot.readString();
              struct.setAppVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SDK_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sdkVersion = iprot.readString();
              struct.setSdkVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SDK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sdkId = iprot.readI64();
              struct.setSdkIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MSG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.msgId = iprot.readI64();
              struct.setMsgIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reason = iprot.readString();
              struct.setReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, EventMsgRequestInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetResponseCode()) {
        oprot.writeFieldBegin(RESPONSE_CODE_FIELD_DESC);
        oprot.writeI32(struct.responseCode);
        oprot.writeFieldEnd();
      }
      if (struct.platform != null) {
        if (struct.isSetPlatform()) {
          oprot.writeFieldBegin(PLATFORM_FIELD_DESC);
          oprot.writeI32(struct.platform.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.osVersion != null) {
        if (struct.isSetOsVersion()) {
          oprot.writeFieldBegin(OS_VERSION_FIELD_DESC);
          oprot.writeString(struct.osVersion);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetViewCounter()) {
        oprot.writeFieldBegin(VIEW_COUNTER_FIELD_DESC);
        oprot.writeI64(struct.viewCounter);
        oprot.writeFieldEnd();
      }
      if (struct.isSetViewLimit()) {
        oprot.writeFieldBegin(VIEW_LIMIT_FIELD_DESC);
        oprot.writeI64(struct.viewLimit);
        oprot.writeFieldEnd();
      }
      if (struct.appVersion != null) {
        if (struct.isSetAppVersion()) {
          oprot.writeFieldBegin(APP_VERSION_FIELD_DESC);
          oprot.writeString(struct.appVersion);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sdkVersion != null) {
        if (struct.isSetSdkVersion()) {
          oprot.writeFieldBegin(SDK_VERSION_FIELD_DESC);
          oprot.writeString(struct.sdkVersion);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSdkId()) {
        oprot.writeFieldBegin(SDK_ID_FIELD_DESC);
        oprot.writeI64(struct.sdkId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMsgId()) {
        oprot.writeFieldBegin(MSG_ID_FIELD_DESC);
        oprot.writeI64(struct.msgId);
        oprot.writeFieldEnd();
      }
      if (struct.reason != null) {
        if (struct.isSetReason()) {
          oprot.writeFieldBegin(REASON_FIELD_DESC);
          oprot.writeString(struct.reason);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTimestamp()) {
        oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.timestamp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EventMsgRequestInfoTupleSchemeFactory implements SchemeFactory {
    public EventMsgRequestInfoTupleScheme getScheme() {
      return new EventMsgRequestInfoTupleScheme();
    }
  }

  private static class EventMsgRequestInfoTupleScheme extends TupleScheme<EventMsgRequestInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, EventMsgRequestInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetResponseCode()) {
        optionals.set(0);
      }
      if (struct.isSetPlatform()) {
        optionals.set(1);
      }
      if (struct.isSetOsVersion()) {
        optionals.set(2);
      }
      if (struct.isSetViewCounter()) {
        optionals.set(3);
      }
      if (struct.isSetViewLimit()) {
        optionals.set(4);
      }
      if (struct.isSetAppVersion()) {
        optionals.set(5);
      }
      if (struct.isSetSdkVersion()) {
        optionals.set(6);
      }
      if (struct.isSetSdkId()) {
        optionals.set(7);
      }
      if (struct.isSetMsgId()) {
        optionals.set(8);
      }
      if (struct.isSetReason()) {
        optionals.set(9);
      }
      if (struct.isSetTimestamp()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetResponseCode()) {
        oprot.writeI32(struct.responseCode);
      }
      if (struct.isSetPlatform()) {
        oprot.writeI32(struct.platform.getValue());
      }
      if (struct.isSetOsVersion()) {
        oprot.writeString(struct.osVersion);
      }
      if (struct.isSetViewCounter()) {
        oprot.writeI64(struct.viewCounter);
      }
      if (struct.isSetViewLimit()) {
        oprot.writeI64(struct.viewLimit);
      }
      if (struct.isSetAppVersion()) {
        oprot.writeString(struct.appVersion);
      }
      if (struct.isSetSdkVersion()) {
        oprot.writeString(struct.sdkVersion);
      }
      if (struct.isSetSdkId()) {
        oprot.writeI64(struct.sdkId);
      }
      if (struct.isSetMsgId()) {
        oprot.writeI64(struct.msgId);
      }
      if (struct.isSetReason()) {
        oprot.writeString(struct.reason);
      }
      if (struct.isSetTimestamp()) {
        oprot.writeI64(struct.timestamp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, EventMsgRequestInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.responseCode = iprot.readI32();
        struct.setResponseCodeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.platform = MobilePlatform.findByValue(iprot.readI32());
        struct.setPlatformIsSet(true);
      }
      if (incoming.get(2)) {
        struct.osVersion = iprot.readString();
        struct.setOsVersionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.viewCounter = iprot.readI64();
        struct.setViewCounterIsSet(true);
      }
      if (incoming.get(4)) {
        struct.viewLimit = iprot.readI64();
        struct.setViewLimitIsSet(true);
      }
      if (incoming.get(5)) {
        struct.appVersion = iprot.readString();
        struct.setAppVersionIsSet(true);
      }
      if (incoming.get(6)) {
        struct.sdkVersion = iprot.readString();
        struct.setSdkVersionIsSet(true);
      }
      if (incoming.get(7)) {
        struct.sdkId = iprot.readI64();
        struct.setSdkIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.msgId = iprot.readI64();
        struct.setMsgIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.reason = iprot.readString();
        struct.setReasonIsSet(true);
      }
      if (incoming.get(10)) {
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
    }
  }

}

