/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vng.zing.pusheventmessage.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PushNotiJob implements org.apache.thrift.TBase<PushNotiJob, PushNotiJob._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PushNotiJob");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField OS_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("osVersion", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField SDK_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("sdkVersion", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField ZALO_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("zaloId", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField APP_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("appUser", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField BUNDLE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("bundleIds", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField PACKAGE_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("packageNames", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField GUIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("guids", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField ANDROID_NOTI_FIELD_DESC = new org.apache.thrift.protocol.TField("androidNoti", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField IOS_NOTI_FIELD_DESC = new org.apache.thrift.protocol.TField("iosNoti", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField WPHONE_NOTI_FIELD_DESC = new org.apache.thrift.protocol.TField("wphoneNoti", org.apache.thrift.protocol.TType.STRUCT, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PushNotiJobStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PushNotiJobTupleSchemeFactory());
  }

  public int id; // optional
  public int appId; // optional
  public List<String> osVersion; // optional
  public List<String> sdkVersion; // optional
  public List<String> zaloId; // optional
  public List<String> appUser; // optional
  public List<String> bundleIds; // optional
  public List<String> packageNames; // optional
  public List<String> guids; // optional
  public Noti androidNoti; // optional
  public Noti iosNoti; // optional
  public Noti wphoneNoti; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    APP_ID((short)2, "appId"),
    OS_VERSION((short)3, "osVersion"),
    SDK_VERSION((short)4, "sdkVersion"),
    ZALO_ID((short)5, "zaloId"),
    APP_USER((short)6, "appUser"),
    BUNDLE_IDS((short)7, "bundleIds"),
    PACKAGE_NAMES((short)8, "packageNames"),
    GUIDS((short)9, "guids"),
    ANDROID_NOTI((short)10, "androidNoti"),
    IOS_NOTI((short)11, "iosNoti"),
    WPHONE_NOTI((short)12, "wphoneNoti");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // APP_ID
          return APP_ID;
        case 3: // OS_VERSION
          return OS_VERSION;
        case 4: // SDK_VERSION
          return SDK_VERSION;
        case 5: // ZALO_ID
          return ZALO_ID;
        case 6: // APP_USER
          return APP_USER;
        case 7: // BUNDLE_IDS
          return BUNDLE_IDS;
        case 8: // PACKAGE_NAMES
          return PACKAGE_NAMES;
        case 9: // GUIDS
          return GUIDS;
        case 10: // ANDROID_NOTI
          return ANDROID_NOTI;
        case 11: // IOS_NOTI
          return IOS_NOTI;
        case 12: // WPHONE_NOTI
          return WPHONE_NOTI;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __APPID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.ID,_Fields.APP_ID,_Fields.OS_VERSION,_Fields.SDK_VERSION,_Fields.ZALO_ID,_Fields.APP_USER,_Fields.BUNDLE_IDS,_Fields.PACKAGE_NAMES,_Fields.GUIDS,_Fields.ANDROID_NOTI,_Fields.IOS_NOTI,_Fields.WPHONE_NOTI};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OS_VERSION, new org.apache.thrift.meta_data.FieldMetaData("osVersion", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SDK_VERSION, new org.apache.thrift.meta_data.FieldMetaData("sdkVersion", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ZALO_ID, new org.apache.thrift.meta_data.FieldMetaData("zaloId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.APP_USER, new org.apache.thrift.meta_data.FieldMetaData("appUser", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.BUNDLE_IDS, new org.apache.thrift.meta_data.FieldMetaData("bundleIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PACKAGE_NAMES, new org.apache.thrift.meta_data.FieldMetaData("packageNames", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.GUIDS, new org.apache.thrift.meta_data.FieldMetaData("guids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ANDROID_NOTI, new org.apache.thrift.meta_data.FieldMetaData("androidNoti", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Noti.class)));
    tmpMap.put(_Fields.IOS_NOTI, new org.apache.thrift.meta_data.FieldMetaData("iosNoti", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Noti.class)));
    tmpMap.put(_Fields.WPHONE_NOTI, new org.apache.thrift.meta_data.FieldMetaData("wphoneNoti", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Noti.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PushNotiJob.class, metaDataMap);
  }

  public PushNotiJob() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PushNotiJob(PushNotiJob other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.appId = other.appId;
    if (other.isSetOsVersion()) {
      List<String> __this__osVersion = new ArrayList<String>();
      for (String other_element : other.osVersion) {
        __this__osVersion.add(other_element);
      }
      this.osVersion = __this__osVersion;
    }
    if (other.isSetSdkVersion()) {
      List<String> __this__sdkVersion = new ArrayList<String>();
      for (String other_element : other.sdkVersion) {
        __this__sdkVersion.add(other_element);
      }
      this.sdkVersion = __this__sdkVersion;
    }
    if (other.isSetZaloId()) {
      List<String> __this__zaloId = new ArrayList<String>();
      for (String other_element : other.zaloId) {
        __this__zaloId.add(other_element);
      }
      this.zaloId = __this__zaloId;
    }
    if (other.isSetAppUser()) {
      List<String> __this__appUser = new ArrayList<String>();
      for (String other_element : other.appUser) {
        __this__appUser.add(other_element);
      }
      this.appUser = __this__appUser;
    }
    if (other.isSetBundleIds()) {
      List<String> __this__bundleIds = new ArrayList<String>();
      for (String other_element : other.bundleIds) {
        __this__bundleIds.add(other_element);
      }
      this.bundleIds = __this__bundleIds;
    }
    if (other.isSetPackageNames()) {
      List<String> __this__packageNames = new ArrayList<String>();
      for (String other_element : other.packageNames) {
        __this__packageNames.add(other_element);
      }
      this.packageNames = __this__packageNames;
    }
    if (other.isSetGuids()) {
      List<String> __this__guids = new ArrayList<String>();
      for (String other_element : other.guids) {
        __this__guids.add(other_element);
      }
      this.guids = __this__guids;
    }
    if (other.isSetAndroidNoti()) {
      this.androidNoti = new Noti(other.androidNoti);
    }
    if (other.isSetIosNoti()) {
      this.iosNoti = new Noti(other.iosNoti);
    }
    if (other.isSetWphoneNoti()) {
      this.wphoneNoti = new Noti(other.wphoneNoti);
    }
  }

  public PushNotiJob deepCopy() {
    return new PushNotiJob(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setAppIdIsSet(false);
    this.appId = 0;
    this.osVersion = null;
    this.sdkVersion = null;
    this.zaloId = null;
    this.appUser = null;
    this.bundleIds = null;
    this.packageNames = null;
    this.guids = null;
    this.androidNoti = null;
    this.iosNoti = null;
    this.wphoneNoti = null;
  }

  public int getId() {
    return this.id;
  }

  public PushNotiJob setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getAppId() {
    return this.appId;
  }

  public PushNotiJob setAppId(int appId) {
    this.appId = appId;
    setAppIdIsSet(true);
    return this;
  }

  public void unsetAppId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPID_ISSET_ID);
  }

  /** Returns true if field appId is set (has been assigned a value) and false otherwise */
  public boolean isSetAppId() {
    return EncodingUtils.testBit(__isset_bitfield, __APPID_ISSET_ID);
  }

  public void setAppIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPID_ISSET_ID, value);
  }

  public int getOsVersionSize() {
    return (this.osVersion == null) ? 0 : this.osVersion.size();
  }

  public java.util.Iterator<String> getOsVersionIterator() {
    return (this.osVersion == null) ? null : this.osVersion.iterator();
  }

  public void addToOsVersion(String elem) {
    if (this.osVersion == null) {
      this.osVersion = new ArrayList<String>();
    }
    this.osVersion.add(elem);
  }

  public List<String> getOsVersion() {
    return this.osVersion;
  }

  public PushNotiJob setOsVersion(List<String> osVersion) {
    this.osVersion = osVersion;
    return this;
  }

  public void unsetOsVersion() {
    this.osVersion = null;
  }

  /** Returns true if field osVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetOsVersion() {
    return this.osVersion != null;
  }

  public void setOsVersionIsSet(boolean value) {
    if (!value) {
      this.osVersion = null;
    }
  }

  public int getSdkVersionSize() {
    return (this.sdkVersion == null) ? 0 : this.sdkVersion.size();
  }

  public java.util.Iterator<String> getSdkVersionIterator() {
    return (this.sdkVersion == null) ? null : this.sdkVersion.iterator();
  }

  public void addToSdkVersion(String elem) {
    if (this.sdkVersion == null) {
      this.sdkVersion = new ArrayList<String>();
    }
    this.sdkVersion.add(elem);
  }

  public List<String> getSdkVersion() {
    return this.sdkVersion;
  }

  public PushNotiJob setSdkVersion(List<String> sdkVersion) {
    this.sdkVersion = sdkVersion;
    return this;
  }

  public void unsetSdkVersion() {
    this.sdkVersion = null;
  }

  /** Returns true if field sdkVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetSdkVersion() {
    return this.sdkVersion != null;
  }

  public void setSdkVersionIsSet(boolean value) {
    if (!value) {
      this.sdkVersion = null;
    }
  }

  public int getZaloIdSize() {
    return (this.zaloId == null) ? 0 : this.zaloId.size();
  }

  public java.util.Iterator<String> getZaloIdIterator() {
    return (this.zaloId == null) ? null : this.zaloId.iterator();
  }

  public void addToZaloId(String elem) {
    if (this.zaloId == null) {
      this.zaloId = new ArrayList<String>();
    }
    this.zaloId.add(elem);
  }

  public List<String> getZaloId() {
    return this.zaloId;
  }

  public PushNotiJob setZaloId(List<String> zaloId) {
    this.zaloId = zaloId;
    return this;
  }

  public void unsetZaloId() {
    this.zaloId = null;
  }

  /** Returns true if field zaloId is set (has been assigned a value) and false otherwise */
  public boolean isSetZaloId() {
    return this.zaloId != null;
  }

  public void setZaloIdIsSet(boolean value) {
    if (!value) {
      this.zaloId = null;
    }
  }

  public int getAppUserSize() {
    return (this.appUser == null) ? 0 : this.appUser.size();
  }

  public java.util.Iterator<String> getAppUserIterator() {
    return (this.appUser == null) ? null : this.appUser.iterator();
  }

  public void addToAppUser(String elem) {
    if (this.appUser == null) {
      this.appUser = new ArrayList<String>();
    }
    this.appUser.add(elem);
  }

  public List<String> getAppUser() {
    return this.appUser;
  }

  public PushNotiJob setAppUser(List<String> appUser) {
    this.appUser = appUser;
    return this;
  }

  public void unsetAppUser() {
    this.appUser = null;
  }

  /** Returns true if field appUser is set (has been assigned a value) and false otherwise */
  public boolean isSetAppUser() {
    return this.appUser != null;
  }

  public void setAppUserIsSet(boolean value) {
    if (!value) {
      this.appUser = null;
    }
  }

  public int getBundleIdsSize() {
    return (this.bundleIds == null) ? 0 : this.bundleIds.size();
  }

  public java.util.Iterator<String> getBundleIdsIterator() {
    return (this.bundleIds == null) ? null : this.bundleIds.iterator();
  }

  public void addToBundleIds(String elem) {
    if (this.bundleIds == null) {
      this.bundleIds = new ArrayList<String>();
    }
    this.bundleIds.add(elem);
  }

  public List<String> getBundleIds() {
    return this.bundleIds;
  }

  public PushNotiJob setBundleIds(List<String> bundleIds) {
    this.bundleIds = bundleIds;
    return this;
  }

  public void unsetBundleIds() {
    this.bundleIds = null;
  }

  /** Returns true if field bundleIds is set (has been assigned a value) and false otherwise */
  public boolean isSetBundleIds() {
    return this.bundleIds != null;
  }

  public void setBundleIdsIsSet(boolean value) {
    if (!value) {
      this.bundleIds = null;
    }
  }

  public int getPackageNamesSize() {
    return (this.packageNames == null) ? 0 : this.packageNames.size();
  }

  public java.util.Iterator<String> getPackageNamesIterator() {
    return (this.packageNames == null) ? null : this.packageNames.iterator();
  }

  public void addToPackageNames(String elem) {
    if (this.packageNames == null) {
      this.packageNames = new ArrayList<String>();
    }
    this.packageNames.add(elem);
  }

  public List<String> getPackageNames() {
    return this.packageNames;
  }

  public PushNotiJob setPackageNames(List<String> packageNames) {
    this.packageNames = packageNames;
    return this;
  }

  public void unsetPackageNames() {
    this.packageNames = null;
  }

  /** Returns true if field packageNames is set (has been assigned a value) and false otherwise */
  public boolean isSetPackageNames() {
    return this.packageNames != null;
  }

  public void setPackageNamesIsSet(boolean value) {
    if (!value) {
      this.packageNames = null;
    }
  }

  public int getGuidsSize() {
    return (this.guids == null) ? 0 : this.guids.size();
  }

  public java.util.Iterator<String> getGuidsIterator() {
    return (this.guids == null) ? null : this.guids.iterator();
  }

  public void addToGuids(String elem) {
    if (this.guids == null) {
      this.guids = new ArrayList<String>();
    }
    this.guids.add(elem);
  }

  public List<String> getGuids() {
    return this.guids;
  }

  public PushNotiJob setGuids(List<String> guids) {
    this.guids = guids;
    return this;
  }

  public void unsetGuids() {
    this.guids = null;
  }

  /** Returns true if field guids is set (has been assigned a value) and false otherwise */
  public boolean isSetGuids() {
    return this.guids != null;
  }

  public void setGuidsIsSet(boolean value) {
    if (!value) {
      this.guids = null;
    }
  }

  public Noti getAndroidNoti() {
    return this.androidNoti;
  }

  public PushNotiJob setAndroidNoti(Noti androidNoti) {
    this.androidNoti = androidNoti;
    return this;
  }

  public void unsetAndroidNoti() {
    this.androidNoti = null;
  }

  /** Returns true if field androidNoti is set (has been assigned a value) and false otherwise */
  public boolean isSetAndroidNoti() {
    return this.androidNoti != null;
  }

  public void setAndroidNotiIsSet(boolean value) {
    if (!value) {
      this.androidNoti = null;
    }
  }

  public Noti getIosNoti() {
    return this.iosNoti;
  }

  public PushNotiJob setIosNoti(Noti iosNoti) {
    this.iosNoti = iosNoti;
    return this;
  }

  public void unsetIosNoti() {
    this.iosNoti = null;
  }

  /** Returns true if field iosNoti is set (has been assigned a value) and false otherwise */
  public boolean isSetIosNoti() {
    return this.iosNoti != null;
  }

  public void setIosNotiIsSet(boolean value) {
    if (!value) {
      this.iosNoti = null;
    }
  }

  public Noti getWphoneNoti() {
    return this.wphoneNoti;
  }

  public PushNotiJob setWphoneNoti(Noti wphoneNoti) {
    this.wphoneNoti = wphoneNoti;
    return this;
  }

  public void unsetWphoneNoti() {
    this.wphoneNoti = null;
  }

  /** Returns true if field wphoneNoti is set (has been assigned a value) and false otherwise */
  public boolean isSetWphoneNoti() {
    return this.wphoneNoti != null;
  }

  public void setWphoneNotiIsSet(boolean value) {
    if (!value) {
      this.wphoneNoti = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case APP_ID:
      if (value == null) {
        unsetAppId();
      } else {
        setAppId((Integer)value);
      }
      break;

    case OS_VERSION:
      if (value == null) {
        unsetOsVersion();
      } else {
        setOsVersion((List<String>)value);
      }
      break;

    case SDK_VERSION:
      if (value == null) {
        unsetSdkVersion();
      } else {
        setSdkVersion((List<String>)value);
      }
      break;

    case ZALO_ID:
      if (value == null) {
        unsetZaloId();
      } else {
        setZaloId((List<String>)value);
      }
      break;

    case APP_USER:
      if (value == null) {
        unsetAppUser();
      } else {
        setAppUser((List<String>)value);
      }
      break;

    case BUNDLE_IDS:
      if (value == null) {
        unsetBundleIds();
      } else {
        setBundleIds((List<String>)value);
      }
      break;

    case PACKAGE_NAMES:
      if (value == null) {
        unsetPackageNames();
      } else {
        setPackageNames((List<String>)value);
      }
      break;

    case GUIDS:
      if (value == null) {
        unsetGuids();
      } else {
        setGuids((List<String>)value);
      }
      break;

    case ANDROID_NOTI:
      if (value == null) {
        unsetAndroidNoti();
      } else {
        setAndroidNoti((Noti)value);
      }
      break;

    case IOS_NOTI:
      if (value == null) {
        unsetIosNoti();
      } else {
        setIosNoti((Noti)value);
      }
      break;

    case WPHONE_NOTI:
      if (value == null) {
        unsetWphoneNoti();
      } else {
        setWphoneNoti((Noti)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case APP_ID:
      return Integer.valueOf(getAppId());

    case OS_VERSION:
      return getOsVersion();

    case SDK_VERSION:
      return getSdkVersion();

    case ZALO_ID:
      return getZaloId();

    case APP_USER:
      return getAppUser();

    case BUNDLE_IDS:
      return getBundleIds();

    case PACKAGE_NAMES:
      return getPackageNames();

    case GUIDS:
      return getGuids();

    case ANDROID_NOTI:
      return getAndroidNoti();

    case IOS_NOTI:
      return getIosNoti();

    case WPHONE_NOTI:
      return getWphoneNoti();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case APP_ID:
      return isSetAppId();
    case OS_VERSION:
      return isSetOsVersion();
    case SDK_VERSION:
      return isSetSdkVersion();
    case ZALO_ID:
      return isSetZaloId();
    case APP_USER:
      return isSetAppUser();
    case BUNDLE_IDS:
      return isSetBundleIds();
    case PACKAGE_NAMES:
      return isSetPackageNames();
    case GUIDS:
      return isSetGuids();
    case ANDROID_NOTI:
      return isSetAndroidNoti();
    case IOS_NOTI:
      return isSetIosNoti();
    case WPHONE_NOTI:
      return isSetWphoneNoti();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PushNotiJob)
      return this.equals((PushNotiJob)that);
    return false;
  }

  public boolean equals(PushNotiJob that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_appId = true && this.isSetAppId();
    boolean that_present_appId = true && that.isSetAppId();
    if (this_present_appId || that_present_appId) {
      if (!(this_present_appId && that_present_appId))
        return false;
      if (this.appId != that.appId)
        return false;
    }

    boolean this_present_osVersion = true && this.isSetOsVersion();
    boolean that_present_osVersion = true && that.isSetOsVersion();
    if (this_present_osVersion || that_present_osVersion) {
      if (!(this_present_osVersion && that_present_osVersion))
        return false;
      if (!this.osVersion.equals(that.osVersion))
        return false;
    }

    boolean this_present_sdkVersion = true && this.isSetSdkVersion();
    boolean that_present_sdkVersion = true && that.isSetSdkVersion();
    if (this_present_sdkVersion || that_present_sdkVersion) {
      if (!(this_present_sdkVersion && that_present_sdkVersion))
        return false;
      if (!this.sdkVersion.equals(that.sdkVersion))
        return false;
    }

    boolean this_present_zaloId = true && this.isSetZaloId();
    boolean that_present_zaloId = true && that.isSetZaloId();
    if (this_present_zaloId || that_present_zaloId) {
      if (!(this_present_zaloId && that_present_zaloId))
        return false;
      if (!this.zaloId.equals(that.zaloId))
        return false;
    }

    boolean this_present_appUser = true && this.isSetAppUser();
    boolean that_present_appUser = true && that.isSetAppUser();
    if (this_present_appUser || that_present_appUser) {
      if (!(this_present_appUser && that_present_appUser))
        return false;
      if (!this.appUser.equals(that.appUser))
        return false;
    }

    boolean this_present_bundleIds = true && this.isSetBundleIds();
    boolean that_present_bundleIds = true && that.isSetBundleIds();
    if (this_present_bundleIds || that_present_bundleIds) {
      if (!(this_present_bundleIds && that_present_bundleIds))
        return false;
      if (!this.bundleIds.equals(that.bundleIds))
        return false;
    }

    boolean this_present_packageNames = true && this.isSetPackageNames();
    boolean that_present_packageNames = true && that.isSetPackageNames();
    if (this_present_packageNames || that_present_packageNames) {
      if (!(this_present_packageNames && that_present_packageNames))
        return false;
      if (!this.packageNames.equals(that.packageNames))
        return false;
    }

    boolean this_present_guids = true && this.isSetGuids();
    boolean that_present_guids = true && that.isSetGuids();
    if (this_present_guids || that_present_guids) {
      if (!(this_present_guids && that_present_guids))
        return false;
      if (!this.guids.equals(that.guids))
        return false;
    }

    boolean this_present_androidNoti = true && this.isSetAndroidNoti();
    boolean that_present_androidNoti = true && that.isSetAndroidNoti();
    if (this_present_androidNoti || that_present_androidNoti) {
      if (!(this_present_androidNoti && that_present_androidNoti))
        return false;
      if (!this.androidNoti.equals(that.androidNoti))
        return false;
    }

    boolean this_present_iosNoti = true && this.isSetIosNoti();
    boolean that_present_iosNoti = true && that.isSetIosNoti();
    if (this_present_iosNoti || that_present_iosNoti) {
      if (!(this_present_iosNoti && that_present_iosNoti))
        return false;
      if (!this.iosNoti.equals(that.iosNoti))
        return false;
    }

    boolean this_present_wphoneNoti = true && this.isSetWphoneNoti();
    boolean that_present_wphoneNoti = true && that.isSetWphoneNoti();
    if (this_present_wphoneNoti || that_present_wphoneNoti) {
      if (!(this_present_wphoneNoti && that_present_wphoneNoti))
        return false;
      if (!this.wphoneNoti.equals(that.wphoneNoti))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(PushNotiJob other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    PushNotiJob typedOther = (PushNotiJob)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppId()).compareTo(typedOther.isSetAppId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, typedOther.appId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOsVersion()).compareTo(typedOther.isSetOsVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOsVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.osVersion, typedOther.osVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSdkVersion()).compareTo(typedOther.isSetSdkVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSdkVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sdkVersion, typedOther.sdkVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetZaloId()).compareTo(typedOther.isSetZaloId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZaloId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zaloId, typedOther.zaloId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppUser()).compareTo(typedOther.isSetAppUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appUser, typedOther.appUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBundleIds()).compareTo(typedOther.isSetBundleIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBundleIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bundleIds, typedOther.bundleIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPackageNames()).compareTo(typedOther.isSetPackageNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPackageNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.packageNames, typedOther.packageNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGuids()).compareTo(typedOther.isSetGuids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGuids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.guids, typedOther.guids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAndroidNoti()).compareTo(typedOther.isSetAndroidNoti());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAndroidNoti()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.androidNoti, typedOther.androidNoti);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIosNoti()).compareTo(typedOther.isSetIosNoti());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIosNoti()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iosNoti, typedOther.iosNoti);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWphoneNoti()).compareTo(typedOther.isSetWphoneNoti());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWphoneNoti()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wphoneNoti, typedOther.wphoneNoti);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PushNotiJob(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetAppId()) {
      if (!first) sb.append(", ");
      sb.append("appId:");
      sb.append(this.appId);
      first = false;
    }
    if (isSetOsVersion()) {
      if (!first) sb.append(", ");
      sb.append("osVersion:");
      if (this.osVersion == null) {
        sb.append("null");
      } else {
        sb.append(this.osVersion);
      }
      first = false;
    }
    if (isSetSdkVersion()) {
      if (!first) sb.append(", ");
      sb.append("sdkVersion:");
      if (this.sdkVersion == null) {
        sb.append("null");
      } else {
        sb.append(this.sdkVersion);
      }
      first = false;
    }
    if (isSetZaloId()) {
      if (!first) sb.append(", ");
      sb.append("zaloId:");
      if (this.zaloId == null) {
        sb.append("null");
      } else {
        sb.append(this.zaloId);
      }
      first = false;
    }
    if (isSetAppUser()) {
      if (!first) sb.append(", ");
      sb.append("appUser:");
      if (this.appUser == null) {
        sb.append("null");
      } else {
        sb.append(this.appUser);
      }
      first = false;
    }
    if (isSetBundleIds()) {
      if (!first) sb.append(", ");
      sb.append("bundleIds:");
      if (this.bundleIds == null) {
        sb.append("null");
      } else {
        sb.append(this.bundleIds);
      }
      first = false;
    }
    if (isSetPackageNames()) {
      if (!first) sb.append(", ");
      sb.append("packageNames:");
      if (this.packageNames == null) {
        sb.append("null");
      } else {
        sb.append(this.packageNames);
      }
      first = false;
    }
    if (isSetGuids()) {
      if (!first) sb.append(", ");
      sb.append("guids:");
      if (this.guids == null) {
        sb.append("null");
      } else {
        sb.append(this.guids);
      }
      first = false;
    }
    if (isSetAndroidNoti()) {
      if (!first) sb.append(", ");
      sb.append("androidNoti:");
      if (this.androidNoti == null) {
        sb.append("null");
      } else {
        sb.append(this.androidNoti);
      }
      first = false;
    }
    if (isSetIosNoti()) {
      if (!first) sb.append(", ");
      sb.append("iosNoti:");
      if (this.iosNoti == null) {
        sb.append("null");
      } else {
        sb.append(this.iosNoti);
      }
      first = false;
    }
    if (isSetWphoneNoti()) {
      if (!first) sb.append(", ");
      sb.append("wphoneNoti:");
      if (this.wphoneNoti == null) {
        sb.append("null");
      } else {
        sb.append(this.wphoneNoti);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (androidNoti != null) {
      androidNoti.validate();
    }
    if (iosNoti != null) {
      iosNoti.validate();
    }
    if (wphoneNoti != null) {
      wphoneNoti.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PushNotiJobStandardSchemeFactory implements SchemeFactory {
    public PushNotiJobStandardScheme getScheme() {
      return new PushNotiJobStandardScheme();
    }
  }

  private static class PushNotiJobStandardScheme extends StandardScheme<PushNotiJob> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PushNotiJob struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // APP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.appId = iprot.readI32();
              struct.setAppIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OS_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                struct.osVersion = new ArrayList<String>(_list80.size);
                for (int _i81 = 0; _i81 < _list80.size; ++_i81)
                {
                  String _elem82; // required
                  _elem82 = iprot.readString();
                  struct.osVersion.add(_elem82);
                }
                iprot.readListEnd();
              }
              struct.setOsVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SDK_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list83 = iprot.readListBegin();
                struct.sdkVersion = new ArrayList<String>(_list83.size);
                for (int _i84 = 0; _i84 < _list83.size; ++_i84)
                {
                  String _elem85; // required
                  _elem85 = iprot.readString();
                  struct.sdkVersion.add(_elem85);
                }
                iprot.readListEnd();
              }
              struct.setSdkVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ZALO_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list86 = iprot.readListBegin();
                struct.zaloId = new ArrayList<String>(_list86.size);
                for (int _i87 = 0; _i87 < _list86.size; ++_i87)
                {
                  String _elem88; // required
                  _elem88 = iprot.readString();
                  struct.zaloId.add(_elem88);
                }
                iprot.readListEnd();
              }
              struct.setZaloIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // APP_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list89 = iprot.readListBegin();
                struct.appUser = new ArrayList<String>(_list89.size);
                for (int _i90 = 0; _i90 < _list89.size; ++_i90)
                {
                  String _elem91; // required
                  _elem91 = iprot.readString();
                  struct.appUser.add(_elem91);
                }
                iprot.readListEnd();
              }
              struct.setAppUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BUNDLE_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list92 = iprot.readListBegin();
                struct.bundleIds = new ArrayList<String>(_list92.size);
                for (int _i93 = 0; _i93 < _list92.size; ++_i93)
                {
                  String _elem94; // required
                  _elem94 = iprot.readString();
                  struct.bundleIds.add(_elem94);
                }
                iprot.readListEnd();
              }
              struct.setBundleIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PACKAGE_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list95 = iprot.readListBegin();
                struct.packageNames = new ArrayList<String>(_list95.size);
                for (int _i96 = 0; _i96 < _list95.size; ++_i96)
                {
                  String _elem97; // required
                  _elem97 = iprot.readString();
                  struct.packageNames.add(_elem97);
                }
                iprot.readListEnd();
              }
              struct.setPackageNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // GUIDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list98 = iprot.readListBegin();
                struct.guids = new ArrayList<String>(_list98.size);
                for (int _i99 = 0; _i99 < _list98.size; ++_i99)
                {
                  String _elem100; // required
                  _elem100 = iprot.readString();
                  struct.guids.add(_elem100);
                }
                iprot.readListEnd();
              }
              struct.setGuidsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ANDROID_NOTI
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.androidNoti = new Noti();
              struct.androidNoti.read(iprot);
              struct.setAndroidNotiIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // IOS_NOTI
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.iosNoti = new Noti();
              struct.iosNoti.read(iprot);
              struct.setIosNotiIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // WPHONE_NOTI
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.wphoneNoti = new Noti();
              struct.wphoneNoti.read(iprot);
              struct.setWphoneNotiIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PushNotiJob struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAppId()) {
        oprot.writeFieldBegin(APP_ID_FIELD_DESC);
        oprot.writeI32(struct.appId);
        oprot.writeFieldEnd();
      }
      if (struct.osVersion != null) {
        if (struct.isSetOsVersion()) {
          oprot.writeFieldBegin(OS_VERSION_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.osVersion.size()));
            for (String _iter101 : struct.osVersion)
            {
              oprot.writeString(_iter101);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.sdkVersion != null) {
        if (struct.isSetSdkVersion()) {
          oprot.writeFieldBegin(SDK_VERSION_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.sdkVersion.size()));
            for (String _iter102 : struct.sdkVersion)
            {
              oprot.writeString(_iter102);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.zaloId != null) {
        if (struct.isSetZaloId()) {
          oprot.writeFieldBegin(ZALO_ID_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.zaloId.size()));
            for (String _iter103 : struct.zaloId)
            {
              oprot.writeString(_iter103);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.appUser != null) {
        if (struct.isSetAppUser()) {
          oprot.writeFieldBegin(APP_USER_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.appUser.size()));
            for (String _iter104 : struct.appUser)
            {
              oprot.writeString(_iter104);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.bundleIds != null) {
        if (struct.isSetBundleIds()) {
          oprot.writeFieldBegin(BUNDLE_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.bundleIds.size()));
            for (String _iter105 : struct.bundleIds)
            {
              oprot.writeString(_iter105);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.packageNames != null) {
        if (struct.isSetPackageNames()) {
          oprot.writeFieldBegin(PACKAGE_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.packageNames.size()));
            for (String _iter106 : struct.packageNames)
            {
              oprot.writeString(_iter106);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.guids != null) {
        if (struct.isSetGuids()) {
          oprot.writeFieldBegin(GUIDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.guids.size()));
            for (String _iter107 : struct.guids)
            {
              oprot.writeString(_iter107);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.androidNoti != null) {
        if (struct.isSetAndroidNoti()) {
          oprot.writeFieldBegin(ANDROID_NOTI_FIELD_DESC);
          struct.androidNoti.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.iosNoti != null) {
        if (struct.isSetIosNoti()) {
          oprot.writeFieldBegin(IOS_NOTI_FIELD_DESC);
          struct.iosNoti.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.wphoneNoti != null) {
        if (struct.isSetWphoneNoti()) {
          oprot.writeFieldBegin(WPHONE_NOTI_FIELD_DESC);
          struct.wphoneNoti.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PushNotiJobTupleSchemeFactory implements SchemeFactory {
    public PushNotiJobTupleScheme getScheme() {
      return new PushNotiJobTupleScheme();
    }
  }

  private static class PushNotiJobTupleScheme extends TupleScheme<PushNotiJob> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PushNotiJob struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetAppId()) {
        optionals.set(1);
      }
      if (struct.isSetOsVersion()) {
        optionals.set(2);
      }
      if (struct.isSetSdkVersion()) {
        optionals.set(3);
      }
      if (struct.isSetZaloId()) {
        optionals.set(4);
      }
      if (struct.isSetAppUser()) {
        optionals.set(5);
      }
      if (struct.isSetBundleIds()) {
        optionals.set(6);
      }
      if (struct.isSetPackageNames()) {
        optionals.set(7);
      }
      if (struct.isSetGuids()) {
        optionals.set(8);
      }
      if (struct.isSetAndroidNoti()) {
        optionals.set(9);
      }
      if (struct.isSetIosNoti()) {
        optionals.set(10);
      }
      if (struct.isSetWphoneNoti()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetAppId()) {
        oprot.writeI32(struct.appId);
      }
      if (struct.isSetOsVersion()) {
        {
          oprot.writeI32(struct.osVersion.size());
          for (String _iter108 : struct.osVersion)
          {
            oprot.writeString(_iter108);
          }
        }
      }
      if (struct.isSetSdkVersion()) {
        {
          oprot.writeI32(struct.sdkVersion.size());
          for (String _iter109 : struct.sdkVersion)
          {
            oprot.writeString(_iter109);
          }
        }
      }
      if (struct.isSetZaloId()) {
        {
          oprot.writeI32(struct.zaloId.size());
          for (String _iter110 : struct.zaloId)
          {
            oprot.writeString(_iter110);
          }
        }
      }
      if (struct.isSetAppUser()) {
        {
          oprot.writeI32(struct.appUser.size());
          for (String _iter111 : struct.appUser)
          {
            oprot.writeString(_iter111);
          }
        }
      }
      if (struct.isSetBundleIds()) {
        {
          oprot.writeI32(struct.bundleIds.size());
          for (String _iter112 : struct.bundleIds)
          {
            oprot.writeString(_iter112);
          }
        }
      }
      if (struct.isSetPackageNames()) {
        {
          oprot.writeI32(struct.packageNames.size());
          for (String _iter113 : struct.packageNames)
          {
            oprot.writeString(_iter113);
          }
        }
      }
      if (struct.isSetGuids()) {
        {
          oprot.writeI32(struct.guids.size());
          for (String _iter114 : struct.guids)
          {
            oprot.writeString(_iter114);
          }
        }
      }
      if (struct.isSetAndroidNoti()) {
        struct.androidNoti.write(oprot);
      }
      if (struct.isSetIosNoti()) {
        struct.iosNoti.write(oprot);
      }
      if (struct.isSetWphoneNoti()) {
        struct.wphoneNoti.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PushNotiJob struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.appId = iprot.readI32();
        struct.setAppIdIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list115 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.osVersion = new ArrayList<String>(_list115.size);
          for (int _i116 = 0; _i116 < _list115.size; ++_i116)
          {
            String _elem117; // required
            _elem117 = iprot.readString();
            struct.osVersion.add(_elem117);
          }
        }
        struct.setOsVersionIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list118 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.sdkVersion = new ArrayList<String>(_list118.size);
          for (int _i119 = 0; _i119 < _list118.size; ++_i119)
          {
            String _elem120; // required
            _elem120 = iprot.readString();
            struct.sdkVersion.add(_elem120);
          }
        }
        struct.setSdkVersionIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list121 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.zaloId = new ArrayList<String>(_list121.size);
          for (int _i122 = 0; _i122 < _list121.size; ++_i122)
          {
            String _elem123; // required
            _elem123 = iprot.readString();
            struct.zaloId.add(_elem123);
          }
        }
        struct.setZaloIdIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list124 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.appUser = new ArrayList<String>(_list124.size);
          for (int _i125 = 0; _i125 < _list124.size; ++_i125)
          {
            String _elem126; // required
            _elem126 = iprot.readString();
            struct.appUser.add(_elem126);
          }
        }
        struct.setAppUserIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list127 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.bundleIds = new ArrayList<String>(_list127.size);
          for (int _i128 = 0; _i128 < _list127.size; ++_i128)
          {
            String _elem129; // required
            _elem129 = iprot.readString();
            struct.bundleIds.add(_elem129);
          }
        }
        struct.setBundleIdsIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list130 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.packageNames = new ArrayList<String>(_list130.size);
          for (int _i131 = 0; _i131 < _list130.size; ++_i131)
          {
            String _elem132; // required
            _elem132 = iprot.readString();
            struct.packageNames.add(_elem132);
          }
        }
        struct.setPackageNamesIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list133 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.guids = new ArrayList<String>(_list133.size);
          for (int _i134 = 0; _i134 < _list133.size; ++_i134)
          {
            String _elem135; // required
            _elem135 = iprot.readString();
            struct.guids.add(_elem135);
          }
        }
        struct.setGuidsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.androidNoti = new Noti();
        struct.androidNoti.read(iprot);
        struct.setAndroidNotiIsSet(true);
      }
      if (incoming.get(10)) {
        struct.iosNoti = new Noti();
        struct.iosNoti.read(iprot);
        struct.setIosNotiIsSet(true);
      }
      if (incoming.get(11)) {
        struct.wphoneNoti = new Noti();
        struct.wphoneNoti.read(iprot);
        struct.setWphoneNotiIsSet(true);
      }
    }
  }

}

