/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vng.zing.pusheventmessage.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PushNotiInfo implements org.apache.thrift.TBase<PushNotiInfo, PushNotiInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PushNotiInfo");

  private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("platform", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("found", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField PUSHED_FIELD_DESC = new org.apache.thrift.protocol.TField("pushed", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField FAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("fail", org.apache.thrift.protocol.TType.I32, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PushNotiInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PushNotiInfoTupleSchemeFactory());
  }

  public String requestId; // optional
  public int appId; // optional
  public String platform; // optional
  public int found; // optional
  public int pushed; // optional
  public int request; // optional
  public String state; // optional
  public int fail; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REQUEST_ID((short)1, "requestId"),
    APP_ID((short)2, "appId"),
    PLATFORM((short)3, "platform"),
    FOUND((short)4, "found"),
    PUSHED((short)5, "pushed"),
    REQUEST((short)6, "request"),
    STATE((short)7, "state"),
    FAIL((short)8, "fail");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REQUEST_ID
          return REQUEST_ID;
        case 2: // APP_ID
          return APP_ID;
        case 3: // PLATFORM
          return PLATFORM;
        case 4: // FOUND
          return FOUND;
        case 5: // PUSHED
          return PUSHED;
        case 6: // REQUEST
          return REQUEST;
        case 7: // STATE
          return STATE;
        case 8: // FAIL
          return FAIL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __APPID_ISSET_ID = 0;
  private static final int __FOUND_ISSET_ID = 1;
  private static final int __PUSHED_ISSET_ID = 2;
  private static final int __REQUEST_ISSET_ID = 3;
  private static final int __FAIL_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.REQUEST_ID,_Fields.APP_ID,_Fields.PLATFORM,_Fields.FOUND,_Fields.PUSHED,_Fields.REQUEST,_Fields.STATE,_Fields.FAIL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("platform", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FOUND, new org.apache.thrift.meta_data.FieldMetaData("found", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PUSHED, new org.apache.thrift.meta_data.FieldMetaData("pushed", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FAIL, new org.apache.thrift.meta_data.FieldMetaData("fail", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PushNotiInfo.class, metaDataMap);
  }

  public PushNotiInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PushNotiInfo(PushNotiInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetRequestId()) {
      this.requestId = other.requestId;
    }
    this.appId = other.appId;
    if (other.isSetPlatform()) {
      this.platform = other.platform;
    }
    this.found = other.found;
    this.pushed = other.pushed;
    this.request = other.request;
    if (other.isSetState()) {
      this.state = other.state;
    }
    this.fail = other.fail;
  }

  public PushNotiInfo deepCopy() {
    return new PushNotiInfo(this);
  }

  @Override
  public void clear() {
    this.requestId = null;
    setAppIdIsSet(false);
    this.appId = 0;
    this.platform = null;
    setFoundIsSet(false);
    this.found = 0;
    setPushedIsSet(false);
    this.pushed = 0;
    setRequestIsSet(false);
    this.request = 0;
    this.state = null;
    setFailIsSet(false);
    this.fail = 0;
  }

  public String getRequestId() {
    return this.requestId;
  }

  public PushNotiInfo setRequestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

  public void unsetRequestId() {
    this.requestId = null;
  }

  /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestId() {
    return this.requestId != null;
  }

  public void setRequestIdIsSet(boolean value) {
    if (!value) {
      this.requestId = null;
    }
  }

  public int getAppId() {
    return this.appId;
  }

  public PushNotiInfo setAppId(int appId) {
    this.appId = appId;
    setAppIdIsSet(true);
    return this;
  }

  public void unsetAppId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPID_ISSET_ID);
  }

  /** Returns true if field appId is set (has been assigned a value) and false otherwise */
  public boolean isSetAppId() {
    return EncodingUtils.testBit(__isset_bitfield, __APPID_ISSET_ID);
  }

  public void setAppIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPID_ISSET_ID, value);
  }

  public String getPlatform() {
    return this.platform;
  }

  public PushNotiInfo setPlatform(String platform) {
    this.platform = platform;
    return this;
  }

  public void unsetPlatform() {
    this.platform = null;
  }

  /** Returns true if field platform is set (has been assigned a value) and false otherwise */
  public boolean isSetPlatform() {
    return this.platform != null;
  }

  public void setPlatformIsSet(boolean value) {
    if (!value) {
      this.platform = null;
    }
  }

  public int getFound() {
    return this.found;
  }

  public PushNotiInfo setFound(int found) {
    this.found = found;
    setFoundIsSet(true);
    return this;
  }

  public void unsetFound() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FOUND_ISSET_ID);
  }

  /** Returns true if field found is set (has been assigned a value) and false otherwise */
  public boolean isSetFound() {
    return EncodingUtils.testBit(__isset_bitfield, __FOUND_ISSET_ID);
  }

  public void setFoundIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FOUND_ISSET_ID, value);
  }

  public int getPushed() {
    return this.pushed;
  }

  public PushNotiInfo setPushed(int pushed) {
    this.pushed = pushed;
    setPushedIsSet(true);
    return this;
  }

  public void unsetPushed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PUSHED_ISSET_ID);
  }

  /** Returns true if field pushed is set (has been assigned a value) and false otherwise */
  public boolean isSetPushed() {
    return EncodingUtils.testBit(__isset_bitfield, __PUSHED_ISSET_ID);
  }

  public void setPushedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PUSHED_ISSET_ID, value);
  }

  public int getRequest() {
    return this.request;
  }

  public PushNotiInfo setRequest(int request) {
    this.request = request;
    setRequestIsSet(true);
    return this;
  }

  public void unsetRequest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUEST_ISSET_ID);
  }

  /** Returns true if field request is set (has been assigned a value) and false otherwise */
  public boolean isSetRequest() {
    return EncodingUtils.testBit(__isset_bitfield, __REQUEST_ISSET_ID);
  }

  public void setRequestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUEST_ISSET_ID, value);
  }

  public String getState() {
    return this.state;
  }

  public PushNotiInfo setState(String state) {
    this.state = state;
    return this;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  public int getFail() {
    return this.fail;
  }

  public PushNotiInfo setFail(int fail) {
    this.fail = fail;
    setFailIsSet(true);
    return this;
  }

  public void unsetFail() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FAIL_ISSET_ID);
  }

  /** Returns true if field fail is set (has been assigned a value) and false otherwise */
  public boolean isSetFail() {
    return EncodingUtils.testBit(__isset_bitfield, __FAIL_ISSET_ID);
  }

  public void setFailIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FAIL_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REQUEST_ID:
      if (value == null) {
        unsetRequestId();
      } else {
        setRequestId((String)value);
      }
      break;

    case APP_ID:
      if (value == null) {
        unsetAppId();
      } else {
        setAppId((Integer)value);
      }
      break;

    case PLATFORM:
      if (value == null) {
        unsetPlatform();
      } else {
        setPlatform((String)value);
      }
      break;

    case FOUND:
      if (value == null) {
        unsetFound();
      } else {
        setFound((Integer)value);
      }
      break;

    case PUSHED:
      if (value == null) {
        unsetPushed();
      } else {
        setPushed((Integer)value);
      }
      break;

    case REQUEST:
      if (value == null) {
        unsetRequest();
      } else {
        setRequest((Integer)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((String)value);
      }
      break;

    case FAIL:
      if (value == null) {
        unsetFail();
      } else {
        setFail((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REQUEST_ID:
      return getRequestId();

    case APP_ID:
      return Integer.valueOf(getAppId());

    case PLATFORM:
      return getPlatform();

    case FOUND:
      return Integer.valueOf(getFound());

    case PUSHED:
      return Integer.valueOf(getPushed());

    case REQUEST:
      return Integer.valueOf(getRequest());

    case STATE:
      return getState();

    case FAIL:
      return Integer.valueOf(getFail());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REQUEST_ID:
      return isSetRequestId();
    case APP_ID:
      return isSetAppId();
    case PLATFORM:
      return isSetPlatform();
    case FOUND:
      return isSetFound();
    case PUSHED:
      return isSetPushed();
    case REQUEST:
      return isSetRequest();
    case STATE:
      return isSetState();
    case FAIL:
      return isSetFail();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PushNotiInfo)
      return this.equals((PushNotiInfo)that);
    return false;
  }

  public boolean equals(PushNotiInfo that) {
    if (that == null)
      return false;

    boolean this_present_requestId = true && this.isSetRequestId();
    boolean that_present_requestId = true && that.isSetRequestId();
    if (this_present_requestId || that_present_requestId) {
      if (!(this_present_requestId && that_present_requestId))
        return false;
      if (!this.requestId.equals(that.requestId))
        return false;
    }

    boolean this_present_appId = true && this.isSetAppId();
    boolean that_present_appId = true && that.isSetAppId();
    if (this_present_appId || that_present_appId) {
      if (!(this_present_appId && that_present_appId))
        return false;
      if (this.appId != that.appId)
        return false;
    }

    boolean this_present_platform = true && this.isSetPlatform();
    boolean that_present_platform = true && that.isSetPlatform();
    if (this_present_platform || that_present_platform) {
      if (!(this_present_platform && that_present_platform))
        return false;
      if (!this.platform.equals(that.platform))
        return false;
    }

    boolean this_present_found = true && this.isSetFound();
    boolean that_present_found = true && that.isSetFound();
    if (this_present_found || that_present_found) {
      if (!(this_present_found && that_present_found))
        return false;
      if (this.found != that.found)
        return false;
    }

    boolean this_present_pushed = true && this.isSetPushed();
    boolean that_present_pushed = true && that.isSetPushed();
    if (this_present_pushed || that_present_pushed) {
      if (!(this_present_pushed && that_present_pushed))
        return false;
      if (this.pushed != that.pushed)
        return false;
    }

    boolean this_present_request = true && this.isSetRequest();
    boolean that_present_request = true && that.isSetRequest();
    if (this_present_request || that_present_request) {
      if (!(this_present_request && that_present_request))
        return false;
      if (this.request != that.request)
        return false;
    }

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    boolean this_present_fail = true && this.isSetFail();
    boolean that_present_fail = true && that.isSetFail();
    if (this_present_fail || that_present_fail) {
      if (!(this_present_fail && that_present_fail))
        return false;
      if (this.fail != that.fail)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(PushNotiInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    PushNotiInfo typedOther = (PushNotiInfo)other;

    lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(typedOther.isSetRequestId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, typedOther.requestId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppId()).compareTo(typedOther.isSetAppId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, typedOther.appId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlatform()).compareTo(typedOther.isSetPlatform());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlatform()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platform, typedOther.platform);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFound()).compareTo(typedOther.isSetFound());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFound()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.found, typedOther.found);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPushed()).compareTo(typedOther.isSetPushed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPushed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pushed, typedOther.pushed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequest()).compareTo(typedOther.isSetRequest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, typedOther.request);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetState()).compareTo(typedOther.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, typedOther.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFail()).compareTo(typedOther.isSetFail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fail, typedOther.fail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PushNotiInfo(");
    boolean first = true;

    if (isSetRequestId()) {
      sb.append("requestId:");
      if (this.requestId == null) {
        sb.append("null");
      } else {
        sb.append(this.requestId);
      }
      first = false;
    }
    if (isSetAppId()) {
      if (!first) sb.append(", ");
      sb.append("appId:");
      sb.append(this.appId);
      first = false;
    }
    if (isSetPlatform()) {
      if (!first) sb.append(", ");
      sb.append("platform:");
      if (this.platform == null) {
        sb.append("null");
      } else {
        sb.append(this.platform);
      }
      first = false;
    }
    if (isSetFound()) {
      if (!first) sb.append(", ");
      sb.append("found:");
      sb.append(this.found);
      first = false;
    }
    if (isSetPushed()) {
      if (!first) sb.append(", ");
      sb.append("pushed:");
      sb.append(this.pushed);
      first = false;
    }
    if (isSetRequest()) {
      if (!first) sb.append(", ");
      sb.append("request:");
      sb.append(this.request);
      first = false;
    }
    if (isSetState()) {
      if (!first) sb.append(", ");
      sb.append("state:");
      if (this.state == null) {
        sb.append("null");
      } else {
        sb.append(this.state);
      }
      first = false;
    }
    if (isSetFail()) {
      if (!first) sb.append(", ");
      sb.append("fail:");
      sb.append(this.fail);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PushNotiInfoStandardSchemeFactory implements SchemeFactory {
    public PushNotiInfoStandardScheme getScheme() {
      return new PushNotiInfoStandardScheme();
    }
  }

  private static class PushNotiInfoStandardScheme extends StandardScheme<PushNotiInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PushNotiInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REQUEST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestId = iprot.readString();
              struct.setRequestIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // APP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.appId = iprot.readI32();
              struct.setAppIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PLATFORM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.platform = iprot.readString();
              struct.setPlatformIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FOUND
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.found = iprot.readI32();
              struct.setFoundIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PUSHED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pushed = iprot.readI32();
              struct.setPushedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REQUEST
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.request = iprot.readI32();
              struct.setRequestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.state = iprot.readString();
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fail = iprot.readI32();
              struct.setFailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PushNotiInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.requestId != null) {
        if (struct.isSetRequestId()) {
          oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
          oprot.writeString(struct.requestId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAppId()) {
        oprot.writeFieldBegin(APP_ID_FIELD_DESC);
        oprot.writeI32(struct.appId);
        oprot.writeFieldEnd();
      }
      if (struct.platform != null) {
        if (struct.isSetPlatform()) {
          oprot.writeFieldBegin(PLATFORM_FIELD_DESC);
          oprot.writeString(struct.platform);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetFound()) {
        oprot.writeFieldBegin(FOUND_FIELD_DESC);
        oprot.writeI32(struct.found);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPushed()) {
        oprot.writeFieldBegin(PUSHED_FIELD_DESC);
        oprot.writeI32(struct.pushed);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRequest()) {
        oprot.writeFieldBegin(REQUEST_FIELD_DESC);
        oprot.writeI32(struct.request);
        oprot.writeFieldEnd();
      }
      if (struct.state != null) {
        if (struct.isSetState()) {
          oprot.writeFieldBegin(STATE_FIELD_DESC);
          oprot.writeString(struct.state);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetFail()) {
        oprot.writeFieldBegin(FAIL_FIELD_DESC);
        oprot.writeI32(struct.fail);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PushNotiInfoTupleSchemeFactory implements SchemeFactory {
    public PushNotiInfoTupleScheme getScheme() {
      return new PushNotiInfoTupleScheme();
    }
  }

  private static class PushNotiInfoTupleScheme extends TupleScheme<PushNotiInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PushNotiInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRequestId()) {
        optionals.set(0);
      }
      if (struct.isSetAppId()) {
        optionals.set(1);
      }
      if (struct.isSetPlatform()) {
        optionals.set(2);
      }
      if (struct.isSetFound()) {
        optionals.set(3);
      }
      if (struct.isSetPushed()) {
        optionals.set(4);
      }
      if (struct.isSetRequest()) {
        optionals.set(5);
      }
      if (struct.isSetState()) {
        optionals.set(6);
      }
      if (struct.isSetFail()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetRequestId()) {
        oprot.writeString(struct.requestId);
      }
      if (struct.isSetAppId()) {
        oprot.writeI32(struct.appId);
      }
      if (struct.isSetPlatform()) {
        oprot.writeString(struct.platform);
      }
      if (struct.isSetFound()) {
        oprot.writeI32(struct.found);
      }
      if (struct.isSetPushed()) {
        oprot.writeI32(struct.pushed);
      }
      if (struct.isSetRequest()) {
        oprot.writeI32(struct.request);
      }
      if (struct.isSetState()) {
        oprot.writeString(struct.state);
      }
      if (struct.isSetFail()) {
        oprot.writeI32(struct.fail);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PushNotiInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.requestId = iprot.readString();
        struct.setRequestIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.appId = iprot.readI32();
        struct.setAppIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.platform = iprot.readString();
        struct.setPlatformIsSet(true);
      }
      if (incoming.get(3)) {
        struct.found = iprot.readI32();
        struct.setFoundIsSet(true);
      }
      if (incoming.get(4)) {
        struct.pushed = iprot.readI32();
        struct.setPushedIsSet(true);
      }
      if (incoming.get(5)) {
        struct.request = iprot.readI32();
        struct.setRequestIsSet(true);
      }
      if (incoming.get(6)) {
        struct.state = iprot.readString();
        struct.setStateIsSet(true);
      }
      if (incoming.get(7)) {
        struct.fail = iprot.readI32();
        struct.setFailIsSet(true);
      }
    }
  }

}

