/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vng.zing.pusheventmessage.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class EventMsg implements org.apache.thrift.TBase<EventMsg, EventMsg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EventMsg");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField EVENT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("eventName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PORTRAIT_FIELD_DESC = new org.apache.thrift.protocol.TField("portrait", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField LANDSCAPE_FIELD_DESC = new org.apache.thrift.protocol.TField("landscape", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField START_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("startDate", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("endDate", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField PERIOD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("periodType", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField VISIBLE_TIMES_FIELD_DESC = new org.apache.thrift.protocol.TField("visibleTimes", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField IOS_HTML_FIELD_DESC = new org.apache.thrift.protocol.TField("iosHtml", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField ANDROID_HTML_FIELD_DESC = new org.apache.thrift.protocol.TField("androidHtml", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField WPHONE_HTML_FIELD_DESC = new org.apache.thrift.protocol.TField("wphoneHtml", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField PLATFORMS_FIELD_DESC = new org.apache.thrift.protocol.TField("platforms", org.apache.thrift.protocol.TType.LIST, (short)15);
  private static final org.apache.thrift.protocol.TField PACKAGE_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("packageNames", org.apache.thrift.protocol.TType.LIST, (short)16);
  private static final org.apache.thrift.protocol.TField BUNDLE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("bundleIds", org.apache.thrift.protocol.TType.LIST, (short)17);
  private static final org.apache.thrift.protocol.TField GUIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("guids", org.apache.thrift.protocol.TType.LIST, (short)18);
  private static final org.apache.thrift.protocol.TField SDK_VERSIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("sdkVersions", org.apache.thrift.protocol.TType.LIST, (short)19);
  private static final org.apache.thrift.protocol.TField APP_VERSIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("appVersions", org.apache.thrift.protocol.TType.LIST, (short)20);
  private static final org.apache.thrift.protocol.TField ZALO_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("zaloIds", org.apache.thrift.protocol.TType.LIST, (short)21);
  private static final org.apache.thrift.protocol.TField APP_USERS_FIELD_DESC = new org.apache.thrift.protocol.TField("appUsers", org.apache.thrift.protocol.TType.LIST, (short)22);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)24);
  private static final org.apache.thrift.protocol.TField IOS_HTML_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("iosHtmlHash", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField ANDROID_HTML_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("androidHtmlHash", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField WPHONE_HTML_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("wphoneHtmlHash", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField LOGGED_IN_FIELD_DESC = new org.apache.thrift.protocol.TField("loggedIn", org.apache.thrift.protocol.TType.BOOL, (short)28);
  private static final org.apache.thrift.protocol.TField DELAY_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("delayTime", org.apache.thrift.protocol.TType.I64, (short)29);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new EventMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new EventMsgTupleSchemeFactory());
  }

  public long id; // optional
  public int appId; // optional
  public String eventName; // optional
  public PopupSize portrait; // optional
  public PopupSize landscape; // optional
  public long startDate; // optional
  public long endDate; // optional
  /**
   * 
   * @see PeriodType
   */
  public PeriodType periodType; // optional
  public int visibleTimes; // optional
  public String iosHtml; // optional
  public String androidHtml; // optional
  public String wphoneHtml; // optional
  public List<MobilePlatform> platforms; // optional
  public List<String> packageNames; // optional
  public List<String> bundleIds; // optional
  public List<String> guids; // optional
  public List<String> sdkVersions; // optional
  public List<String> appVersions; // optional
  public List<Long> zaloIds; // optional
  public List<String> appUsers; // optional
  /**
   * 
   * @see MsgStatus
   */
  public MsgStatus status; // optional
  public String iosHtmlHash; // optional
  public String androidHtmlHash; // optional
  public String wphoneHtmlHash; // optional
  public boolean loggedIn; // optional
  public long delayTime; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    APP_ID((short)2, "appId"),
    EVENT_NAME((short)3, "eventName"),
    PORTRAIT((short)5, "portrait"),
    LANDSCAPE((short)6, "landscape"),
    START_DATE((short)7, "startDate"),
    END_DATE((short)8, "endDate"),
    /**
     * 
     * @see PeriodType
     */
    PERIOD_TYPE((short)9, "periodType"),
    VISIBLE_TIMES((short)11, "visibleTimes"),
    IOS_HTML((short)12, "iosHtml"),
    ANDROID_HTML((short)13, "androidHtml"),
    WPHONE_HTML((short)14, "wphoneHtml"),
    PLATFORMS((short)15, "platforms"),
    PACKAGE_NAMES((short)16, "packageNames"),
    BUNDLE_IDS((short)17, "bundleIds"),
    GUIDS((short)18, "guids"),
    SDK_VERSIONS((short)19, "sdkVersions"),
    APP_VERSIONS((short)20, "appVersions"),
    ZALO_IDS((short)21, "zaloIds"),
    APP_USERS((short)22, "appUsers"),
    /**
     * 
     * @see MsgStatus
     */
    STATUS((short)24, "status"),
    IOS_HTML_HASH((short)25, "iosHtmlHash"),
    ANDROID_HTML_HASH((short)26, "androidHtmlHash"),
    WPHONE_HTML_HASH((short)27, "wphoneHtmlHash"),
    LOGGED_IN((short)28, "loggedIn"),
    DELAY_TIME((short)29, "delayTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // APP_ID
          return APP_ID;
        case 3: // EVENT_NAME
          return EVENT_NAME;
        case 5: // PORTRAIT
          return PORTRAIT;
        case 6: // LANDSCAPE
          return LANDSCAPE;
        case 7: // START_DATE
          return START_DATE;
        case 8: // END_DATE
          return END_DATE;
        case 9: // PERIOD_TYPE
          return PERIOD_TYPE;
        case 11: // VISIBLE_TIMES
          return VISIBLE_TIMES;
        case 12: // IOS_HTML
          return IOS_HTML;
        case 13: // ANDROID_HTML
          return ANDROID_HTML;
        case 14: // WPHONE_HTML
          return WPHONE_HTML;
        case 15: // PLATFORMS
          return PLATFORMS;
        case 16: // PACKAGE_NAMES
          return PACKAGE_NAMES;
        case 17: // BUNDLE_IDS
          return BUNDLE_IDS;
        case 18: // GUIDS
          return GUIDS;
        case 19: // SDK_VERSIONS
          return SDK_VERSIONS;
        case 20: // APP_VERSIONS
          return APP_VERSIONS;
        case 21: // ZALO_IDS
          return ZALO_IDS;
        case 22: // APP_USERS
          return APP_USERS;
        case 24: // STATUS
          return STATUS;
        case 25: // IOS_HTML_HASH
          return IOS_HTML_HASH;
        case 26: // ANDROID_HTML_HASH
          return ANDROID_HTML_HASH;
        case 27: // WPHONE_HTML_HASH
          return WPHONE_HTML_HASH;
        case 28: // LOGGED_IN
          return LOGGED_IN;
        case 29: // DELAY_TIME
          return DELAY_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __APPID_ISSET_ID = 1;
  private static final int __STARTDATE_ISSET_ID = 2;
  private static final int __ENDDATE_ISSET_ID = 3;
  private static final int __VISIBLETIMES_ISSET_ID = 4;
  private static final int __LOGGEDIN_ISSET_ID = 5;
  private static final int __DELAYTIME_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.ID,_Fields.APP_ID,_Fields.EVENT_NAME,_Fields.PORTRAIT,_Fields.LANDSCAPE,_Fields.START_DATE,_Fields.END_DATE,_Fields.PERIOD_TYPE,_Fields.VISIBLE_TIMES,_Fields.IOS_HTML,_Fields.ANDROID_HTML,_Fields.WPHONE_HTML,_Fields.PLATFORMS,_Fields.PACKAGE_NAMES,_Fields.BUNDLE_IDS,_Fields.GUIDS,_Fields.SDK_VERSIONS,_Fields.APP_VERSIONS,_Fields.ZALO_IDS,_Fields.APP_USERS,_Fields.STATUS,_Fields.IOS_HTML_HASH,_Fields.ANDROID_HTML_HASH,_Fields.WPHONE_HTML_HASH,_Fields.LOGGED_IN,_Fields.DELAY_TIME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EVENT_NAME, new org.apache.thrift.meta_data.FieldMetaData("eventName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PORTRAIT, new org.apache.thrift.meta_data.FieldMetaData("portrait", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PopupSize.class)));
    tmpMap.put(_Fields.LANDSCAPE, new org.apache.thrift.meta_data.FieldMetaData("landscape", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PopupSize.class)));
    tmpMap.put(_Fields.START_DATE, new org.apache.thrift.meta_data.FieldMetaData("startDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.END_DATE, new org.apache.thrift.meta_data.FieldMetaData("endDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PERIOD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("periodType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PeriodType.class)));
    tmpMap.put(_Fields.VISIBLE_TIMES, new org.apache.thrift.meta_data.FieldMetaData("visibleTimes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IOS_HTML, new org.apache.thrift.meta_data.FieldMetaData("iosHtml", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ANDROID_HTML, new org.apache.thrift.meta_data.FieldMetaData("androidHtml", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WPHONE_HTML, new org.apache.thrift.meta_data.FieldMetaData("wphoneHtml", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLATFORMS, new org.apache.thrift.meta_data.FieldMetaData("platforms", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MobilePlatform.class))));
    tmpMap.put(_Fields.PACKAGE_NAMES, new org.apache.thrift.meta_data.FieldMetaData("packageNames", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.BUNDLE_IDS, new org.apache.thrift.meta_data.FieldMetaData("bundleIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.GUIDS, new org.apache.thrift.meta_data.FieldMetaData("guids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SDK_VERSIONS, new org.apache.thrift.meta_data.FieldMetaData("sdkVersions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.APP_VERSIONS, new org.apache.thrift.meta_data.FieldMetaData("appVersions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ZALO_IDS, new org.apache.thrift.meta_data.FieldMetaData("zaloIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.APP_USERS, new org.apache.thrift.meta_data.FieldMetaData("appUsers", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MsgStatus.class)));
    tmpMap.put(_Fields.IOS_HTML_HASH, new org.apache.thrift.meta_data.FieldMetaData("iosHtmlHash", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ANDROID_HTML_HASH, new org.apache.thrift.meta_data.FieldMetaData("androidHtmlHash", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WPHONE_HTML_HASH, new org.apache.thrift.meta_data.FieldMetaData("wphoneHtmlHash", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOGGED_IN, new org.apache.thrift.meta_data.FieldMetaData("loggedIn", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DELAY_TIME, new org.apache.thrift.meta_data.FieldMetaData("delayTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EventMsg.class, metaDataMap);
  }

  public EventMsg() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EventMsg(EventMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.appId = other.appId;
    if (other.isSetEventName()) {
      this.eventName = other.eventName;
    }
    if (other.isSetPortrait()) {
      this.portrait = new PopupSize(other.portrait);
    }
    if (other.isSetLandscape()) {
      this.landscape = new PopupSize(other.landscape);
    }
    this.startDate = other.startDate;
    this.endDate = other.endDate;
    if (other.isSetPeriodType()) {
      this.periodType = other.periodType;
    }
    this.visibleTimes = other.visibleTimes;
    if (other.isSetIosHtml()) {
      this.iosHtml = other.iosHtml;
    }
    if (other.isSetAndroidHtml()) {
      this.androidHtml = other.androidHtml;
    }
    if (other.isSetWphoneHtml()) {
      this.wphoneHtml = other.wphoneHtml;
    }
    if (other.isSetPlatforms()) {
      List<MobilePlatform> __this__platforms = new ArrayList<MobilePlatform>();
      for (MobilePlatform other_element : other.platforms) {
        __this__platforms.add(other_element);
      }
      this.platforms = __this__platforms;
    }
    if (other.isSetPackageNames()) {
      List<String> __this__packageNames = new ArrayList<String>();
      for (String other_element : other.packageNames) {
        __this__packageNames.add(other_element);
      }
      this.packageNames = __this__packageNames;
    }
    if (other.isSetBundleIds()) {
      List<String> __this__bundleIds = new ArrayList<String>();
      for (String other_element : other.bundleIds) {
        __this__bundleIds.add(other_element);
      }
      this.bundleIds = __this__bundleIds;
    }
    if (other.isSetGuids()) {
      List<String> __this__guids = new ArrayList<String>();
      for (String other_element : other.guids) {
        __this__guids.add(other_element);
      }
      this.guids = __this__guids;
    }
    if (other.isSetSdkVersions()) {
      List<String> __this__sdkVersions = new ArrayList<String>();
      for (String other_element : other.sdkVersions) {
        __this__sdkVersions.add(other_element);
      }
      this.sdkVersions = __this__sdkVersions;
    }
    if (other.isSetAppVersions()) {
      List<String> __this__appVersions = new ArrayList<String>();
      for (String other_element : other.appVersions) {
        __this__appVersions.add(other_element);
      }
      this.appVersions = __this__appVersions;
    }
    if (other.isSetZaloIds()) {
      List<Long> __this__zaloIds = new ArrayList<Long>();
      for (Long other_element : other.zaloIds) {
        __this__zaloIds.add(other_element);
      }
      this.zaloIds = __this__zaloIds;
    }
    if (other.isSetAppUsers()) {
      List<String> __this__appUsers = new ArrayList<String>();
      for (String other_element : other.appUsers) {
        __this__appUsers.add(other_element);
      }
      this.appUsers = __this__appUsers;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetIosHtmlHash()) {
      this.iosHtmlHash = other.iosHtmlHash;
    }
    if (other.isSetAndroidHtmlHash()) {
      this.androidHtmlHash = other.androidHtmlHash;
    }
    if (other.isSetWphoneHtmlHash()) {
      this.wphoneHtmlHash = other.wphoneHtmlHash;
    }
    this.loggedIn = other.loggedIn;
    this.delayTime = other.delayTime;
  }

  public EventMsg deepCopy() {
    return new EventMsg(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setAppIdIsSet(false);
    this.appId = 0;
    this.eventName = null;
    this.portrait = null;
    this.landscape = null;
    setStartDateIsSet(false);
    this.startDate = 0;
    setEndDateIsSet(false);
    this.endDate = 0;
    this.periodType = null;
    setVisibleTimesIsSet(false);
    this.visibleTimes = 0;
    this.iosHtml = null;
    this.androidHtml = null;
    this.wphoneHtml = null;
    this.platforms = null;
    this.packageNames = null;
    this.bundleIds = null;
    this.guids = null;
    this.sdkVersions = null;
    this.appVersions = null;
    this.zaloIds = null;
    this.appUsers = null;
    this.status = null;
    this.iosHtmlHash = null;
    this.androidHtmlHash = null;
    this.wphoneHtmlHash = null;
    setLoggedInIsSet(false);
    this.loggedIn = false;
    setDelayTimeIsSet(false);
    this.delayTime = 0;
  }

  public long getId() {
    return this.id;
  }

  public EventMsg setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getAppId() {
    return this.appId;
  }

  public EventMsg setAppId(int appId) {
    this.appId = appId;
    setAppIdIsSet(true);
    return this;
  }

  public void unsetAppId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPID_ISSET_ID);
  }

  /** Returns true if field appId is set (has been assigned a value) and false otherwise */
  public boolean isSetAppId() {
    return EncodingUtils.testBit(__isset_bitfield, __APPID_ISSET_ID);
  }

  public void setAppIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPID_ISSET_ID, value);
  }

  public String getEventName() {
    return this.eventName;
  }

  public EventMsg setEventName(String eventName) {
    this.eventName = eventName;
    return this;
  }

  public void unsetEventName() {
    this.eventName = null;
  }

  /** Returns true if field eventName is set (has been assigned a value) and false otherwise */
  public boolean isSetEventName() {
    return this.eventName != null;
  }

  public void setEventNameIsSet(boolean value) {
    if (!value) {
      this.eventName = null;
    }
  }

  public PopupSize getPortrait() {
    return this.portrait;
  }

  public EventMsg setPortrait(PopupSize portrait) {
    this.portrait = portrait;
    return this;
  }

  public void unsetPortrait() {
    this.portrait = null;
  }

  /** Returns true if field portrait is set (has been assigned a value) and false otherwise */
  public boolean isSetPortrait() {
    return this.portrait != null;
  }

  public void setPortraitIsSet(boolean value) {
    if (!value) {
      this.portrait = null;
    }
  }

  public PopupSize getLandscape() {
    return this.landscape;
  }

  public EventMsg setLandscape(PopupSize landscape) {
    this.landscape = landscape;
    return this;
  }

  public void unsetLandscape() {
    this.landscape = null;
  }

  /** Returns true if field landscape is set (has been assigned a value) and false otherwise */
  public boolean isSetLandscape() {
    return this.landscape != null;
  }

  public void setLandscapeIsSet(boolean value) {
    if (!value) {
      this.landscape = null;
    }
  }

  public long getStartDate() {
    return this.startDate;
  }

  public EventMsg setStartDate(long startDate) {
    this.startDate = startDate;
    setStartDateIsSet(true);
    return this;
  }

  public void unsetStartDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTDATE_ISSET_ID);
  }

  /** Returns true if field startDate is set (has been assigned a value) and false otherwise */
  public boolean isSetStartDate() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTDATE_ISSET_ID);
  }

  public void setStartDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTDATE_ISSET_ID, value);
  }

  public long getEndDate() {
    return this.endDate;
  }

  public EventMsg setEndDate(long endDate) {
    this.endDate = endDate;
    setEndDateIsSet(true);
    return this;
  }

  public void unsetEndDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDDATE_ISSET_ID);
  }

  /** Returns true if field endDate is set (has been assigned a value) and false otherwise */
  public boolean isSetEndDate() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDDATE_ISSET_ID);
  }

  public void setEndDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDDATE_ISSET_ID, value);
  }

  /**
   * 
   * @see PeriodType
   */
  public PeriodType getPeriodType() {
    return this.periodType;
  }

  /**
   * 
   * @see PeriodType
   */
  public EventMsg setPeriodType(PeriodType periodType) {
    this.periodType = periodType;
    return this;
  }

  public void unsetPeriodType() {
    this.periodType = null;
  }

  /** Returns true if field periodType is set (has been assigned a value) and false otherwise */
  public boolean isSetPeriodType() {
    return this.periodType != null;
  }

  public void setPeriodTypeIsSet(boolean value) {
    if (!value) {
      this.periodType = null;
    }
  }

  public int getVisibleTimes() {
    return this.visibleTimes;
  }

  public EventMsg setVisibleTimes(int visibleTimes) {
    this.visibleTimes = visibleTimes;
    setVisibleTimesIsSet(true);
    return this;
  }

  public void unsetVisibleTimes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VISIBLETIMES_ISSET_ID);
  }

  /** Returns true if field visibleTimes is set (has been assigned a value) and false otherwise */
  public boolean isSetVisibleTimes() {
    return EncodingUtils.testBit(__isset_bitfield, __VISIBLETIMES_ISSET_ID);
  }

  public void setVisibleTimesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VISIBLETIMES_ISSET_ID, value);
  }

  public String getIosHtml() {
    return this.iosHtml;
  }

  public EventMsg setIosHtml(String iosHtml) {
    this.iosHtml = iosHtml;
    return this;
  }

  public void unsetIosHtml() {
    this.iosHtml = null;
  }

  /** Returns true if field iosHtml is set (has been assigned a value) and false otherwise */
  public boolean isSetIosHtml() {
    return this.iosHtml != null;
  }

  public void setIosHtmlIsSet(boolean value) {
    if (!value) {
      this.iosHtml = null;
    }
  }

  public String getAndroidHtml() {
    return this.androidHtml;
  }

  public EventMsg setAndroidHtml(String androidHtml) {
    this.androidHtml = androidHtml;
    return this;
  }

  public void unsetAndroidHtml() {
    this.androidHtml = null;
  }

  /** Returns true if field androidHtml is set (has been assigned a value) and false otherwise */
  public boolean isSetAndroidHtml() {
    return this.androidHtml != null;
  }

  public void setAndroidHtmlIsSet(boolean value) {
    if (!value) {
      this.androidHtml = null;
    }
  }

  public String getWphoneHtml() {
    return this.wphoneHtml;
  }

  public EventMsg setWphoneHtml(String wphoneHtml) {
    this.wphoneHtml = wphoneHtml;
    return this;
  }

  public void unsetWphoneHtml() {
    this.wphoneHtml = null;
  }

  /** Returns true if field wphoneHtml is set (has been assigned a value) and false otherwise */
  public boolean isSetWphoneHtml() {
    return this.wphoneHtml != null;
  }

  public void setWphoneHtmlIsSet(boolean value) {
    if (!value) {
      this.wphoneHtml = null;
    }
  }

  public int getPlatformsSize() {
    return (this.platforms == null) ? 0 : this.platforms.size();
  }

  public java.util.Iterator<MobilePlatform> getPlatformsIterator() {
    return (this.platforms == null) ? null : this.platforms.iterator();
  }

  public void addToPlatforms(MobilePlatform elem) {
    if (this.platforms == null) {
      this.platforms = new ArrayList<MobilePlatform>();
    }
    this.platforms.add(elem);
  }

  public List<MobilePlatform> getPlatforms() {
    return this.platforms;
  }

  public EventMsg setPlatforms(List<MobilePlatform> platforms) {
    this.platforms = platforms;
    return this;
  }

  public void unsetPlatforms() {
    this.platforms = null;
  }

  /** Returns true if field platforms is set (has been assigned a value) and false otherwise */
  public boolean isSetPlatforms() {
    return this.platforms != null;
  }

  public void setPlatformsIsSet(boolean value) {
    if (!value) {
      this.platforms = null;
    }
  }

  public int getPackageNamesSize() {
    return (this.packageNames == null) ? 0 : this.packageNames.size();
  }

  public java.util.Iterator<String> getPackageNamesIterator() {
    return (this.packageNames == null) ? null : this.packageNames.iterator();
  }

  public void addToPackageNames(String elem) {
    if (this.packageNames == null) {
      this.packageNames = new ArrayList<String>();
    }
    this.packageNames.add(elem);
  }

  public List<String> getPackageNames() {
    return this.packageNames;
  }

  public EventMsg setPackageNames(List<String> packageNames) {
    this.packageNames = packageNames;
    return this;
  }

  public void unsetPackageNames() {
    this.packageNames = null;
  }

  /** Returns true if field packageNames is set (has been assigned a value) and false otherwise */
  public boolean isSetPackageNames() {
    return this.packageNames != null;
  }

  public void setPackageNamesIsSet(boolean value) {
    if (!value) {
      this.packageNames = null;
    }
  }

  public int getBundleIdsSize() {
    return (this.bundleIds == null) ? 0 : this.bundleIds.size();
  }

  public java.util.Iterator<String> getBundleIdsIterator() {
    return (this.bundleIds == null) ? null : this.bundleIds.iterator();
  }

  public void addToBundleIds(String elem) {
    if (this.bundleIds == null) {
      this.bundleIds = new ArrayList<String>();
    }
    this.bundleIds.add(elem);
  }

  public List<String> getBundleIds() {
    return this.bundleIds;
  }

  public EventMsg setBundleIds(List<String> bundleIds) {
    this.bundleIds = bundleIds;
    return this;
  }

  public void unsetBundleIds() {
    this.bundleIds = null;
  }

  /** Returns true if field bundleIds is set (has been assigned a value) and false otherwise */
  public boolean isSetBundleIds() {
    return this.bundleIds != null;
  }

  public void setBundleIdsIsSet(boolean value) {
    if (!value) {
      this.bundleIds = null;
    }
  }

  public int getGuidsSize() {
    return (this.guids == null) ? 0 : this.guids.size();
  }

  public java.util.Iterator<String> getGuidsIterator() {
    return (this.guids == null) ? null : this.guids.iterator();
  }

  public void addToGuids(String elem) {
    if (this.guids == null) {
      this.guids = new ArrayList<String>();
    }
    this.guids.add(elem);
  }

  public List<String> getGuids() {
    return this.guids;
  }

  public EventMsg setGuids(List<String> guids) {
    this.guids = guids;
    return this;
  }

  public void unsetGuids() {
    this.guids = null;
  }

  /** Returns true if field guids is set (has been assigned a value) and false otherwise */
  public boolean isSetGuids() {
    return this.guids != null;
  }

  public void setGuidsIsSet(boolean value) {
    if (!value) {
      this.guids = null;
    }
  }

  public int getSdkVersionsSize() {
    return (this.sdkVersions == null) ? 0 : this.sdkVersions.size();
  }

  public java.util.Iterator<String> getSdkVersionsIterator() {
    return (this.sdkVersions == null) ? null : this.sdkVersions.iterator();
  }

  public void addToSdkVersions(String elem) {
    if (this.sdkVersions == null) {
      this.sdkVersions = new ArrayList<String>();
    }
    this.sdkVersions.add(elem);
  }

  public List<String> getSdkVersions() {
    return this.sdkVersions;
  }

  public EventMsg setSdkVersions(List<String> sdkVersions) {
    this.sdkVersions = sdkVersions;
    return this;
  }

  public void unsetSdkVersions() {
    this.sdkVersions = null;
  }

  /** Returns true if field sdkVersions is set (has been assigned a value) and false otherwise */
  public boolean isSetSdkVersions() {
    return this.sdkVersions != null;
  }

  public void setSdkVersionsIsSet(boolean value) {
    if (!value) {
      this.sdkVersions = null;
    }
  }

  public int getAppVersionsSize() {
    return (this.appVersions == null) ? 0 : this.appVersions.size();
  }

  public java.util.Iterator<String> getAppVersionsIterator() {
    return (this.appVersions == null) ? null : this.appVersions.iterator();
  }

  public void addToAppVersions(String elem) {
    if (this.appVersions == null) {
      this.appVersions = new ArrayList<String>();
    }
    this.appVersions.add(elem);
  }

  public List<String> getAppVersions() {
    return this.appVersions;
  }

  public EventMsg setAppVersions(List<String> appVersions) {
    this.appVersions = appVersions;
    return this;
  }

  public void unsetAppVersions() {
    this.appVersions = null;
  }

  /** Returns true if field appVersions is set (has been assigned a value) and false otherwise */
  public boolean isSetAppVersions() {
    return this.appVersions != null;
  }

  public void setAppVersionsIsSet(boolean value) {
    if (!value) {
      this.appVersions = null;
    }
  }

  public int getZaloIdsSize() {
    return (this.zaloIds == null) ? 0 : this.zaloIds.size();
  }

  public java.util.Iterator<Long> getZaloIdsIterator() {
    return (this.zaloIds == null) ? null : this.zaloIds.iterator();
  }

  public void addToZaloIds(long elem) {
    if (this.zaloIds == null) {
      this.zaloIds = new ArrayList<Long>();
    }
    this.zaloIds.add(elem);
  }

  public List<Long> getZaloIds() {
    return this.zaloIds;
  }

  public EventMsg setZaloIds(List<Long> zaloIds) {
    this.zaloIds = zaloIds;
    return this;
  }

  public void unsetZaloIds() {
    this.zaloIds = null;
  }

  /** Returns true if field zaloIds is set (has been assigned a value) and false otherwise */
  public boolean isSetZaloIds() {
    return this.zaloIds != null;
  }

  public void setZaloIdsIsSet(boolean value) {
    if (!value) {
      this.zaloIds = null;
    }
  }

  public int getAppUsersSize() {
    return (this.appUsers == null) ? 0 : this.appUsers.size();
  }

  public java.util.Iterator<String> getAppUsersIterator() {
    return (this.appUsers == null) ? null : this.appUsers.iterator();
  }

  public void addToAppUsers(String elem) {
    if (this.appUsers == null) {
      this.appUsers = new ArrayList<String>();
    }
    this.appUsers.add(elem);
  }

  public List<String> getAppUsers() {
    return this.appUsers;
  }

  public EventMsg setAppUsers(List<String> appUsers) {
    this.appUsers = appUsers;
    return this;
  }

  public void unsetAppUsers() {
    this.appUsers = null;
  }

  /** Returns true if field appUsers is set (has been assigned a value) and false otherwise */
  public boolean isSetAppUsers() {
    return this.appUsers != null;
  }

  public void setAppUsersIsSet(boolean value) {
    if (!value) {
      this.appUsers = null;
    }
  }

  /**
   * 
   * @see MsgStatus
   */
  public MsgStatus getStatus() {
    return this.status;
  }

  /**
   * 
   * @see MsgStatus
   */
  public EventMsg setStatus(MsgStatus status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public String getIosHtmlHash() {
    return this.iosHtmlHash;
  }

  public EventMsg setIosHtmlHash(String iosHtmlHash) {
    this.iosHtmlHash = iosHtmlHash;
    return this;
  }

  public void unsetIosHtmlHash() {
    this.iosHtmlHash = null;
  }

  /** Returns true if field iosHtmlHash is set (has been assigned a value) and false otherwise */
  public boolean isSetIosHtmlHash() {
    return this.iosHtmlHash != null;
  }

  public void setIosHtmlHashIsSet(boolean value) {
    if (!value) {
      this.iosHtmlHash = null;
    }
  }

  public String getAndroidHtmlHash() {
    return this.androidHtmlHash;
  }

  public EventMsg setAndroidHtmlHash(String androidHtmlHash) {
    this.androidHtmlHash = androidHtmlHash;
    return this;
  }

  public void unsetAndroidHtmlHash() {
    this.androidHtmlHash = null;
  }

  /** Returns true if field androidHtmlHash is set (has been assigned a value) and false otherwise */
  public boolean isSetAndroidHtmlHash() {
    return this.androidHtmlHash != null;
  }

  public void setAndroidHtmlHashIsSet(boolean value) {
    if (!value) {
      this.androidHtmlHash = null;
    }
  }

  public String getWphoneHtmlHash() {
    return this.wphoneHtmlHash;
  }

  public EventMsg setWphoneHtmlHash(String wphoneHtmlHash) {
    this.wphoneHtmlHash = wphoneHtmlHash;
    return this;
  }

  public void unsetWphoneHtmlHash() {
    this.wphoneHtmlHash = null;
  }

  /** Returns true if field wphoneHtmlHash is set (has been assigned a value) and false otherwise */
  public boolean isSetWphoneHtmlHash() {
    return this.wphoneHtmlHash != null;
  }

  public void setWphoneHtmlHashIsSet(boolean value) {
    if (!value) {
      this.wphoneHtmlHash = null;
    }
  }

  public boolean isLoggedIn() {
    return this.loggedIn;
  }

  public EventMsg setLoggedIn(boolean loggedIn) {
    this.loggedIn = loggedIn;
    setLoggedInIsSet(true);
    return this;
  }

  public void unsetLoggedIn() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOGGEDIN_ISSET_ID);
  }

  /** Returns true if field loggedIn is set (has been assigned a value) and false otherwise */
  public boolean isSetLoggedIn() {
    return EncodingUtils.testBit(__isset_bitfield, __LOGGEDIN_ISSET_ID);
  }

  public void setLoggedInIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOGGEDIN_ISSET_ID, value);
  }

  public long getDelayTime() {
    return this.delayTime;
  }

  public EventMsg setDelayTime(long delayTime) {
    this.delayTime = delayTime;
    setDelayTimeIsSet(true);
    return this;
  }

  public void unsetDelayTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DELAYTIME_ISSET_ID);
  }

  /** Returns true if field delayTime is set (has been assigned a value) and false otherwise */
  public boolean isSetDelayTime() {
    return EncodingUtils.testBit(__isset_bitfield, __DELAYTIME_ISSET_ID);
  }

  public void setDelayTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DELAYTIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case APP_ID:
      if (value == null) {
        unsetAppId();
      } else {
        setAppId((Integer)value);
      }
      break;

    case EVENT_NAME:
      if (value == null) {
        unsetEventName();
      } else {
        setEventName((String)value);
      }
      break;

    case PORTRAIT:
      if (value == null) {
        unsetPortrait();
      } else {
        setPortrait((PopupSize)value);
      }
      break;

    case LANDSCAPE:
      if (value == null) {
        unsetLandscape();
      } else {
        setLandscape((PopupSize)value);
      }
      break;

    case START_DATE:
      if (value == null) {
        unsetStartDate();
      } else {
        setStartDate((Long)value);
      }
      break;

    case END_DATE:
      if (value == null) {
        unsetEndDate();
      } else {
        setEndDate((Long)value);
      }
      break;

    case PERIOD_TYPE:
      if (value == null) {
        unsetPeriodType();
      } else {
        setPeriodType((PeriodType)value);
      }
      break;

    case VISIBLE_TIMES:
      if (value == null) {
        unsetVisibleTimes();
      } else {
        setVisibleTimes((Integer)value);
      }
      break;

    case IOS_HTML:
      if (value == null) {
        unsetIosHtml();
      } else {
        setIosHtml((String)value);
      }
      break;

    case ANDROID_HTML:
      if (value == null) {
        unsetAndroidHtml();
      } else {
        setAndroidHtml((String)value);
      }
      break;

    case WPHONE_HTML:
      if (value == null) {
        unsetWphoneHtml();
      } else {
        setWphoneHtml((String)value);
      }
      break;

    case PLATFORMS:
      if (value == null) {
        unsetPlatforms();
      } else {
        setPlatforms((List<MobilePlatform>)value);
      }
      break;

    case PACKAGE_NAMES:
      if (value == null) {
        unsetPackageNames();
      } else {
        setPackageNames((List<String>)value);
      }
      break;

    case BUNDLE_IDS:
      if (value == null) {
        unsetBundleIds();
      } else {
        setBundleIds((List<String>)value);
      }
      break;

    case GUIDS:
      if (value == null) {
        unsetGuids();
      } else {
        setGuids((List<String>)value);
      }
      break;

    case SDK_VERSIONS:
      if (value == null) {
        unsetSdkVersions();
      } else {
        setSdkVersions((List<String>)value);
      }
      break;

    case APP_VERSIONS:
      if (value == null) {
        unsetAppVersions();
      } else {
        setAppVersions((List<String>)value);
      }
      break;

    case ZALO_IDS:
      if (value == null) {
        unsetZaloIds();
      } else {
        setZaloIds((List<Long>)value);
      }
      break;

    case APP_USERS:
      if (value == null) {
        unsetAppUsers();
      } else {
        setAppUsers((List<String>)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((MsgStatus)value);
      }
      break;

    case IOS_HTML_HASH:
      if (value == null) {
        unsetIosHtmlHash();
      } else {
        setIosHtmlHash((String)value);
      }
      break;

    case ANDROID_HTML_HASH:
      if (value == null) {
        unsetAndroidHtmlHash();
      } else {
        setAndroidHtmlHash((String)value);
      }
      break;

    case WPHONE_HTML_HASH:
      if (value == null) {
        unsetWphoneHtmlHash();
      } else {
        setWphoneHtmlHash((String)value);
      }
      break;

    case LOGGED_IN:
      if (value == null) {
        unsetLoggedIn();
      } else {
        setLoggedIn((Boolean)value);
      }
      break;

    case DELAY_TIME:
      if (value == null) {
        unsetDelayTime();
      } else {
        setDelayTime((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case APP_ID:
      return Integer.valueOf(getAppId());

    case EVENT_NAME:
      return getEventName();

    case PORTRAIT:
      return getPortrait();

    case LANDSCAPE:
      return getLandscape();

    case START_DATE:
      return Long.valueOf(getStartDate());

    case END_DATE:
      return Long.valueOf(getEndDate());

    case PERIOD_TYPE:
      return getPeriodType();

    case VISIBLE_TIMES:
      return Integer.valueOf(getVisibleTimes());

    case IOS_HTML:
      return getIosHtml();

    case ANDROID_HTML:
      return getAndroidHtml();

    case WPHONE_HTML:
      return getWphoneHtml();

    case PLATFORMS:
      return getPlatforms();

    case PACKAGE_NAMES:
      return getPackageNames();

    case BUNDLE_IDS:
      return getBundleIds();

    case GUIDS:
      return getGuids();

    case SDK_VERSIONS:
      return getSdkVersions();

    case APP_VERSIONS:
      return getAppVersions();

    case ZALO_IDS:
      return getZaloIds();

    case APP_USERS:
      return getAppUsers();

    case STATUS:
      return getStatus();

    case IOS_HTML_HASH:
      return getIosHtmlHash();

    case ANDROID_HTML_HASH:
      return getAndroidHtmlHash();

    case WPHONE_HTML_HASH:
      return getWphoneHtmlHash();

    case LOGGED_IN:
      return Boolean.valueOf(isLoggedIn());

    case DELAY_TIME:
      return Long.valueOf(getDelayTime());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case APP_ID:
      return isSetAppId();
    case EVENT_NAME:
      return isSetEventName();
    case PORTRAIT:
      return isSetPortrait();
    case LANDSCAPE:
      return isSetLandscape();
    case START_DATE:
      return isSetStartDate();
    case END_DATE:
      return isSetEndDate();
    case PERIOD_TYPE:
      return isSetPeriodType();
    case VISIBLE_TIMES:
      return isSetVisibleTimes();
    case IOS_HTML:
      return isSetIosHtml();
    case ANDROID_HTML:
      return isSetAndroidHtml();
    case WPHONE_HTML:
      return isSetWphoneHtml();
    case PLATFORMS:
      return isSetPlatforms();
    case PACKAGE_NAMES:
      return isSetPackageNames();
    case BUNDLE_IDS:
      return isSetBundleIds();
    case GUIDS:
      return isSetGuids();
    case SDK_VERSIONS:
      return isSetSdkVersions();
    case APP_VERSIONS:
      return isSetAppVersions();
    case ZALO_IDS:
      return isSetZaloIds();
    case APP_USERS:
      return isSetAppUsers();
    case STATUS:
      return isSetStatus();
    case IOS_HTML_HASH:
      return isSetIosHtmlHash();
    case ANDROID_HTML_HASH:
      return isSetAndroidHtmlHash();
    case WPHONE_HTML_HASH:
      return isSetWphoneHtmlHash();
    case LOGGED_IN:
      return isSetLoggedIn();
    case DELAY_TIME:
      return isSetDelayTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof EventMsg)
      return this.equals((EventMsg)that);
    return false;
  }

  public boolean equals(EventMsg that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_appId = true && this.isSetAppId();
    boolean that_present_appId = true && that.isSetAppId();
    if (this_present_appId || that_present_appId) {
      if (!(this_present_appId && that_present_appId))
        return false;
      if (this.appId != that.appId)
        return false;
    }

    boolean this_present_eventName = true && this.isSetEventName();
    boolean that_present_eventName = true && that.isSetEventName();
    if (this_present_eventName || that_present_eventName) {
      if (!(this_present_eventName && that_present_eventName))
        return false;
      if (!this.eventName.equals(that.eventName))
        return false;
    }

    boolean this_present_portrait = true && this.isSetPortrait();
    boolean that_present_portrait = true && that.isSetPortrait();
    if (this_present_portrait || that_present_portrait) {
      if (!(this_present_portrait && that_present_portrait))
        return false;
      if (!this.portrait.equals(that.portrait))
        return false;
    }

    boolean this_present_landscape = true && this.isSetLandscape();
    boolean that_present_landscape = true && that.isSetLandscape();
    if (this_present_landscape || that_present_landscape) {
      if (!(this_present_landscape && that_present_landscape))
        return false;
      if (!this.landscape.equals(that.landscape))
        return false;
    }

    boolean this_present_startDate = true && this.isSetStartDate();
    boolean that_present_startDate = true && that.isSetStartDate();
    if (this_present_startDate || that_present_startDate) {
      if (!(this_present_startDate && that_present_startDate))
        return false;
      if (this.startDate != that.startDate)
        return false;
    }

    boolean this_present_endDate = true && this.isSetEndDate();
    boolean that_present_endDate = true && that.isSetEndDate();
    if (this_present_endDate || that_present_endDate) {
      if (!(this_present_endDate && that_present_endDate))
        return false;
      if (this.endDate != that.endDate)
        return false;
    }

    boolean this_present_periodType = true && this.isSetPeriodType();
    boolean that_present_periodType = true && that.isSetPeriodType();
    if (this_present_periodType || that_present_periodType) {
      if (!(this_present_periodType && that_present_periodType))
        return false;
      if (!this.periodType.equals(that.periodType))
        return false;
    }

    boolean this_present_visibleTimes = true && this.isSetVisibleTimes();
    boolean that_present_visibleTimes = true && that.isSetVisibleTimes();
    if (this_present_visibleTimes || that_present_visibleTimes) {
      if (!(this_present_visibleTimes && that_present_visibleTimes))
        return false;
      if (this.visibleTimes != that.visibleTimes)
        return false;
    }

    boolean this_present_iosHtml = true && this.isSetIosHtml();
    boolean that_present_iosHtml = true && that.isSetIosHtml();
    if (this_present_iosHtml || that_present_iosHtml) {
      if (!(this_present_iosHtml && that_present_iosHtml))
        return false;
      if (!this.iosHtml.equals(that.iosHtml))
        return false;
    }

    boolean this_present_androidHtml = true && this.isSetAndroidHtml();
    boolean that_present_androidHtml = true && that.isSetAndroidHtml();
    if (this_present_androidHtml || that_present_androidHtml) {
      if (!(this_present_androidHtml && that_present_androidHtml))
        return false;
      if (!this.androidHtml.equals(that.androidHtml))
        return false;
    }

    boolean this_present_wphoneHtml = true && this.isSetWphoneHtml();
    boolean that_present_wphoneHtml = true && that.isSetWphoneHtml();
    if (this_present_wphoneHtml || that_present_wphoneHtml) {
      if (!(this_present_wphoneHtml && that_present_wphoneHtml))
        return false;
      if (!this.wphoneHtml.equals(that.wphoneHtml))
        return false;
    }

    boolean this_present_platforms = true && this.isSetPlatforms();
    boolean that_present_platforms = true && that.isSetPlatforms();
    if (this_present_platforms || that_present_platforms) {
      if (!(this_present_platforms && that_present_platforms))
        return false;
      if (!this.platforms.equals(that.platforms))
        return false;
    }

    boolean this_present_packageNames = true && this.isSetPackageNames();
    boolean that_present_packageNames = true && that.isSetPackageNames();
    if (this_present_packageNames || that_present_packageNames) {
      if (!(this_present_packageNames && that_present_packageNames))
        return false;
      if (!this.packageNames.equals(that.packageNames))
        return false;
    }

    boolean this_present_bundleIds = true && this.isSetBundleIds();
    boolean that_present_bundleIds = true && that.isSetBundleIds();
    if (this_present_bundleIds || that_present_bundleIds) {
      if (!(this_present_bundleIds && that_present_bundleIds))
        return false;
      if (!this.bundleIds.equals(that.bundleIds))
        return false;
    }

    boolean this_present_guids = true && this.isSetGuids();
    boolean that_present_guids = true && that.isSetGuids();
    if (this_present_guids || that_present_guids) {
      if (!(this_present_guids && that_present_guids))
        return false;
      if (!this.guids.equals(that.guids))
        return false;
    }

    boolean this_present_sdkVersions = true && this.isSetSdkVersions();
    boolean that_present_sdkVersions = true && that.isSetSdkVersions();
    if (this_present_sdkVersions || that_present_sdkVersions) {
      if (!(this_present_sdkVersions && that_present_sdkVersions))
        return false;
      if (!this.sdkVersions.equals(that.sdkVersions))
        return false;
    }

    boolean this_present_appVersions = true && this.isSetAppVersions();
    boolean that_present_appVersions = true && that.isSetAppVersions();
    if (this_present_appVersions || that_present_appVersions) {
      if (!(this_present_appVersions && that_present_appVersions))
        return false;
      if (!this.appVersions.equals(that.appVersions))
        return false;
    }

    boolean this_present_zaloIds = true && this.isSetZaloIds();
    boolean that_present_zaloIds = true && that.isSetZaloIds();
    if (this_present_zaloIds || that_present_zaloIds) {
      if (!(this_present_zaloIds && that_present_zaloIds))
        return false;
      if (!this.zaloIds.equals(that.zaloIds))
        return false;
    }

    boolean this_present_appUsers = true && this.isSetAppUsers();
    boolean that_present_appUsers = true && that.isSetAppUsers();
    if (this_present_appUsers || that_present_appUsers) {
      if (!(this_present_appUsers && that_present_appUsers))
        return false;
      if (!this.appUsers.equals(that.appUsers))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_iosHtmlHash = true && this.isSetIosHtmlHash();
    boolean that_present_iosHtmlHash = true && that.isSetIosHtmlHash();
    if (this_present_iosHtmlHash || that_present_iosHtmlHash) {
      if (!(this_present_iosHtmlHash && that_present_iosHtmlHash))
        return false;
      if (!this.iosHtmlHash.equals(that.iosHtmlHash))
        return false;
    }

    boolean this_present_androidHtmlHash = true && this.isSetAndroidHtmlHash();
    boolean that_present_androidHtmlHash = true && that.isSetAndroidHtmlHash();
    if (this_present_androidHtmlHash || that_present_androidHtmlHash) {
      if (!(this_present_androidHtmlHash && that_present_androidHtmlHash))
        return false;
      if (!this.androidHtmlHash.equals(that.androidHtmlHash))
        return false;
    }

    boolean this_present_wphoneHtmlHash = true && this.isSetWphoneHtmlHash();
    boolean that_present_wphoneHtmlHash = true && that.isSetWphoneHtmlHash();
    if (this_present_wphoneHtmlHash || that_present_wphoneHtmlHash) {
      if (!(this_present_wphoneHtmlHash && that_present_wphoneHtmlHash))
        return false;
      if (!this.wphoneHtmlHash.equals(that.wphoneHtmlHash))
        return false;
    }

    boolean this_present_loggedIn = true && this.isSetLoggedIn();
    boolean that_present_loggedIn = true && that.isSetLoggedIn();
    if (this_present_loggedIn || that_present_loggedIn) {
      if (!(this_present_loggedIn && that_present_loggedIn))
        return false;
      if (this.loggedIn != that.loggedIn)
        return false;
    }

    boolean this_present_delayTime = true && this.isSetDelayTime();
    boolean that_present_delayTime = true && that.isSetDelayTime();
    if (this_present_delayTime || that_present_delayTime) {
      if (!(this_present_delayTime && that_present_delayTime))
        return false;
      if (this.delayTime != that.delayTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(EventMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    EventMsg typedOther = (EventMsg)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppId()).compareTo(typedOther.isSetAppId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, typedOther.appId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEventName()).compareTo(typedOther.isSetEventName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventName, typedOther.eventName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPortrait()).compareTo(typedOther.isSetPortrait());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPortrait()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.portrait, typedOther.portrait);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLandscape()).compareTo(typedOther.isSetLandscape());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLandscape()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.landscape, typedOther.landscape);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartDate()).compareTo(typedOther.isSetStartDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startDate, typedOther.startDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndDate()).compareTo(typedOther.isSetEndDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endDate, typedOther.endDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPeriodType()).compareTo(typedOther.isSetPeriodType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPeriodType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.periodType, typedOther.periodType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVisibleTimes()).compareTo(typedOther.isSetVisibleTimes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVisibleTimes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visibleTimes, typedOther.visibleTimes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIosHtml()).compareTo(typedOther.isSetIosHtml());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIosHtml()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iosHtml, typedOther.iosHtml);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAndroidHtml()).compareTo(typedOther.isSetAndroidHtml());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAndroidHtml()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.androidHtml, typedOther.androidHtml);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWphoneHtml()).compareTo(typedOther.isSetWphoneHtml());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWphoneHtml()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wphoneHtml, typedOther.wphoneHtml);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlatforms()).compareTo(typedOther.isSetPlatforms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlatforms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platforms, typedOther.platforms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPackageNames()).compareTo(typedOther.isSetPackageNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPackageNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.packageNames, typedOther.packageNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBundleIds()).compareTo(typedOther.isSetBundleIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBundleIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bundleIds, typedOther.bundleIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGuids()).compareTo(typedOther.isSetGuids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGuids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.guids, typedOther.guids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSdkVersions()).compareTo(typedOther.isSetSdkVersions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSdkVersions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sdkVersions, typedOther.sdkVersions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppVersions()).compareTo(typedOther.isSetAppVersions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppVersions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appVersions, typedOther.appVersions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetZaloIds()).compareTo(typedOther.isSetZaloIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZaloIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zaloIds, typedOther.zaloIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppUsers()).compareTo(typedOther.isSetAppUsers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppUsers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appUsers, typedOther.appUsers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIosHtmlHash()).compareTo(typedOther.isSetIosHtmlHash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIosHtmlHash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iosHtmlHash, typedOther.iosHtmlHash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAndroidHtmlHash()).compareTo(typedOther.isSetAndroidHtmlHash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAndroidHtmlHash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.androidHtmlHash, typedOther.androidHtmlHash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWphoneHtmlHash()).compareTo(typedOther.isSetWphoneHtmlHash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWphoneHtmlHash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wphoneHtmlHash, typedOther.wphoneHtmlHash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoggedIn()).compareTo(typedOther.isSetLoggedIn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoggedIn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loggedIn, typedOther.loggedIn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDelayTime()).compareTo(typedOther.isSetDelayTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDelayTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.delayTime, typedOther.delayTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("EventMsg(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetAppId()) {
      if (!first) sb.append(", ");
      sb.append("appId:");
      sb.append(this.appId);
      first = false;
    }
    if (isSetEventName()) {
      if (!first) sb.append(", ");
      sb.append("eventName:");
      if (this.eventName == null) {
        sb.append("null");
      } else {
        sb.append(this.eventName);
      }
      first = false;
    }
    if (isSetPortrait()) {
      if (!first) sb.append(", ");
      sb.append("portrait:");
      if (this.portrait == null) {
        sb.append("null");
      } else {
        sb.append(this.portrait);
      }
      first = false;
    }
    if (isSetLandscape()) {
      if (!first) sb.append(", ");
      sb.append("landscape:");
      if (this.landscape == null) {
        sb.append("null");
      } else {
        sb.append(this.landscape);
      }
      first = false;
    }
    if (isSetStartDate()) {
      if (!first) sb.append(", ");
      sb.append("startDate:");
      sb.append(this.startDate);
      first = false;
    }
    if (isSetEndDate()) {
      if (!first) sb.append(", ");
      sb.append("endDate:");
      sb.append(this.endDate);
      first = false;
    }
    if (isSetPeriodType()) {
      if (!first) sb.append(", ");
      sb.append("periodType:");
      if (this.periodType == null) {
        sb.append("null");
      } else {
        sb.append(this.periodType);
      }
      first = false;
    }
    if (isSetVisibleTimes()) {
      if (!first) sb.append(", ");
      sb.append("visibleTimes:");
      sb.append(this.visibleTimes);
      first = false;
    }
    if (isSetIosHtml()) {
      if (!first) sb.append(", ");
      sb.append("iosHtml:");
      if (this.iosHtml == null) {
        sb.append("null");
      } else {
        sb.append(this.iosHtml);
      }
      first = false;
    }
    if (isSetAndroidHtml()) {
      if (!first) sb.append(", ");
      sb.append("androidHtml:");
      if (this.androidHtml == null) {
        sb.append("null");
      } else {
        sb.append(this.androidHtml);
      }
      first = false;
    }
    if (isSetWphoneHtml()) {
      if (!first) sb.append(", ");
      sb.append("wphoneHtml:");
      if (this.wphoneHtml == null) {
        sb.append("null");
      } else {
        sb.append(this.wphoneHtml);
      }
      first = false;
    }
    if (isSetPlatforms()) {
      if (!first) sb.append(", ");
      sb.append("platforms:");
      if (this.platforms == null) {
        sb.append("null");
      } else {
        sb.append(this.platforms);
      }
      first = false;
    }
    if (isSetPackageNames()) {
      if (!first) sb.append(", ");
      sb.append("packageNames:");
      if (this.packageNames == null) {
        sb.append("null");
      } else {
        sb.append(this.packageNames);
      }
      first = false;
    }
    if (isSetBundleIds()) {
      if (!first) sb.append(", ");
      sb.append("bundleIds:");
      if (this.bundleIds == null) {
        sb.append("null");
      } else {
        sb.append(this.bundleIds);
      }
      first = false;
    }
    if (isSetGuids()) {
      if (!first) sb.append(", ");
      sb.append("guids:");
      if (this.guids == null) {
        sb.append("null");
      } else {
        sb.append(this.guids);
      }
      first = false;
    }
    if (isSetSdkVersions()) {
      if (!first) sb.append(", ");
      sb.append("sdkVersions:");
      if (this.sdkVersions == null) {
        sb.append("null");
      } else {
        sb.append(this.sdkVersions);
      }
      first = false;
    }
    if (isSetAppVersions()) {
      if (!first) sb.append(", ");
      sb.append("appVersions:");
      if (this.appVersions == null) {
        sb.append("null");
      } else {
        sb.append(this.appVersions);
      }
      first = false;
    }
    if (isSetZaloIds()) {
      if (!first) sb.append(", ");
      sb.append("zaloIds:");
      if (this.zaloIds == null) {
        sb.append("null");
      } else {
        sb.append(this.zaloIds);
      }
      first = false;
    }
    if (isSetAppUsers()) {
      if (!first) sb.append(", ");
      sb.append("appUsers:");
      if (this.appUsers == null) {
        sb.append("null");
      } else {
        sb.append(this.appUsers);
      }
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
    }
    if (isSetIosHtmlHash()) {
      if (!first) sb.append(", ");
      sb.append("iosHtmlHash:");
      if (this.iosHtmlHash == null) {
        sb.append("null");
      } else {
        sb.append(this.iosHtmlHash);
      }
      first = false;
    }
    if (isSetAndroidHtmlHash()) {
      if (!first) sb.append(", ");
      sb.append("androidHtmlHash:");
      if (this.androidHtmlHash == null) {
        sb.append("null");
      } else {
        sb.append(this.androidHtmlHash);
      }
      first = false;
    }
    if (isSetWphoneHtmlHash()) {
      if (!first) sb.append(", ");
      sb.append("wphoneHtmlHash:");
      if (this.wphoneHtmlHash == null) {
        sb.append("null");
      } else {
        sb.append(this.wphoneHtmlHash);
      }
      first = false;
    }
    if (isSetLoggedIn()) {
      if (!first) sb.append(", ");
      sb.append("loggedIn:");
      sb.append(this.loggedIn);
      first = false;
    }
    if (isSetDelayTime()) {
      if (!first) sb.append(", ");
      sb.append("delayTime:");
      sb.append(this.delayTime);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (portrait != null) {
      portrait.validate();
    }
    if (landscape != null) {
      landscape.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EventMsgStandardSchemeFactory implements SchemeFactory {
    public EventMsgStandardScheme getScheme() {
      return new EventMsgStandardScheme();
    }
  }

  private static class EventMsgStandardScheme extends StandardScheme<EventMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, EventMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // APP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.appId = iprot.readI32();
              struct.setAppIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EVENT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.eventName = iprot.readString();
              struct.setEventNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PORTRAIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.portrait = new PopupSize();
              struct.portrait.read(iprot);
              struct.setPortraitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LANDSCAPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.landscape = new PopupSize();
              struct.landscape.read(iprot);
              struct.setLandscapeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // START_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startDate = iprot.readI64();
              struct.setStartDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // END_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.endDate = iprot.readI64();
              struct.setEndDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PERIOD_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.periodType = PeriodType.findByValue(iprot.readI32());
              struct.setPeriodTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // VISIBLE_TIMES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.visibleTimes = iprot.readI32();
              struct.setVisibleTimesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // IOS_HTML
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.iosHtml = iprot.readString();
              struct.setIosHtmlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ANDROID_HTML
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.androidHtml = iprot.readString();
              struct.setAndroidHtmlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // WPHONE_HTML
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.wphoneHtml = iprot.readString();
              struct.setWphoneHtmlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PLATFORMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.platforms = new ArrayList<MobilePlatform>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  MobilePlatform _elem2; // required
                  _elem2 = MobilePlatform.findByValue(iprot.readI32());
                  struct.platforms.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setPlatformsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // PACKAGE_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.packageNames = new ArrayList<String>(_list3.size);
                for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                {
                  String _elem5; // required
                  _elem5 = iprot.readString();
                  struct.packageNames.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setPackageNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // BUNDLE_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.bundleIds = new ArrayList<String>(_list6.size);
                for (int _i7 = 0; _i7 < _list6.size; ++_i7)
                {
                  String _elem8; // required
                  _elem8 = iprot.readString();
                  struct.bundleIds.add(_elem8);
                }
                iprot.readListEnd();
              }
              struct.setBundleIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // GUIDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                struct.guids = new ArrayList<String>(_list9.size);
                for (int _i10 = 0; _i10 < _list9.size; ++_i10)
                {
                  String _elem11; // required
                  _elem11 = iprot.readString();
                  struct.guids.add(_elem11);
                }
                iprot.readListEnd();
              }
              struct.setGuidsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // SDK_VERSIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                struct.sdkVersions = new ArrayList<String>(_list12.size);
                for (int _i13 = 0; _i13 < _list12.size; ++_i13)
                {
                  String _elem14; // required
                  _elem14 = iprot.readString();
                  struct.sdkVersions.add(_elem14);
                }
                iprot.readListEnd();
              }
              struct.setSdkVersionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // APP_VERSIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list15 = iprot.readListBegin();
                struct.appVersions = new ArrayList<String>(_list15.size);
                for (int _i16 = 0; _i16 < _list15.size; ++_i16)
                {
                  String _elem17; // required
                  _elem17 = iprot.readString();
                  struct.appVersions.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setAppVersionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // ZALO_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
                struct.zaloIds = new ArrayList<Long>(_list18.size);
                for (int _i19 = 0; _i19 < _list18.size; ++_i19)
                {
                  long _elem20; // required
                  _elem20 = iprot.readI64();
                  struct.zaloIds.add(_elem20);
                }
                iprot.readListEnd();
              }
              struct.setZaloIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // APP_USERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list21 = iprot.readListBegin();
                struct.appUsers = new ArrayList<String>(_list21.size);
                for (int _i22 = 0; _i22 < _list21.size; ++_i22)
                {
                  String _elem23; // required
                  _elem23 = iprot.readString();
                  struct.appUsers.add(_elem23);
                }
                iprot.readListEnd();
              }
              struct.setAppUsersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = MsgStatus.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // IOS_HTML_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.iosHtmlHash = iprot.readString();
              struct.setIosHtmlHashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // ANDROID_HTML_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.androidHtmlHash = iprot.readString();
              struct.setAndroidHtmlHashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // WPHONE_HTML_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.wphoneHtmlHash = iprot.readString();
              struct.setWphoneHtmlHashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // LOGGED_IN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.loggedIn = iprot.readBool();
              struct.setLoggedInIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // DELAY_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.delayTime = iprot.readI64();
              struct.setDelayTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, EventMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAppId()) {
        oprot.writeFieldBegin(APP_ID_FIELD_DESC);
        oprot.writeI32(struct.appId);
        oprot.writeFieldEnd();
      }
      if (struct.eventName != null) {
        if (struct.isSetEventName()) {
          oprot.writeFieldBegin(EVENT_NAME_FIELD_DESC);
          oprot.writeString(struct.eventName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.portrait != null) {
        if (struct.isSetPortrait()) {
          oprot.writeFieldBegin(PORTRAIT_FIELD_DESC);
          struct.portrait.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.landscape != null) {
        if (struct.isSetLandscape()) {
          oprot.writeFieldBegin(LANDSCAPE_FIELD_DESC);
          struct.landscape.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStartDate()) {
        oprot.writeFieldBegin(START_DATE_FIELD_DESC);
        oprot.writeI64(struct.startDate);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEndDate()) {
        oprot.writeFieldBegin(END_DATE_FIELD_DESC);
        oprot.writeI64(struct.endDate);
        oprot.writeFieldEnd();
      }
      if (struct.periodType != null) {
        if (struct.isSetPeriodType()) {
          oprot.writeFieldBegin(PERIOD_TYPE_FIELD_DESC);
          oprot.writeI32(struct.periodType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetVisibleTimes()) {
        oprot.writeFieldBegin(VISIBLE_TIMES_FIELD_DESC);
        oprot.writeI32(struct.visibleTimes);
        oprot.writeFieldEnd();
      }
      if (struct.iosHtml != null) {
        if (struct.isSetIosHtml()) {
          oprot.writeFieldBegin(IOS_HTML_FIELD_DESC);
          oprot.writeString(struct.iosHtml);
          oprot.writeFieldEnd();
        }
      }
      if (struct.androidHtml != null) {
        if (struct.isSetAndroidHtml()) {
          oprot.writeFieldBegin(ANDROID_HTML_FIELD_DESC);
          oprot.writeString(struct.androidHtml);
          oprot.writeFieldEnd();
        }
      }
      if (struct.wphoneHtml != null) {
        if (struct.isSetWphoneHtml()) {
          oprot.writeFieldBegin(WPHONE_HTML_FIELD_DESC);
          oprot.writeString(struct.wphoneHtml);
          oprot.writeFieldEnd();
        }
      }
      if (struct.platforms != null) {
        if (struct.isSetPlatforms()) {
          oprot.writeFieldBegin(PLATFORMS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.platforms.size()));
            for (MobilePlatform _iter24 : struct.platforms)
            {
              oprot.writeI32(_iter24.getValue());
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.packageNames != null) {
        if (struct.isSetPackageNames()) {
          oprot.writeFieldBegin(PACKAGE_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.packageNames.size()));
            for (String _iter25 : struct.packageNames)
            {
              oprot.writeString(_iter25);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.bundleIds != null) {
        if (struct.isSetBundleIds()) {
          oprot.writeFieldBegin(BUNDLE_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.bundleIds.size()));
            for (String _iter26 : struct.bundleIds)
            {
              oprot.writeString(_iter26);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.guids != null) {
        if (struct.isSetGuids()) {
          oprot.writeFieldBegin(GUIDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.guids.size()));
            for (String _iter27 : struct.guids)
            {
              oprot.writeString(_iter27);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.sdkVersions != null) {
        if (struct.isSetSdkVersions()) {
          oprot.writeFieldBegin(SDK_VERSIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.sdkVersions.size()));
            for (String _iter28 : struct.sdkVersions)
            {
              oprot.writeString(_iter28);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.appVersions != null) {
        if (struct.isSetAppVersions()) {
          oprot.writeFieldBegin(APP_VERSIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.appVersions.size()));
            for (String _iter29 : struct.appVersions)
            {
              oprot.writeString(_iter29);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.zaloIds != null) {
        if (struct.isSetZaloIds()) {
          oprot.writeFieldBegin(ZALO_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.zaloIds.size()));
            for (long _iter30 : struct.zaloIds)
            {
              oprot.writeI64(_iter30);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.appUsers != null) {
        if (struct.isSetAppUsers()) {
          oprot.writeFieldBegin(APP_USERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.appUsers.size()));
            for (String _iter31 : struct.appUsers)
            {
              oprot.writeString(_iter31);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.status != null) {
        if (struct.isSetStatus()) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeI32(struct.status.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.iosHtmlHash != null) {
        if (struct.isSetIosHtmlHash()) {
          oprot.writeFieldBegin(IOS_HTML_HASH_FIELD_DESC);
          oprot.writeString(struct.iosHtmlHash);
          oprot.writeFieldEnd();
        }
      }
      if (struct.androidHtmlHash != null) {
        if (struct.isSetAndroidHtmlHash()) {
          oprot.writeFieldBegin(ANDROID_HTML_HASH_FIELD_DESC);
          oprot.writeString(struct.androidHtmlHash);
          oprot.writeFieldEnd();
        }
      }
      if (struct.wphoneHtmlHash != null) {
        if (struct.isSetWphoneHtmlHash()) {
          oprot.writeFieldBegin(WPHONE_HTML_HASH_FIELD_DESC);
          oprot.writeString(struct.wphoneHtmlHash);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLoggedIn()) {
        oprot.writeFieldBegin(LOGGED_IN_FIELD_DESC);
        oprot.writeBool(struct.loggedIn);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDelayTime()) {
        oprot.writeFieldBegin(DELAY_TIME_FIELD_DESC);
        oprot.writeI64(struct.delayTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EventMsgTupleSchemeFactory implements SchemeFactory {
    public EventMsgTupleScheme getScheme() {
      return new EventMsgTupleScheme();
    }
  }

  private static class EventMsgTupleScheme extends TupleScheme<EventMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, EventMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetAppId()) {
        optionals.set(1);
      }
      if (struct.isSetEventName()) {
        optionals.set(2);
      }
      if (struct.isSetPortrait()) {
        optionals.set(3);
      }
      if (struct.isSetLandscape()) {
        optionals.set(4);
      }
      if (struct.isSetStartDate()) {
        optionals.set(5);
      }
      if (struct.isSetEndDate()) {
        optionals.set(6);
      }
      if (struct.isSetPeriodType()) {
        optionals.set(7);
      }
      if (struct.isSetVisibleTimes()) {
        optionals.set(8);
      }
      if (struct.isSetIosHtml()) {
        optionals.set(9);
      }
      if (struct.isSetAndroidHtml()) {
        optionals.set(10);
      }
      if (struct.isSetWphoneHtml()) {
        optionals.set(11);
      }
      if (struct.isSetPlatforms()) {
        optionals.set(12);
      }
      if (struct.isSetPackageNames()) {
        optionals.set(13);
      }
      if (struct.isSetBundleIds()) {
        optionals.set(14);
      }
      if (struct.isSetGuids()) {
        optionals.set(15);
      }
      if (struct.isSetSdkVersions()) {
        optionals.set(16);
      }
      if (struct.isSetAppVersions()) {
        optionals.set(17);
      }
      if (struct.isSetZaloIds()) {
        optionals.set(18);
      }
      if (struct.isSetAppUsers()) {
        optionals.set(19);
      }
      if (struct.isSetStatus()) {
        optionals.set(20);
      }
      if (struct.isSetIosHtmlHash()) {
        optionals.set(21);
      }
      if (struct.isSetAndroidHtmlHash()) {
        optionals.set(22);
      }
      if (struct.isSetWphoneHtmlHash()) {
        optionals.set(23);
      }
      if (struct.isSetLoggedIn()) {
        optionals.set(24);
      }
      if (struct.isSetDelayTime()) {
        optionals.set(25);
      }
      oprot.writeBitSet(optionals, 26);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetAppId()) {
        oprot.writeI32(struct.appId);
      }
      if (struct.isSetEventName()) {
        oprot.writeString(struct.eventName);
      }
      if (struct.isSetPortrait()) {
        struct.portrait.write(oprot);
      }
      if (struct.isSetLandscape()) {
        struct.landscape.write(oprot);
      }
      if (struct.isSetStartDate()) {
        oprot.writeI64(struct.startDate);
      }
      if (struct.isSetEndDate()) {
        oprot.writeI64(struct.endDate);
      }
      if (struct.isSetPeriodType()) {
        oprot.writeI32(struct.periodType.getValue());
      }
      if (struct.isSetVisibleTimes()) {
        oprot.writeI32(struct.visibleTimes);
      }
      if (struct.isSetIosHtml()) {
        oprot.writeString(struct.iosHtml);
      }
      if (struct.isSetAndroidHtml()) {
        oprot.writeString(struct.androidHtml);
      }
      if (struct.isSetWphoneHtml()) {
        oprot.writeString(struct.wphoneHtml);
      }
      if (struct.isSetPlatforms()) {
        {
          oprot.writeI32(struct.platforms.size());
          for (MobilePlatform _iter32 : struct.platforms)
          {
            oprot.writeI32(_iter32.getValue());
          }
        }
      }
      if (struct.isSetPackageNames()) {
        {
          oprot.writeI32(struct.packageNames.size());
          for (String _iter33 : struct.packageNames)
          {
            oprot.writeString(_iter33);
          }
        }
      }
      if (struct.isSetBundleIds()) {
        {
          oprot.writeI32(struct.bundleIds.size());
          for (String _iter34 : struct.bundleIds)
          {
            oprot.writeString(_iter34);
          }
        }
      }
      if (struct.isSetGuids()) {
        {
          oprot.writeI32(struct.guids.size());
          for (String _iter35 : struct.guids)
          {
            oprot.writeString(_iter35);
          }
        }
      }
      if (struct.isSetSdkVersions()) {
        {
          oprot.writeI32(struct.sdkVersions.size());
          for (String _iter36 : struct.sdkVersions)
          {
            oprot.writeString(_iter36);
          }
        }
      }
      if (struct.isSetAppVersions()) {
        {
          oprot.writeI32(struct.appVersions.size());
          for (String _iter37 : struct.appVersions)
          {
            oprot.writeString(_iter37);
          }
        }
      }
      if (struct.isSetZaloIds()) {
        {
          oprot.writeI32(struct.zaloIds.size());
          for (long _iter38 : struct.zaloIds)
          {
            oprot.writeI64(_iter38);
          }
        }
      }
      if (struct.isSetAppUsers()) {
        {
          oprot.writeI32(struct.appUsers.size());
          for (String _iter39 : struct.appUsers)
          {
            oprot.writeString(_iter39);
          }
        }
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status.getValue());
      }
      if (struct.isSetIosHtmlHash()) {
        oprot.writeString(struct.iosHtmlHash);
      }
      if (struct.isSetAndroidHtmlHash()) {
        oprot.writeString(struct.androidHtmlHash);
      }
      if (struct.isSetWphoneHtmlHash()) {
        oprot.writeString(struct.wphoneHtmlHash);
      }
      if (struct.isSetLoggedIn()) {
        oprot.writeBool(struct.loggedIn);
      }
      if (struct.isSetDelayTime()) {
        oprot.writeI64(struct.delayTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, EventMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(26);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.appId = iprot.readI32();
        struct.setAppIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.eventName = iprot.readString();
        struct.setEventNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.portrait = new PopupSize();
        struct.portrait.read(iprot);
        struct.setPortraitIsSet(true);
      }
      if (incoming.get(4)) {
        struct.landscape = new PopupSize();
        struct.landscape.read(iprot);
        struct.setLandscapeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.startDate = iprot.readI64();
        struct.setStartDateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.endDate = iprot.readI64();
        struct.setEndDateIsSet(true);
      }
      if (incoming.get(7)) {
        struct.periodType = PeriodType.findByValue(iprot.readI32());
        struct.setPeriodTypeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.visibleTimes = iprot.readI32();
        struct.setVisibleTimesIsSet(true);
      }
      if (incoming.get(9)) {
        struct.iosHtml = iprot.readString();
        struct.setIosHtmlIsSet(true);
      }
      if (incoming.get(10)) {
        struct.androidHtml = iprot.readString();
        struct.setAndroidHtmlIsSet(true);
      }
      if (incoming.get(11)) {
        struct.wphoneHtml = iprot.readString();
        struct.setWphoneHtmlIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list40 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.platforms = new ArrayList<MobilePlatform>(_list40.size);
          for (int _i41 = 0; _i41 < _list40.size; ++_i41)
          {
            MobilePlatform _elem42; // required
            _elem42 = MobilePlatform.findByValue(iprot.readI32());
            struct.platforms.add(_elem42);
          }
        }
        struct.setPlatformsIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TList _list43 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.packageNames = new ArrayList<String>(_list43.size);
          for (int _i44 = 0; _i44 < _list43.size; ++_i44)
          {
            String _elem45; // required
            _elem45 = iprot.readString();
            struct.packageNames.add(_elem45);
          }
        }
        struct.setPackageNamesIsSet(true);
      }
      if (incoming.get(14)) {
        {
          org.apache.thrift.protocol.TList _list46 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.bundleIds = new ArrayList<String>(_list46.size);
          for (int _i47 = 0; _i47 < _list46.size; ++_i47)
          {
            String _elem48; // required
            _elem48 = iprot.readString();
            struct.bundleIds.add(_elem48);
          }
        }
        struct.setBundleIdsIsSet(true);
      }
      if (incoming.get(15)) {
        {
          org.apache.thrift.protocol.TList _list49 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.guids = new ArrayList<String>(_list49.size);
          for (int _i50 = 0; _i50 < _list49.size; ++_i50)
          {
            String _elem51; // required
            _elem51 = iprot.readString();
            struct.guids.add(_elem51);
          }
        }
        struct.setGuidsIsSet(true);
      }
      if (incoming.get(16)) {
        {
          org.apache.thrift.protocol.TList _list52 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.sdkVersions = new ArrayList<String>(_list52.size);
          for (int _i53 = 0; _i53 < _list52.size; ++_i53)
          {
            String _elem54; // required
            _elem54 = iprot.readString();
            struct.sdkVersions.add(_elem54);
          }
        }
        struct.setSdkVersionsIsSet(true);
      }
      if (incoming.get(17)) {
        {
          org.apache.thrift.protocol.TList _list55 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.appVersions = new ArrayList<String>(_list55.size);
          for (int _i56 = 0; _i56 < _list55.size; ++_i56)
          {
            String _elem57; // required
            _elem57 = iprot.readString();
            struct.appVersions.add(_elem57);
          }
        }
        struct.setAppVersionsIsSet(true);
      }
      if (incoming.get(18)) {
        {
          org.apache.thrift.protocol.TList _list58 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.zaloIds = new ArrayList<Long>(_list58.size);
          for (int _i59 = 0; _i59 < _list58.size; ++_i59)
          {
            long _elem60; // required
            _elem60 = iprot.readI64();
            struct.zaloIds.add(_elem60);
          }
        }
        struct.setZaloIdsIsSet(true);
      }
      if (incoming.get(19)) {
        {
          org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.appUsers = new ArrayList<String>(_list61.size);
          for (int _i62 = 0; _i62 < _list61.size; ++_i62)
          {
            String _elem63; // required
            _elem63 = iprot.readString();
            struct.appUsers.add(_elem63);
          }
        }
        struct.setAppUsersIsSet(true);
      }
      if (incoming.get(20)) {
        struct.status = MsgStatus.findByValue(iprot.readI32());
        struct.setStatusIsSet(true);
      }
      if (incoming.get(21)) {
        struct.iosHtmlHash = iprot.readString();
        struct.setIosHtmlHashIsSet(true);
      }
      if (incoming.get(22)) {
        struct.androidHtmlHash = iprot.readString();
        struct.setAndroidHtmlHashIsSet(true);
      }
      if (incoming.get(23)) {
        struct.wphoneHtmlHash = iprot.readString();
        struct.setWphoneHtmlHashIsSet(true);
      }
      if (incoming.get(24)) {
        struct.loggedIn = iprot.readBool();
        struct.setLoggedInIsSet(true);
      }
      if (incoming.get(25)) {
        struct.delayTime = iprot.readI64();
        struct.setDelayTimeIsSet(true);
      }
    }
  }

}

