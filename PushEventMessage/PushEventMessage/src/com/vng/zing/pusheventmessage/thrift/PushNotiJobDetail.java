/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vng.zing.pusheventmessage.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PushNotiJobDetail implements org.apache.thrift.TBase<PushNotiJobDetail, PushNotiJobDetail._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PushNotiJobDetail");

  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TOTAL_NOTI_FIELD_DESC = new org.apache.thrift.protocol.TField("totalNoti", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField PUSHED_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("pushedNumber", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField SUCCESS_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("successNumber", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField FAIL_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("failNumber", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField LAST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lastId", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PushNotiJobDetailStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PushNotiJobDetailTupleSchemeFactory());
  }

  /**
   * 
   * @see PushNotiJobStatus
   */
  public PushNotiJobStatus status; // optional
  public long totalNoti; // optional
  public long pushedNumber; // optional
  public long successNumber; // optional
  public long failNumber; // optional
  public int lastId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see PushNotiJobStatus
     */
    STATUS((short)1, "status"),
    TOTAL_NOTI((short)2, "totalNoti"),
    PUSHED_NUMBER((short)3, "pushedNumber"),
    SUCCESS_NUMBER((short)4, "successNumber"),
    FAIL_NUMBER((short)5, "failNumber"),
    LAST_ID((short)6, "lastId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS
          return STATUS;
        case 2: // TOTAL_NOTI
          return TOTAL_NOTI;
        case 3: // PUSHED_NUMBER
          return PUSHED_NUMBER;
        case 4: // SUCCESS_NUMBER
          return SUCCESS_NUMBER;
        case 5: // FAIL_NUMBER
          return FAIL_NUMBER;
        case 6: // LAST_ID
          return LAST_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOTALNOTI_ISSET_ID = 0;
  private static final int __PUSHEDNUMBER_ISSET_ID = 1;
  private static final int __SUCCESSNUMBER_ISSET_ID = 2;
  private static final int __FAILNUMBER_ISSET_ID = 3;
  private static final int __LASTID_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.STATUS,_Fields.TOTAL_NOTI,_Fields.PUSHED_NUMBER,_Fields.SUCCESS_NUMBER,_Fields.FAIL_NUMBER,_Fields.LAST_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PushNotiJobStatus.class)));
    tmpMap.put(_Fields.TOTAL_NOTI, new org.apache.thrift.meta_data.FieldMetaData("totalNoti", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PUSHED_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("pushedNumber", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SUCCESS_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("successNumber", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FAIL_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("failNumber", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_ID, new org.apache.thrift.meta_data.FieldMetaData("lastId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PushNotiJobDetail.class, metaDataMap);
  }

  public PushNotiJobDetail() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PushNotiJobDetail(PushNotiJobDetail other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    this.totalNoti = other.totalNoti;
    this.pushedNumber = other.pushedNumber;
    this.successNumber = other.successNumber;
    this.failNumber = other.failNumber;
    this.lastId = other.lastId;
  }

  public PushNotiJobDetail deepCopy() {
    return new PushNotiJobDetail(this);
  }

  @Override
  public void clear() {
    this.status = null;
    setTotalNotiIsSet(false);
    this.totalNoti = 0;
    setPushedNumberIsSet(false);
    this.pushedNumber = 0;
    setSuccessNumberIsSet(false);
    this.successNumber = 0;
    setFailNumberIsSet(false);
    this.failNumber = 0;
    setLastIdIsSet(false);
    this.lastId = 0;
  }

  /**
   * 
   * @see PushNotiJobStatus
   */
  public PushNotiJobStatus getStatus() {
    return this.status;
  }

  /**
   * 
   * @see PushNotiJobStatus
   */
  public PushNotiJobDetail setStatus(PushNotiJobStatus status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public long getTotalNoti() {
    return this.totalNoti;
  }

  public PushNotiJobDetail setTotalNoti(long totalNoti) {
    this.totalNoti = totalNoti;
    setTotalNotiIsSet(true);
    return this;
  }

  public void unsetTotalNoti() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALNOTI_ISSET_ID);
  }

  /** Returns true if field totalNoti is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalNoti() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALNOTI_ISSET_ID);
  }

  public void setTotalNotiIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALNOTI_ISSET_ID, value);
  }

  public long getPushedNumber() {
    return this.pushedNumber;
  }

  public PushNotiJobDetail setPushedNumber(long pushedNumber) {
    this.pushedNumber = pushedNumber;
    setPushedNumberIsSet(true);
    return this;
  }

  public void unsetPushedNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PUSHEDNUMBER_ISSET_ID);
  }

  /** Returns true if field pushedNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetPushedNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __PUSHEDNUMBER_ISSET_ID);
  }

  public void setPushedNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PUSHEDNUMBER_ISSET_ID, value);
  }

  public long getSuccessNumber() {
    return this.successNumber;
  }

  public PushNotiJobDetail setSuccessNumber(long successNumber) {
    this.successNumber = successNumber;
    setSuccessNumberIsSet(true);
    return this;
  }

  public void unsetSuccessNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESSNUMBER_ISSET_ID);
  }

  /** Returns true if field successNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetSuccessNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __SUCCESSNUMBER_ISSET_ID);
  }

  public void setSuccessNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESSNUMBER_ISSET_ID, value);
  }

  public long getFailNumber() {
    return this.failNumber;
  }

  public PushNotiJobDetail setFailNumber(long failNumber) {
    this.failNumber = failNumber;
    setFailNumberIsSet(true);
    return this;
  }

  public void unsetFailNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FAILNUMBER_ISSET_ID);
  }

  /** Returns true if field failNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetFailNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __FAILNUMBER_ISSET_ID);
  }

  public void setFailNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FAILNUMBER_ISSET_ID, value);
  }

  public int getLastId() {
    return this.lastId;
  }

  public PushNotiJobDetail setLastId(int lastId) {
    this.lastId = lastId;
    setLastIdIsSet(true);
    return this;
  }

  public void unsetLastId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTID_ISSET_ID);
  }

  /** Returns true if field lastId is set (has been assigned a value) and false otherwise */
  public boolean isSetLastId() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTID_ISSET_ID);
  }

  public void setLastIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((PushNotiJobStatus)value);
      }
      break;

    case TOTAL_NOTI:
      if (value == null) {
        unsetTotalNoti();
      } else {
        setTotalNoti((Long)value);
      }
      break;

    case PUSHED_NUMBER:
      if (value == null) {
        unsetPushedNumber();
      } else {
        setPushedNumber((Long)value);
      }
      break;

    case SUCCESS_NUMBER:
      if (value == null) {
        unsetSuccessNumber();
      } else {
        setSuccessNumber((Long)value);
      }
      break;

    case FAIL_NUMBER:
      if (value == null) {
        unsetFailNumber();
      } else {
        setFailNumber((Long)value);
      }
      break;

    case LAST_ID:
      if (value == null) {
        unsetLastId();
      } else {
        setLastId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS:
      return getStatus();

    case TOTAL_NOTI:
      return Long.valueOf(getTotalNoti());

    case PUSHED_NUMBER:
      return Long.valueOf(getPushedNumber());

    case SUCCESS_NUMBER:
      return Long.valueOf(getSuccessNumber());

    case FAIL_NUMBER:
      return Long.valueOf(getFailNumber());

    case LAST_ID:
      return Integer.valueOf(getLastId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATUS:
      return isSetStatus();
    case TOTAL_NOTI:
      return isSetTotalNoti();
    case PUSHED_NUMBER:
      return isSetPushedNumber();
    case SUCCESS_NUMBER:
      return isSetSuccessNumber();
    case FAIL_NUMBER:
      return isSetFailNumber();
    case LAST_ID:
      return isSetLastId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PushNotiJobDetail)
      return this.equals((PushNotiJobDetail)that);
    return false;
  }

  public boolean equals(PushNotiJobDetail that) {
    if (that == null)
      return false;

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_totalNoti = true && this.isSetTotalNoti();
    boolean that_present_totalNoti = true && that.isSetTotalNoti();
    if (this_present_totalNoti || that_present_totalNoti) {
      if (!(this_present_totalNoti && that_present_totalNoti))
        return false;
      if (this.totalNoti != that.totalNoti)
        return false;
    }

    boolean this_present_pushedNumber = true && this.isSetPushedNumber();
    boolean that_present_pushedNumber = true && that.isSetPushedNumber();
    if (this_present_pushedNumber || that_present_pushedNumber) {
      if (!(this_present_pushedNumber && that_present_pushedNumber))
        return false;
      if (this.pushedNumber != that.pushedNumber)
        return false;
    }

    boolean this_present_successNumber = true && this.isSetSuccessNumber();
    boolean that_present_successNumber = true && that.isSetSuccessNumber();
    if (this_present_successNumber || that_present_successNumber) {
      if (!(this_present_successNumber && that_present_successNumber))
        return false;
      if (this.successNumber != that.successNumber)
        return false;
    }

    boolean this_present_failNumber = true && this.isSetFailNumber();
    boolean that_present_failNumber = true && that.isSetFailNumber();
    if (this_present_failNumber || that_present_failNumber) {
      if (!(this_present_failNumber && that_present_failNumber))
        return false;
      if (this.failNumber != that.failNumber)
        return false;
    }

    boolean this_present_lastId = true && this.isSetLastId();
    boolean that_present_lastId = true && that.isSetLastId();
    if (this_present_lastId || that_present_lastId) {
      if (!(this_present_lastId && that_present_lastId))
        return false;
      if (this.lastId != that.lastId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(PushNotiJobDetail other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    PushNotiJobDetail typedOther = (PushNotiJobDetail)other;

    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalNoti()).compareTo(typedOther.isSetTotalNoti());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalNoti()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalNoti, typedOther.totalNoti);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPushedNumber()).compareTo(typedOther.isSetPushedNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPushedNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pushedNumber, typedOther.pushedNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuccessNumber()).compareTo(typedOther.isSetSuccessNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccessNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.successNumber, typedOther.successNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFailNumber()).compareTo(typedOther.isSetFailNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFailNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.failNumber, typedOther.failNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastId()).compareTo(typedOther.isSetLastId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastId, typedOther.lastId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PushNotiJobDetail(");
    boolean first = true;

    if (isSetStatus()) {
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
    }
    if (isSetTotalNoti()) {
      if (!first) sb.append(", ");
      sb.append("totalNoti:");
      sb.append(this.totalNoti);
      first = false;
    }
    if (isSetPushedNumber()) {
      if (!first) sb.append(", ");
      sb.append("pushedNumber:");
      sb.append(this.pushedNumber);
      first = false;
    }
    if (isSetSuccessNumber()) {
      if (!first) sb.append(", ");
      sb.append("successNumber:");
      sb.append(this.successNumber);
      first = false;
    }
    if (isSetFailNumber()) {
      if (!first) sb.append(", ");
      sb.append("failNumber:");
      sb.append(this.failNumber);
      first = false;
    }
    if (isSetLastId()) {
      if (!first) sb.append(", ");
      sb.append("lastId:");
      sb.append(this.lastId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PushNotiJobDetailStandardSchemeFactory implements SchemeFactory {
    public PushNotiJobDetailStandardScheme getScheme() {
      return new PushNotiJobDetailStandardScheme();
    }
  }

  private static class PushNotiJobDetailStandardScheme extends StandardScheme<PushNotiJobDetail> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PushNotiJobDetail struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = PushNotiJobStatus.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOTAL_NOTI
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalNoti = iprot.readI64();
              struct.setTotalNotiIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PUSHED_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.pushedNumber = iprot.readI64();
              struct.setPushedNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SUCCESS_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.successNumber = iprot.readI64();
              struct.setSuccessNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FAIL_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.failNumber = iprot.readI64();
              struct.setFailNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LAST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lastId = iprot.readI32();
              struct.setLastIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PushNotiJobDetail struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.status != null) {
        if (struct.isSetStatus()) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeI32(struct.status.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTotalNoti()) {
        oprot.writeFieldBegin(TOTAL_NOTI_FIELD_DESC);
        oprot.writeI64(struct.totalNoti);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPushedNumber()) {
        oprot.writeFieldBegin(PUSHED_NUMBER_FIELD_DESC);
        oprot.writeI64(struct.pushedNumber);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSuccessNumber()) {
        oprot.writeFieldBegin(SUCCESS_NUMBER_FIELD_DESC);
        oprot.writeI64(struct.successNumber);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFailNumber()) {
        oprot.writeFieldBegin(FAIL_NUMBER_FIELD_DESC);
        oprot.writeI64(struct.failNumber);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastId()) {
        oprot.writeFieldBegin(LAST_ID_FIELD_DESC);
        oprot.writeI32(struct.lastId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PushNotiJobDetailTupleSchemeFactory implements SchemeFactory {
    public PushNotiJobDetailTupleScheme getScheme() {
      return new PushNotiJobDetailTupleScheme();
    }
  }

  private static class PushNotiJobDetailTupleScheme extends TupleScheme<PushNotiJobDetail> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PushNotiJobDetail struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetStatus()) {
        optionals.set(0);
      }
      if (struct.isSetTotalNoti()) {
        optionals.set(1);
      }
      if (struct.isSetPushedNumber()) {
        optionals.set(2);
      }
      if (struct.isSetSuccessNumber()) {
        optionals.set(3);
      }
      if (struct.isSetFailNumber()) {
        optionals.set(4);
      }
      if (struct.isSetLastId()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status.getValue());
      }
      if (struct.isSetTotalNoti()) {
        oprot.writeI64(struct.totalNoti);
      }
      if (struct.isSetPushedNumber()) {
        oprot.writeI64(struct.pushedNumber);
      }
      if (struct.isSetSuccessNumber()) {
        oprot.writeI64(struct.successNumber);
      }
      if (struct.isSetFailNumber()) {
        oprot.writeI64(struct.failNumber);
      }
      if (struct.isSetLastId()) {
        oprot.writeI32(struct.lastId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PushNotiJobDetail struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.status = PushNotiJobStatus.findByValue(iprot.readI32());
        struct.setStatusIsSet(true);
      }
      if (incoming.get(1)) {
        struct.totalNoti = iprot.readI64();
        struct.setTotalNotiIsSet(true);
      }
      if (incoming.get(2)) {
        struct.pushedNumber = iprot.readI64();
        struct.setPushedNumberIsSet(true);
      }
      if (incoming.get(3)) {
        struct.successNumber = iprot.readI64();
        struct.setSuccessNumberIsSet(true);
      }
      if (incoming.get(4)) {
        struct.failNumber = iprot.readI64();
        struct.setFailNumberIsSet(true);
      }
      if (incoming.get(5)) {
        struct.lastId = iprot.readI32();
        struct.setLastIdIsSet(true);
      }
    }
  }

}

