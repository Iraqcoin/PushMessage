/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vng.zing.pusheventmessage.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Noti implements org.apache.thrift.TBase<Noti, Noti._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Noti");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField BADGE_FIELD_DESC = new org.apache.thrift.protocol.TField("badge", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("sound", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ICON_FIELD_DESC = new org.apache.thrift.protocol.TField("icon", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField EXTRA_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("extraData", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField EXPIRE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("expireDate", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new NotiStandardSchemeFactory());
    schemes.put(TupleScheme.class, new NotiTupleSchemeFactory());
  }

  public int id; // optional
  public String message; // optional
  public int badge; // optional
  public String sound; // optional
  public String icon; // optional
  public String extraData; // optional
  public int expireDate; // optional
  public String title; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    MESSAGE((short)2, "message"),
    BADGE((short)3, "badge"),
    SOUND((short)4, "sound"),
    ICON((short)5, "icon"),
    EXTRA_DATA((short)6, "extraData"),
    EXPIRE_DATE((short)7, "expireDate"),
    TITLE((short)8, "title");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // MESSAGE
          return MESSAGE;
        case 3: // BADGE
          return BADGE;
        case 4: // SOUND
          return SOUND;
        case 5: // ICON
          return ICON;
        case 6: // EXTRA_DATA
          return EXTRA_DATA;
        case 7: // EXPIRE_DATE
          return EXPIRE_DATE;
        case 8: // TITLE
          return TITLE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __BADGE_ISSET_ID = 1;
  private static final int __EXPIREDATE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.ID,_Fields.MESSAGE,_Fields.BADGE,_Fields.SOUND,_Fields.ICON,_Fields.EXTRA_DATA,_Fields.EXPIRE_DATE,_Fields.TITLE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BADGE, new org.apache.thrift.meta_data.FieldMetaData("badge", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SOUND, new org.apache.thrift.meta_data.FieldMetaData("sound", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ICON, new org.apache.thrift.meta_data.FieldMetaData("icon", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXTRA_DATA, new org.apache.thrift.meta_data.FieldMetaData("extraData", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXPIRE_DATE, new org.apache.thrift.meta_data.FieldMetaData("expireDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Noti.class, metaDataMap);
  }

  public Noti() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Noti(Noti other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetMessage()) {
      this.message = other.message;
    }
    this.badge = other.badge;
    if (other.isSetSound()) {
      this.sound = other.sound;
    }
    if (other.isSetIcon()) {
      this.icon = other.icon;
    }
    if (other.isSetExtraData()) {
      this.extraData = other.extraData;
    }
    this.expireDate = other.expireDate;
    if (other.isSetTitle()) {
      this.title = other.title;
    }
  }

  public Noti deepCopy() {
    return new Noti(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.message = null;
    setBadgeIsSet(false);
    this.badge = 0;
    this.sound = null;
    this.icon = null;
    this.extraData = null;
    setExpireDateIsSet(false);
    this.expireDate = 0;
    this.title = null;
  }

  public int getId() {
    return this.id;
  }

  public Noti setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getMessage() {
    return this.message;
  }

  public Noti setMessage(String message) {
    this.message = message;
    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  public int getBadge() {
    return this.badge;
  }

  public Noti setBadge(int badge) {
    this.badge = badge;
    setBadgeIsSet(true);
    return this;
  }

  public void unsetBadge() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BADGE_ISSET_ID);
  }

  /** Returns true if field badge is set (has been assigned a value) and false otherwise */
  public boolean isSetBadge() {
    return EncodingUtils.testBit(__isset_bitfield, __BADGE_ISSET_ID);
  }

  public void setBadgeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BADGE_ISSET_ID, value);
  }

  public String getSound() {
    return this.sound;
  }

  public Noti setSound(String sound) {
    this.sound = sound;
    return this;
  }

  public void unsetSound() {
    this.sound = null;
  }

  /** Returns true if field sound is set (has been assigned a value) and false otherwise */
  public boolean isSetSound() {
    return this.sound != null;
  }

  public void setSoundIsSet(boolean value) {
    if (!value) {
      this.sound = null;
    }
  }

  public String getIcon() {
    return this.icon;
  }

  public Noti setIcon(String icon) {
    this.icon = icon;
    return this;
  }

  public void unsetIcon() {
    this.icon = null;
  }

  /** Returns true if field icon is set (has been assigned a value) and false otherwise */
  public boolean isSetIcon() {
    return this.icon != null;
  }

  public void setIconIsSet(boolean value) {
    if (!value) {
      this.icon = null;
    }
  }

  public String getExtraData() {
    return this.extraData;
  }

  public Noti setExtraData(String extraData) {
    this.extraData = extraData;
    return this;
  }

  public void unsetExtraData() {
    this.extraData = null;
  }

  /** Returns true if field extraData is set (has been assigned a value) and false otherwise */
  public boolean isSetExtraData() {
    return this.extraData != null;
  }

  public void setExtraDataIsSet(boolean value) {
    if (!value) {
      this.extraData = null;
    }
  }

  public int getExpireDate() {
    return this.expireDate;
  }

  public Noti setExpireDate(int expireDate) {
    this.expireDate = expireDate;
    setExpireDateIsSet(true);
    return this;
  }

  public void unsetExpireDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXPIREDATE_ISSET_ID);
  }

  /** Returns true if field expireDate is set (has been assigned a value) and false otherwise */
  public boolean isSetExpireDate() {
    return EncodingUtils.testBit(__isset_bitfield, __EXPIREDATE_ISSET_ID);
  }

  public void setExpireDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXPIREDATE_ISSET_ID, value);
  }

  public String getTitle() {
    return this.title;
  }

  public Noti setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((String)value);
      }
      break;

    case BADGE:
      if (value == null) {
        unsetBadge();
      } else {
        setBadge((Integer)value);
      }
      break;

    case SOUND:
      if (value == null) {
        unsetSound();
      } else {
        setSound((String)value);
      }
      break;

    case ICON:
      if (value == null) {
        unsetIcon();
      } else {
        setIcon((String)value);
      }
      break;

    case EXTRA_DATA:
      if (value == null) {
        unsetExtraData();
      } else {
        setExtraData((String)value);
      }
      break;

    case EXPIRE_DATE:
      if (value == null) {
        unsetExpireDate();
      } else {
        setExpireDate((Integer)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case MESSAGE:
      return getMessage();

    case BADGE:
      return Integer.valueOf(getBadge());

    case SOUND:
      return getSound();

    case ICON:
      return getIcon();

    case EXTRA_DATA:
      return getExtraData();

    case EXPIRE_DATE:
      return Integer.valueOf(getExpireDate());

    case TITLE:
      return getTitle();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case MESSAGE:
      return isSetMessage();
    case BADGE:
      return isSetBadge();
    case SOUND:
      return isSetSound();
    case ICON:
      return isSetIcon();
    case EXTRA_DATA:
      return isSetExtraData();
    case EXPIRE_DATE:
      return isSetExpireDate();
    case TITLE:
      return isSetTitle();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Noti)
      return this.equals((Noti)that);
    return false;
  }

  public boolean equals(Noti that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    boolean this_present_badge = true && this.isSetBadge();
    boolean that_present_badge = true && that.isSetBadge();
    if (this_present_badge || that_present_badge) {
      if (!(this_present_badge && that_present_badge))
        return false;
      if (this.badge != that.badge)
        return false;
    }

    boolean this_present_sound = true && this.isSetSound();
    boolean that_present_sound = true && that.isSetSound();
    if (this_present_sound || that_present_sound) {
      if (!(this_present_sound && that_present_sound))
        return false;
      if (!this.sound.equals(that.sound))
        return false;
    }

    boolean this_present_icon = true && this.isSetIcon();
    boolean that_present_icon = true && that.isSetIcon();
    if (this_present_icon || that_present_icon) {
      if (!(this_present_icon && that_present_icon))
        return false;
      if (!this.icon.equals(that.icon))
        return false;
    }

    boolean this_present_extraData = true && this.isSetExtraData();
    boolean that_present_extraData = true && that.isSetExtraData();
    if (this_present_extraData || that_present_extraData) {
      if (!(this_present_extraData && that_present_extraData))
        return false;
      if (!this.extraData.equals(that.extraData))
        return false;
    }

    boolean this_present_expireDate = true && this.isSetExpireDate();
    boolean that_present_expireDate = true && that.isSetExpireDate();
    if (this_present_expireDate || that_present_expireDate) {
      if (!(this_present_expireDate && that_present_expireDate))
        return false;
      if (this.expireDate != that.expireDate)
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Noti other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Noti typedOther = (Noti)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(typedOther.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, typedOther.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBadge()).compareTo(typedOther.isSetBadge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBadge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.badge, typedOther.badge);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSound()).compareTo(typedOther.isSetSound());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSound()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sound, typedOther.sound);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIcon()).compareTo(typedOther.isSetIcon());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIcon()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.icon, typedOther.icon);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtraData()).compareTo(typedOther.isSetExtraData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtraData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extraData, typedOther.extraData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpireDate()).compareTo(typedOther.isSetExpireDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpireDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expireDate, typedOther.expireDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(typedOther.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, typedOther.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Noti(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetMessage()) {
      if (!first) sb.append(", ");
      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        sb.append(this.message);
      }
      first = false;
    }
    if (isSetBadge()) {
      if (!first) sb.append(", ");
      sb.append("badge:");
      sb.append(this.badge);
      first = false;
    }
    if (isSetSound()) {
      if (!first) sb.append(", ");
      sb.append("sound:");
      if (this.sound == null) {
        sb.append("null");
      } else {
        sb.append(this.sound);
      }
      first = false;
    }
    if (isSetIcon()) {
      if (!first) sb.append(", ");
      sb.append("icon:");
      if (this.icon == null) {
        sb.append("null");
      } else {
        sb.append(this.icon);
      }
      first = false;
    }
    if (isSetExtraData()) {
      if (!first) sb.append(", ");
      sb.append("extraData:");
      if (this.extraData == null) {
        sb.append("null");
      } else {
        sb.append(this.extraData);
      }
      first = false;
    }
    if (isSetExpireDate()) {
      if (!first) sb.append(", ");
      sb.append("expireDate:");
      sb.append(this.expireDate);
      first = false;
    }
    if (isSetTitle()) {
      if (!first) sb.append(", ");
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NotiStandardSchemeFactory implements SchemeFactory {
    public NotiStandardScheme getScheme() {
      return new NotiStandardScheme();
    }
  }

  private static class NotiStandardScheme extends StandardScheme<Noti> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Noti struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.message = iprot.readString();
              struct.setMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BADGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.badge = iprot.readI32();
              struct.setBadgeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SOUND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sound = iprot.readString();
              struct.setSoundIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ICON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.icon = iprot.readString();
              struct.setIconIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EXTRA_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.extraData = iprot.readString();
              struct.setExtraDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // EXPIRE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.expireDate = iprot.readI32();
              struct.setExpireDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Noti struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.message != null) {
        if (struct.isSetMessage()) {
          oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
          oprot.writeString(struct.message);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetBadge()) {
        oprot.writeFieldBegin(BADGE_FIELD_DESC);
        oprot.writeI32(struct.badge);
        oprot.writeFieldEnd();
      }
      if (struct.sound != null) {
        if (struct.isSetSound()) {
          oprot.writeFieldBegin(SOUND_FIELD_DESC);
          oprot.writeString(struct.sound);
          oprot.writeFieldEnd();
        }
      }
      if (struct.icon != null) {
        if (struct.isSetIcon()) {
          oprot.writeFieldBegin(ICON_FIELD_DESC);
          oprot.writeString(struct.icon);
          oprot.writeFieldEnd();
        }
      }
      if (struct.extraData != null) {
        if (struct.isSetExtraData()) {
          oprot.writeFieldBegin(EXTRA_DATA_FIELD_DESC);
          oprot.writeString(struct.extraData);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetExpireDate()) {
        oprot.writeFieldBegin(EXPIRE_DATE_FIELD_DESC);
        oprot.writeI32(struct.expireDate);
        oprot.writeFieldEnd();
      }
      if (struct.title != null) {
        if (struct.isSetTitle()) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NotiTupleSchemeFactory implements SchemeFactory {
    public NotiTupleScheme getScheme() {
      return new NotiTupleScheme();
    }
  }

  private static class NotiTupleScheme extends TupleScheme<Noti> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Noti struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetMessage()) {
        optionals.set(1);
      }
      if (struct.isSetBadge()) {
        optionals.set(2);
      }
      if (struct.isSetSound()) {
        optionals.set(3);
      }
      if (struct.isSetIcon()) {
        optionals.set(4);
      }
      if (struct.isSetExtraData()) {
        optionals.set(5);
      }
      if (struct.isSetExpireDate()) {
        optionals.set(6);
      }
      if (struct.isSetTitle()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetMessage()) {
        oprot.writeString(struct.message);
      }
      if (struct.isSetBadge()) {
        oprot.writeI32(struct.badge);
      }
      if (struct.isSetSound()) {
        oprot.writeString(struct.sound);
      }
      if (struct.isSetIcon()) {
        oprot.writeString(struct.icon);
      }
      if (struct.isSetExtraData()) {
        oprot.writeString(struct.extraData);
      }
      if (struct.isSetExpireDate()) {
        oprot.writeI32(struct.expireDate);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Noti struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.message = iprot.readString();
        struct.setMessageIsSet(true);
      }
      if (incoming.get(2)) {
        struct.badge = iprot.readI32();
        struct.setBadgeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sound = iprot.readString();
        struct.setSoundIsSet(true);
      }
      if (incoming.get(4)) {
        struct.icon = iprot.readString();
        struct.setIconIsSet(true);
      }
      if (incoming.get(5)) {
        struct.extraData = iprot.readString();
        struct.setExtraDataIsSet(true);
      }
      if (incoming.get(6)) {
        struct.expireDate = iprot.readI32();
        struct.setExpireDateIsSet(true);
      }
      if (incoming.get(7)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
    }
  }

}

