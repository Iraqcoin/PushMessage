/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vng.zing.pusheventmessage.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PushEventMsgService {

  public interface Iface {

    public long createMsg(EventMsg eventMsg) throws org.apache.thrift.TException;

    public EventMsgResult getEventMsg(long eventMsgId) throws org.apache.thrift.TException;

    public int updateEventMsg(EventMsg eventMsg) throws org.apache.thrift.TException;

    public ListEventMsgResult findEventMsg(int appId) throws org.apache.thrift.TException;

    public long forceReloadEventMsg(int appId) throws org.apache.thrift.TException;

    public int deleteEventMsg(long eventMsgId) throws org.apache.thrift.TException;

    public long getViewCount(long msgId, String identifier) throws org.apache.thrift.TException;

    public GetLastRequestResult getLastRequest(int appId) throws org.apache.thrift.TException;

    public PushNotiResult pushAndroidNoti(int appId, Noti noti, List<String> appVersion, List<String> osVersion, List<String> sdkVersion, List<String> packageNames, List<Long> zaloId, List<String> appuser, long time) throws org.apache.thrift.TException;

    public PushNotiResult pushIosNoti(int appId, Noti noti, List<String> appVersion, List<String> osVersion, List<String> sdkVersion, List<String> packageNames, List<Long> zaloId, List<String> appuser, long time) throws org.apache.thrift.TException;

    public int saveAndroidDeviceInfo(long sdkId, int appId, String platform, String token, String appVersion, String osVersion, String sdkVersion, String packageName) throws org.apache.thrift.TException;

    public GetPushNotiTask getPushNotiTask(String requestId) throws org.apache.thrift.TException;

    public int setApnsKeyFile(int appId, ByteBuffer file, String keyPass) throws org.apache.thrift.TException;

    public int createAppTable(int appId) throws org.apache.thrift.TException;

    public int setGoogleApiKey(int appId, String apiKey) throws org.apache.thrift.TException;

    public GetPushNotiTaskPage getPushNotiTaskPage(int appId, int offset, int size) throws org.apache.thrift.TException;

    public CountResult countPushNotiTask(int appId) throws org.apache.thrift.TException;

    public int hasApnsKeyFile(int appId) throws org.apache.thrift.TException;

    public int hasGcmKey(int appId) throws org.apache.thrift.TException;

    public GetAllScheduledTaskResult getAllScheduledTask(int appId) throws org.apache.thrift.TException;

    public int setAppOwner(int appId, long userId) throws org.apache.thrift.TException;

    public int removeAppOwner(int appId, long userId) throws org.apache.thrift.TException;

    public GetAppOwnerResult getAppOwner(int appId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void createMsg(EventMsg eventMsg, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.createMsg_call> resultHandler) throws org.apache.thrift.TException;

    public void getEventMsg(long eventMsgId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getEventMsg_call> resultHandler) throws org.apache.thrift.TException;

    public void updateEventMsg(EventMsg eventMsg, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateEventMsg_call> resultHandler) throws org.apache.thrift.TException;

    public void findEventMsg(int appId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findEventMsg_call> resultHandler) throws org.apache.thrift.TException;

    public void forceReloadEventMsg(int appId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.forceReloadEventMsg_call> resultHandler) throws org.apache.thrift.TException;

    public void deleteEventMsg(long eventMsgId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteEventMsg_call> resultHandler) throws org.apache.thrift.TException;

    public void getViewCount(long msgId, String identifier, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getViewCount_call> resultHandler) throws org.apache.thrift.TException;

    public void getLastRequest(int appId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getLastRequest_call> resultHandler) throws org.apache.thrift.TException;

    public void pushAndroidNoti(int appId, Noti noti, List<String> appVersion, List<String> osVersion, List<String> sdkVersion, List<String> packageNames, List<Long> zaloId, List<String> appuser, long time, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.pushAndroidNoti_call> resultHandler) throws org.apache.thrift.TException;

    public void pushIosNoti(int appId, Noti noti, List<String> appVersion, List<String> osVersion, List<String> sdkVersion, List<String> packageNames, List<Long> zaloId, List<String> appuser, long time, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.pushIosNoti_call> resultHandler) throws org.apache.thrift.TException;

    public void saveAndroidDeviceInfo(long sdkId, int appId, String platform, String token, String appVersion, String osVersion, String sdkVersion, String packageName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.saveAndroidDeviceInfo_call> resultHandler) throws org.apache.thrift.TException;

    public void getPushNotiTask(String requestId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getPushNotiTask_call> resultHandler) throws org.apache.thrift.TException;

    public void setApnsKeyFile(int appId, ByteBuffer file, String keyPass, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setApnsKeyFile_call> resultHandler) throws org.apache.thrift.TException;

    public void createAppTable(int appId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.createAppTable_call> resultHandler) throws org.apache.thrift.TException;

    public void setGoogleApiKey(int appId, String apiKey, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setGoogleApiKey_call> resultHandler) throws org.apache.thrift.TException;

    public void getPushNotiTaskPage(int appId, int offset, int size, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getPushNotiTaskPage_call> resultHandler) throws org.apache.thrift.TException;

    public void countPushNotiTask(int appId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.countPushNotiTask_call> resultHandler) throws org.apache.thrift.TException;

    public void hasApnsKeyFile(int appId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.hasApnsKeyFile_call> resultHandler) throws org.apache.thrift.TException;

    public void hasGcmKey(int appId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.hasGcmKey_call> resultHandler) throws org.apache.thrift.TException;

    public void getAllScheduledTask(int appId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getAllScheduledTask_call> resultHandler) throws org.apache.thrift.TException;

    public void setAppOwner(int appId, long userId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setAppOwner_call> resultHandler) throws org.apache.thrift.TException;

    public void removeAppOwner(int appId, long userId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.removeAppOwner_call> resultHandler) throws org.apache.thrift.TException;

    public void getAppOwner(int appId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getAppOwner_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public long createMsg(EventMsg eventMsg) throws org.apache.thrift.TException
    {
      send_createMsg(eventMsg);
      return recv_createMsg();
    }

    public void send_createMsg(EventMsg eventMsg) throws org.apache.thrift.TException
    {
      createMsg_args args = new createMsg_args();
      args.setEventMsg(eventMsg);
      sendBase("createMsg", args);
    }

    public long recv_createMsg() throws org.apache.thrift.TException
    {
      createMsg_result result = new createMsg_result();
      receiveBase(result, "createMsg");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createMsg failed: unknown result");
    }

    public EventMsgResult getEventMsg(long eventMsgId) throws org.apache.thrift.TException
    {
      send_getEventMsg(eventMsgId);
      return recv_getEventMsg();
    }

    public void send_getEventMsg(long eventMsgId) throws org.apache.thrift.TException
    {
      getEventMsg_args args = new getEventMsg_args();
      args.setEventMsgId(eventMsgId);
      sendBase("getEventMsg", args);
    }

    public EventMsgResult recv_getEventMsg() throws org.apache.thrift.TException
    {
      getEventMsg_result result = new getEventMsg_result();
      receiveBase(result, "getEventMsg");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEventMsg failed: unknown result");
    }

    public int updateEventMsg(EventMsg eventMsg) throws org.apache.thrift.TException
    {
      send_updateEventMsg(eventMsg);
      return recv_updateEventMsg();
    }

    public void send_updateEventMsg(EventMsg eventMsg) throws org.apache.thrift.TException
    {
      updateEventMsg_args args = new updateEventMsg_args();
      args.setEventMsg(eventMsg);
      sendBase("updateEventMsg", args);
    }

    public int recv_updateEventMsg() throws org.apache.thrift.TException
    {
      updateEventMsg_result result = new updateEventMsg_result();
      receiveBase(result, "updateEventMsg");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateEventMsg failed: unknown result");
    }

    public ListEventMsgResult findEventMsg(int appId) throws org.apache.thrift.TException
    {
      send_findEventMsg(appId);
      return recv_findEventMsg();
    }

    public void send_findEventMsg(int appId) throws org.apache.thrift.TException
    {
      findEventMsg_args args = new findEventMsg_args();
      args.setAppId(appId);
      sendBase("findEventMsg", args);
    }

    public ListEventMsgResult recv_findEventMsg() throws org.apache.thrift.TException
    {
      findEventMsg_result result = new findEventMsg_result();
      receiveBase(result, "findEventMsg");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findEventMsg failed: unknown result");
    }

    public long forceReloadEventMsg(int appId) throws org.apache.thrift.TException
    {
      send_forceReloadEventMsg(appId);
      return recv_forceReloadEventMsg();
    }

    public void send_forceReloadEventMsg(int appId) throws org.apache.thrift.TException
    {
      forceReloadEventMsg_args args = new forceReloadEventMsg_args();
      args.setAppId(appId);
      sendBase("forceReloadEventMsg", args);
    }

    public long recv_forceReloadEventMsg() throws org.apache.thrift.TException
    {
      forceReloadEventMsg_result result = new forceReloadEventMsg_result();
      receiveBase(result, "forceReloadEventMsg");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "forceReloadEventMsg failed: unknown result");
    }

    public int deleteEventMsg(long eventMsgId) throws org.apache.thrift.TException
    {
      send_deleteEventMsg(eventMsgId);
      return recv_deleteEventMsg();
    }

    public void send_deleteEventMsg(long eventMsgId) throws org.apache.thrift.TException
    {
      deleteEventMsg_args args = new deleteEventMsg_args();
      args.setEventMsgId(eventMsgId);
      sendBase("deleteEventMsg", args);
    }

    public int recv_deleteEventMsg() throws org.apache.thrift.TException
    {
      deleteEventMsg_result result = new deleteEventMsg_result();
      receiveBase(result, "deleteEventMsg");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteEventMsg failed: unknown result");
    }

    public long getViewCount(long msgId, String identifier) throws org.apache.thrift.TException
    {
      send_getViewCount(msgId, identifier);
      return recv_getViewCount();
    }

    public void send_getViewCount(long msgId, String identifier) throws org.apache.thrift.TException
    {
      getViewCount_args args = new getViewCount_args();
      args.setMsgId(msgId);
      args.setIdentifier(identifier);
      sendBase("getViewCount", args);
    }

    public long recv_getViewCount() throws org.apache.thrift.TException
    {
      getViewCount_result result = new getViewCount_result();
      receiveBase(result, "getViewCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getViewCount failed: unknown result");
    }

    public GetLastRequestResult getLastRequest(int appId) throws org.apache.thrift.TException
    {
      send_getLastRequest(appId);
      return recv_getLastRequest();
    }

    public void send_getLastRequest(int appId) throws org.apache.thrift.TException
    {
      getLastRequest_args args = new getLastRequest_args();
      args.setAppId(appId);
      sendBase("getLastRequest", args);
    }

    public GetLastRequestResult recv_getLastRequest() throws org.apache.thrift.TException
    {
      getLastRequest_result result = new getLastRequest_result();
      receiveBase(result, "getLastRequest");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLastRequest failed: unknown result");
    }

    public PushNotiResult pushAndroidNoti(int appId, Noti noti, List<String> appVersion, List<String> osVersion, List<String> sdkVersion, List<String> packageNames, List<Long> zaloId, List<String> appuser, long time) throws org.apache.thrift.TException
    {
      send_pushAndroidNoti(appId, noti, appVersion, osVersion, sdkVersion, packageNames, zaloId, appuser, time);
      return recv_pushAndroidNoti();
    }

    public void send_pushAndroidNoti(int appId, Noti noti, List<String> appVersion, List<String> osVersion, List<String> sdkVersion, List<String> packageNames, List<Long> zaloId, List<String> appuser, long time) throws org.apache.thrift.TException
    {
      pushAndroidNoti_args args = new pushAndroidNoti_args();
      args.setAppId(appId);
      args.setNoti(noti);
      args.setAppVersion(appVersion);
      args.setOsVersion(osVersion);
      args.setSdkVersion(sdkVersion);
      args.setPackageNames(packageNames);
      args.setZaloId(zaloId);
      args.setAppuser(appuser);
      args.setTime(time);
      sendBase("pushAndroidNoti", args);
    }

    public PushNotiResult recv_pushAndroidNoti() throws org.apache.thrift.TException
    {
      pushAndroidNoti_result result = new pushAndroidNoti_result();
      receiveBase(result, "pushAndroidNoti");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "pushAndroidNoti failed: unknown result");
    }

    public PushNotiResult pushIosNoti(int appId, Noti noti, List<String> appVersion, List<String> osVersion, List<String> sdkVersion, List<String> packageNames, List<Long> zaloId, List<String> appuser, long time) throws org.apache.thrift.TException
    {
      send_pushIosNoti(appId, noti, appVersion, osVersion, sdkVersion, packageNames, zaloId, appuser, time);
      return recv_pushIosNoti();
    }

    public void send_pushIosNoti(int appId, Noti noti, List<String> appVersion, List<String> osVersion, List<String> sdkVersion, List<String> packageNames, List<Long> zaloId, List<String> appuser, long time) throws org.apache.thrift.TException
    {
      pushIosNoti_args args = new pushIosNoti_args();
      args.setAppId(appId);
      args.setNoti(noti);
      args.setAppVersion(appVersion);
      args.setOsVersion(osVersion);
      args.setSdkVersion(sdkVersion);
      args.setPackageNames(packageNames);
      args.setZaloId(zaloId);
      args.setAppuser(appuser);
      args.setTime(time);
      sendBase("pushIosNoti", args);
    }

    public PushNotiResult recv_pushIosNoti() throws org.apache.thrift.TException
    {
      pushIosNoti_result result = new pushIosNoti_result();
      receiveBase(result, "pushIosNoti");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "pushIosNoti failed: unknown result");
    }

    public int saveAndroidDeviceInfo(long sdkId, int appId, String platform, String token, String appVersion, String osVersion, String sdkVersion, String packageName) throws org.apache.thrift.TException
    {
      send_saveAndroidDeviceInfo(sdkId, appId, platform, token, appVersion, osVersion, sdkVersion, packageName);
      return recv_saveAndroidDeviceInfo();
    }

    public void send_saveAndroidDeviceInfo(long sdkId, int appId, String platform, String token, String appVersion, String osVersion, String sdkVersion, String packageName) throws org.apache.thrift.TException
    {
      saveAndroidDeviceInfo_args args = new saveAndroidDeviceInfo_args();
      args.setSdkId(sdkId);
      args.setAppId(appId);
      args.setPlatform(platform);
      args.setToken(token);
      args.setAppVersion(appVersion);
      args.setOsVersion(osVersion);
      args.setSdkVersion(sdkVersion);
      args.setPackageName(packageName);
      sendBase("saveAndroidDeviceInfo", args);
    }

    public int recv_saveAndroidDeviceInfo() throws org.apache.thrift.TException
    {
      saveAndroidDeviceInfo_result result = new saveAndroidDeviceInfo_result();
      receiveBase(result, "saveAndroidDeviceInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveAndroidDeviceInfo failed: unknown result");
    }

    public GetPushNotiTask getPushNotiTask(String requestId) throws org.apache.thrift.TException
    {
      send_getPushNotiTask(requestId);
      return recv_getPushNotiTask();
    }

    public void send_getPushNotiTask(String requestId) throws org.apache.thrift.TException
    {
      getPushNotiTask_args args = new getPushNotiTask_args();
      args.setRequestId(requestId);
      sendBase("getPushNotiTask", args);
    }

    public GetPushNotiTask recv_getPushNotiTask() throws org.apache.thrift.TException
    {
      getPushNotiTask_result result = new getPushNotiTask_result();
      receiveBase(result, "getPushNotiTask");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPushNotiTask failed: unknown result");
    }

    public int setApnsKeyFile(int appId, ByteBuffer file, String keyPass) throws org.apache.thrift.TException
    {
      send_setApnsKeyFile(appId, file, keyPass);
      return recv_setApnsKeyFile();
    }

    public void send_setApnsKeyFile(int appId, ByteBuffer file, String keyPass) throws org.apache.thrift.TException
    {
      setApnsKeyFile_args args = new setApnsKeyFile_args();
      args.setAppId(appId);
      args.setFile(file);
      args.setKeyPass(keyPass);
      sendBase("setApnsKeyFile", args);
    }

    public int recv_setApnsKeyFile() throws org.apache.thrift.TException
    {
      setApnsKeyFile_result result = new setApnsKeyFile_result();
      receiveBase(result, "setApnsKeyFile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setApnsKeyFile failed: unknown result");
    }

    public int createAppTable(int appId) throws org.apache.thrift.TException
    {
      send_createAppTable(appId);
      return recv_createAppTable();
    }

    public void send_createAppTable(int appId) throws org.apache.thrift.TException
    {
      createAppTable_args args = new createAppTable_args();
      args.setAppId(appId);
      sendBase("createAppTable", args);
    }

    public int recv_createAppTable() throws org.apache.thrift.TException
    {
      createAppTable_result result = new createAppTable_result();
      receiveBase(result, "createAppTable");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createAppTable failed: unknown result");
    }

    public int setGoogleApiKey(int appId, String apiKey) throws org.apache.thrift.TException
    {
      send_setGoogleApiKey(appId, apiKey);
      return recv_setGoogleApiKey();
    }

    public void send_setGoogleApiKey(int appId, String apiKey) throws org.apache.thrift.TException
    {
      setGoogleApiKey_args args = new setGoogleApiKey_args();
      args.setAppId(appId);
      args.setApiKey(apiKey);
      sendBase("setGoogleApiKey", args);
    }

    public int recv_setGoogleApiKey() throws org.apache.thrift.TException
    {
      setGoogleApiKey_result result = new setGoogleApiKey_result();
      receiveBase(result, "setGoogleApiKey");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setGoogleApiKey failed: unknown result");
    }

    public GetPushNotiTaskPage getPushNotiTaskPage(int appId, int offset, int size) throws org.apache.thrift.TException
    {
      send_getPushNotiTaskPage(appId, offset, size);
      return recv_getPushNotiTaskPage();
    }

    public void send_getPushNotiTaskPage(int appId, int offset, int size) throws org.apache.thrift.TException
    {
      getPushNotiTaskPage_args args = new getPushNotiTaskPage_args();
      args.setAppId(appId);
      args.setOffset(offset);
      args.setSize(size);
      sendBase("getPushNotiTaskPage", args);
    }

    public GetPushNotiTaskPage recv_getPushNotiTaskPage() throws org.apache.thrift.TException
    {
      getPushNotiTaskPage_result result = new getPushNotiTaskPage_result();
      receiveBase(result, "getPushNotiTaskPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPushNotiTaskPage failed: unknown result");
    }

    public CountResult countPushNotiTask(int appId) throws org.apache.thrift.TException
    {
      send_countPushNotiTask(appId);
      return recv_countPushNotiTask();
    }

    public void send_countPushNotiTask(int appId) throws org.apache.thrift.TException
    {
      countPushNotiTask_args args = new countPushNotiTask_args();
      args.setAppId(appId);
      sendBase("countPushNotiTask", args);
    }

    public CountResult recv_countPushNotiTask() throws org.apache.thrift.TException
    {
      countPushNotiTask_result result = new countPushNotiTask_result();
      receiveBase(result, "countPushNotiTask");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "countPushNotiTask failed: unknown result");
    }

    public int hasApnsKeyFile(int appId) throws org.apache.thrift.TException
    {
      send_hasApnsKeyFile(appId);
      return recv_hasApnsKeyFile();
    }

    public void send_hasApnsKeyFile(int appId) throws org.apache.thrift.TException
    {
      hasApnsKeyFile_args args = new hasApnsKeyFile_args();
      args.setAppId(appId);
      sendBase("hasApnsKeyFile", args);
    }

    public int recv_hasApnsKeyFile() throws org.apache.thrift.TException
    {
      hasApnsKeyFile_result result = new hasApnsKeyFile_result();
      receiveBase(result, "hasApnsKeyFile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "hasApnsKeyFile failed: unknown result");
    }

    public int hasGcmKey(int appId) throws org.apache.thrift.TException
    {
      send_hasGcmKey(appId);
      return recv_hasGcmKey();
    }

    public void send_hasGcmKey(int appId) throws org.apache.thrift.TException
    {
      hasGcmKey_args args = new hasGcmKey_args();
      args.setAppId(appId);
      sendBase("hasGcmKey", args);
    }

    public int recv_hasGcmKey() throws org.apache.thrift.TException
    {
      hasGcmKey_result result = new hasGcmKey_result();
      receiveBase(result, "hasGcmKey");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "hasGcmKey failed: unknown result");
    }

    public GetAllScheduledTaskResult getAllScheduledTask(int appId) throws org.apache.thrift.TException
    {
      send_getAllScheduledTask(appId);
      return recv_getAllScheduledTask();
    }

    public void send_getAllScheduledTask(int appId) throws org.apache.thrift.TException
    {
      getAllScheduledTask_args args = new getAllScheduledTask_args();
      args.setAppId(appId);
      sendBase("getAllScheduledTask", args);
    }

    public GetAllScheduledTaskResult recv_getAllScheduledTask() throws org.apache.thrift.TException
    {
      getAllScheduledTask_result result = new getAllScheduledTask_result();
      receiveBase(result, "getAllScheduledTask");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllScheduledTask failed: unknown result");
    }

    public int setAppOwner(int appId, long userId) throws org.apache.thrift.TException
    {
      send_setAppOwner(appId, userId);
      return recv_setAppOwner();
    }

    public void send_setAppOwner(int appId, long userId) throws org.apache.thrift.TException
    {
      setAppOwner_args args = new setAppOwner_args();
      args.setAppId(appId);
      args.setUserId(userId);
      sendBase("setAppOwner", args);
    }

    public int recv_setAppOwner() throws org.apache.thrift.TException
    {
      setAppOwner_result result = new setAppOwner_result();
      receiveBase(result, "setAppOwner");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setAppOwner failed: unknown result");
    }

    public int removeAppOwner(int appId, long userId) throws org.apache.thrift.TException
    {
      send_removeAppOwner(appId, userId);
      return recv_removeAppOwner();
    }

    public void send_removeAppOwner(int appId, long userId) throws org.apache.thrift.TException
    {
      removeAppOwner_args args = new removeAppOwner_args();
      args.setAppId(appId);
      args.setUserId(userId);
      sendBase("removeAppOwner", args);
    }

    public int recv_removeAppOwner() throws org.apache.thrift.TException
    {
      removeAppOwner_result result = new removeAppOwner_result();
      receiveBase(result, "removeAppOwner");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "removeAppOwner failed: unknown result");
    }

    public GetAppOwnerResult getAppOwner(int appId) throws org.apache.thrift.TException
    {
      send_getAppOwner(appId);
      return recv_getAppOwner();
    }

    public void send_getAppOwner(int appId) throws org.apache.thrift.TException
    {
      getAppOwner_args args = new getAppOwner_args();
      args.setAppId(appId);
      sendBase("getAppOwner", args);
    }

    public GetAppOwnerResult recv_getAppOwner() throws org.apache.thrift.TException
    {
      getAppOwner_result result = new getAppOwner_result();
      receiveBase(result, "getAppOwner");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAppOwner failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void createMsg(EventMsg eventMsg, org.apache.thrift.async.AsyncMethodCallback<createMsg_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createMsg_call method_call = new createMsg_call(eventMsg, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createMsg_call extends org.apache.thrift.async.TAsyncMethodCall {
      private EventMsg eventMsg;
      public createMsg_call(EventMsg eventMsg, org.apache.thrift.async.AsyncMethodCallback<createMsg_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.eventMsg = eventMsg;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createMsg", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createMsg_args args = new createMsg_args();
        args.setEventMsg(eventMsg);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createMsg();
      }
    }

    public void getEventMsg(long eventMsgId, org.apache.thrift.async.AsyncMethodCallback<getEventMsg_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getEventMsg_call method_call = new getEventMsg_call(eventMsgId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEventMsg_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long eventMsgId;
      public getEventMsg_call(long eventMsgId, org.apache.thrift.async.AsyncMethodCallback<getEventMsg_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.eventMsgId = eventMsgId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEventMsg", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEventMsg_args args = new getEventMsg_args();
        args.setEventMsgId(eventMsgId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public EventMsgResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEventMsg();
      }
    }

    public void updateEventMsg(EventMsg eventMsg, org.apache.thrift.async.AsyncMethodCallback<updateEventMsg_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateEventMsg_call method_call = new updateEventMsg_call(eventMsg, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateEventMsg_call extends org.apache.thrift.async.TAsyncMethodCall {
      private EventMsg eventMsg;
      public updateEventMsg_call(EventMsg eventMsg, org.apache.thrift.async.AsyncMethodCallback<updateEventMsg_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.eventMsg = eventMsg;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateEventMsg", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateEventMsg_args args = new updateEventMsg_args();
        args.setEventMsg(eventMsg);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateEventMsg();
      }
    }

    public void findEventMsg(int appId, org.apache.thrift.async.AsyncMethodCallback<findEventMsg_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findEventMsg_call method_call = new findEventMsg_call(appId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findEventMsg_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int appId;
      public findEventMsg_call(int appId, org.apache.thrift.async.AsyncMethodCallback<findEventMsg_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appId = appId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findEventMsg", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findEventMsg_args args = new findEventMsg_args();
        args.setAppId(appId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ListEventMsgResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findEventMsg();
      }
    }

    public void forceReloadEventMsg(int appId, org.apache.thrift.async.AsyncMethodCallback<forceReloadEventMsg_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      forceReloadEventMsg_call method_call = new forceReloadEventMsg_call(appId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class forceReloadEventMsg_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int appId;
      public forceReloadEventMsg_call(int appId, org.apache.thrift.async.AsyncMethodCallback<forceReloadEventMsg_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appId = appId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("forceReloadEventMsg", org.apache.thrift.protocol.TMessageType.CALL, 0));
        forceReloadEventMsg_args args = new forceReloadEventMsg_args();
        args.setAppId(appId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_forceReloadEventMsg();
      }
    }

    public void deleteEventMsg(long eventMsgId, org.apache.thrift.async.AsyncMethodCallback<deleteEventMsg_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteEventMsg_call method_call = new deleteEventMsg_call(eventMsgId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteEventMsg_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long eventMsgId;
      public deleteEventMsg_call(long eventMsgId, org.apache.thrift.async.AsyncMethodCallback<deleteEventMsg_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.eventMsgId = eventMsgId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteEventMsg", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteEventMsg_args args = new deleteEventMsg_args();
        args.setEventMsgId(eventMsgId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteEventMsg();
      }
    }

    public void getViewCount(long msgId, String identifier, org.apache.thrift.async.AsyncMethodCallback<getViewCount_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getViewCount_call method_call = new getViewCount_call(msgId, identifier, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getViewCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long msgId;
      private String identifier;
      public getViewCount_call(long msgId, String identifier, org.apache.thrift.async.AsyncMethodCallback<getViewCount_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.msgId = msgId;
        this.identifier = identifier;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getViewCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getViewCount_args args = new getViewCount_args();
        args.setMsgId(msgId);
        args.setIdentifier(identifier);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getViewCount();
      }
    }

    public void getLastRequest(int appId, org.apache.thrift.async.AsyncMethodCallback<getLastRequest_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLastRequest_call method_call = new getLastRequest_call(appId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLastRequest_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int appId;
      public getLastRequest_call(int appId, org.apache.thrift.async.AsyncMethodCallback<getLastRequest_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appId = appId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLastRequest", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLastRequest_args args = new getLastRequest_args();
        args.setAppId(appId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public GetLastRequestResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLastRequest();
      }
    }

    public void pushAndroidNoti(int appId, Noti noti, List<String> appVersion, List<String> osVersion, List<String> sdkVersion, List<String> packageNames, List<Long> zaloId, List<String> appuser, long time, org.apache.thrift.async.AsyncMethodCallback<pushAndroidNoti_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      pushAndroidNoti_call method_call = new pushAndroidNoti_call(appId, noti, appVersion, osVersion, sdkVersion, packageNames, zaloId, appuser, time, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class pushAndroidNoti_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int appId;
      private Noti noti;
      private List<String> appVersion;
      private List<String> osVersion;
      private List<String> sdkVersion;
      private List<String> packageNames;
      private List<Long> zaloId;
      private List<String> appuser;
      private long time;
      public pushAndroidNoti_call(int appId, Noti noti, List<String> appVersion, List<String> osVersion, List<String> sdkVersion, List<String> packageNames, List<Long> zaloId, List<String> appuser, long time, org.apache.thrift.async.AsyncMethodCallback<pushAndroidNoti_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appId = appId;
        this.noti = noti;
        this.appVersion = appVersion;
        this.osVersion = osVersion;
        this.sdkVersion = sdkVersion;
        this.packageNames = packageNames;
        this.zaloId = zaloId;
        this.appuser = appuser;
        this.time = time;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("pushAndroidNoti", org.apache.thrift.protocol.TMessageType.CALL, 0));
        pushAndroidNoti_args args = new pushAndroidNoti_args();
        args.setAppId(appId);
        args.setNoti(noti);
        args.setAppVersion(appVersion);
        args.setOsVersion(osVersion);
        args.setSdkVersion(sdkVersion);
        args.setPackageNames(packageNames);
        args.setZaloId(zaloId);
        args.setAppuser(appuser);
        args.setTime(time);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PushNotiResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_pushAndroidNoti();
      }
    }

    public void pushIosNoti(int appId, Noti noti, List<String> appVersion, List<String> osVersion, List<String> sdkVersion, List<String> packageNames, List<Long> zaloId, List<String> appuser, long time, org.apache.thrift.async.AsyncMethodCallback<pushIosNoti_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      pushIosNoti_call method_call = new pushIosNoti_call(appId, noti, appVersion, osVersion, sdkVersion, packageNames, zaloId, appuser, time, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class pushIosNoti_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int appId;
      private Noti noti;
      private List<String> appVersion;
      private List<String> osVersion;
      private List<String> sdkVersion;
      private List<String> packageNames;
      private List<Long> zaloId;
      private List<String> appuser;
      private long time;
      public pushIosNoti_call(int appId, Noti noti, List<String> appVersion, List<String> osVersion, List<String> sdkVersion, List<String> packageNames, List<Long> zaloId, List<String> appuser, long time, org.apache.thrift.async.AsyncMethodCallback<pushIosNoti_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appId = appId;
        this.noti = noti;
        this.appVersion = appVersion;
        this.osVersion = osVersion;
        this.sdkVersion = sdkVersion;
        this.packageNames = packageNames;
        this.zaloId = zaloId;
        this.appuser = appuser;
        this.time = time;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("pushIosNoti", org.apache.thrift.protocol.TMessageType.CALL, 0));
        pushIosNoti_args args = new pushIosNoti_args();
        args.setAppId(appId);
        args.setNoti(noti);
        args.setAppVersion(appVersion);
        args.setOsVersion(osVersion);
        args.setSdkVersion(sdkVersion);
        args.setPackageNames(packageNames);
        args.setZaloId(zaloId);
        args.setAppuser(appuser);
        args.setTime(time);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PushNotiResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_pushIosNoti();
      }
    }

    public void saveAndroidDeviceInfo(long sdkId, int appId, String platform, String token, String appVersion, String osVersion, String sdkVersion, String packageName, org.apache.thrift.async.AsyncMethodCallback<saveAndroidDeviceInfo_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveAndroidDeviceInfo_call method_call = new saveAndroidDeviceInfo_call(sdkId, appId, platform, token, appVersion, osVersion, sdkVersion, packageName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveAndroidDeviceInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long sdkId;
      private int appId;
      private String platform;
      private String token;
      private String appVersion;
      private String osVersion;
      private String sdkVersion;
      private String packageName;
      public saveAndroidDeviceInfo_call(long sdkId, int appId, String platform, String token, String appVersion, String osVersion, String sdkVersion, String packageName, org.apache.thrift.async.AsyncMethodCallback<saveAndroidDeviceInfo_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sdkId = sdkId;
        this.appId = appId;
        this.platform = platform;
        this.token = token;
        this.appVersion = appVersion;
        this.osVersion = osVersion;
        this.sdkVersion = sdkVersion;
        this.packageName = packageName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveAndroidDeviceInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveAndroidDeviceInfo_args args = new saveAndroidDeviceInfo_args();
        args.setSdkId(sdkId);
        args.setAppId(appId);
        args.setPlatform(platform);
        args.setToken(token);
        args.setAppVersion(appVersion);
        args.setOsVersion(osVersion);
        args.setSdkVersion(sdkVersion);
        args.setPackageName(packageName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveAndroidDeviceInfo();
      }
    }

    public void getPushNotiTask(String requestId, org.apache.thrift.async.AsyncMethodCallback<getPushNotiTask_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPushNotiTask_call method_call = new getPushNotiTask_call(requestId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPushNotiTask_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String requestId;
      public getPushNotiTask_call(String requestId, org.apache.thrift.async.AsyncMethodCallback<getPushNotiTask_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPushNotiTask", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPushNotiTask_args args = new getPushNotiTask_args();
        args.setRequestId(requestId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public GetPushNotiTask getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPushNotiTask();
      }
    }

    public void setApnsKeyFile(int appId, ByteBuffer file, String keyPass, org.apache.thrift.async.AsyncMethodCallback<setApnsKeyFile_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setApnsKeyFile_call method_call = new setApnsKeyFile_call(appId, file, keyPass, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setApnsKeyFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int appId;
      private ByteBuffer file;
      private String keyPass;
      public setApnsKeyFile_call(int appId, ByteBuffer file, String keyPass, org.apache.thrift.async.AsyncMethodCallback<setApnsKeyFile_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appId = appId;
        this.file = file;
        this.keyPass = keyPass;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setApnsKeyFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setApnsKeyFile_args args = new setApnsKeyFile_args();
        args.setAppId(appId);
        args.setFile(file);
        args.setKeyPass(keyPass);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setApnsKeyFile();
      }
    }

    public void createAppTable(int appId, org.apache.thrift.async.AsyncMethodCallback<createAppTable_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createAppTable_call method_call = new createAppTable_call(appId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createAppTable_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int appId;
      public createAppTable_call(int appId, org.apache.thrift.async.AsyncMethodCallback<createAppTable_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appId = appId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createAppTable", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createAppTable_args args = new createAppTable_args();
        args.setAppId(appId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createAppTable();
      }
    }

    public void setGoogleApiKey(int appId, String apiKey, org.apache.thrift.async.AsyncMethodCallback<setGoogleApiKey_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setGoogleApiKey_call method_call = new setGoogleApiKey_call(appId, apiKey, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setGoogleApiKey_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int appId;
      private String apiKey;
      public setGoogleApiKey_call(int appId, String apiKey, org.apache.thrift.async.AsyncMethodCallback<setGoogleApiKey_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appId = appId;
        this.apiKey = apiKey;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setGoogleApiKey", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setGoogleApiKey_args args = new setGoogleApiKey_args();
        args.setAppId(appId);
        args.setApiKey(apiKey);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setGoogleApiKey();
      }
    }

    public void getPushNotiTaskPage(int appId, int offset, int size, org.apache.thrift.async.AsyncMethodCallback<getPushNotiTaskPage_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPushNotiTaskPage_call method_call = new getPushNotiTaskPage_call(appId, offset, size, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPushNotiTaskPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int appId;
      private int offset;
      private int size;
      public getPushNotiTaskPage_call(int appId, int offset, int size, org.apache.thrift.async.AsyncMethodCallback<getPushNotiTaskPage_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appId = appId;
        this.offset = offset;
        this.size = size;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPushNotiTaskPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPushNotiTaskPage_args args = new getPushNotiTaskPage_args();
        args.setAppId(appId);
        args.setOffset(offset);
        args.setSize(size);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public GetPushNotiTaskPage getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPushNotiTaskPage();
      }
    }

    public void countPushNotiTask(int appId, org.apache.thrift.async.AsyncMethodCallback<countPushNotiTask_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      countPushNotiTask_call method_call = new countPushNotiTask_call(appId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class countPushNotiTask_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int appId;
      public countPushNotiTask_call(int appId, org.apache.thrift.async.AsyncMethodCallback<countPushNotiTask_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appId = appId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("countPushNotiTask", org.apache.thrift.protocol.TMessageType.CALL, 0));
        countPushNotiTask_args args = new countPushNotiTask_args();
        args.setAppId(appId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CountResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_countPushNotiTask();
      }
    }

    public void hasApnsKeyFile(int appId, org.apache.thrift.async.AsyncMethodCallback<hasApnsKeyFile_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      hasApnsKeyFile_call method_call = new hasApnsKeyFile_call(appId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class hasApnsKeyFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int appId;
      public hasApnsKeyFile_call(int appId, org.apache.thrift.async.AsyncMethodCallback<hasApnsKeyFile_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appId = appId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("hasApnsKeyFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        hasApnsKeyFile_args args = new hasApnsKeyFile_args();
        args.setAppId(appId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_hasApnsKeyFile();
      }
    }

    public void hasGcmKey(int appId, org.apache.thrift.async.AsyncMethodCallback<hasGcmKey_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      hasGcmKey_call method_call = new hasGcmKey_call(appId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class hasGcmKey_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int appId;
      public hasGcmKey_call(int appId, org.apache.thrift.async.AsyncMethodCallback<hasGcmKey_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appId = appId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("hasGcmKey", org.apache.thrift.protocol.TMessageType.CALL, 0));
        hasGcmKey_args args = new hasGcmKey_args();
        args.setAppId(appId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_hasGcmKey();
      }
    }

    public void getAllScheduledTask(int appId, org.apache.thrift.async.AsyncMethodCallback<getAllScheduledTask_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllScheduledTask_call method_call = new getAllScheduledTask_call(appId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllScheduledTask_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int appId;
      public getAllScheduledTask_call(int appId, org.apache.thrift.async.AsyncMethodCallback<getAllScheduledTask_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appId = appId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllScheduledTask", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllScheduledTask_args args = new getAllScheduledTask_args();
        args.setAppId(appId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public GetAllScheduledTaskResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllScheduledTask();
      }
    }

    public void setAppOwner(int appId, long userId, org.apache.thrift.async.AsyncMethodCallback<setAppOwner_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setAppOwner_call method_call = new setAppOwner_call(appId, userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setAppOwner_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int appId;
      private long userId;
      public setAppOwner_call(int appId, long userId, org.apache.thrift.async.AsyncMethodCallback<setAppOwner_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appId = appId;
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setAppOwner", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setAppOwner_args args = new setAppOwner_args();
        args.setAppId(appId);
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setAppOwner();
      }
    }

    public void removeAppOwner(int appId, long userId, org.apache.thrift.async.AsyncMethodCallback<removeAppOwner_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeAppOwner_call method_call = new removeAppOwner_call(appId, userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeAppOwner_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int appId;
      private long userId;
      public removeAppOwner_call(int appId, long userId, org.apache.thrift.async.AsyncMethodCallback<removeAppOwner_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appId = appId;
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeAppOwner", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeAppOwner_args args = new removeAppOwner_args();
        args.setAppId(appId);
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_removeAppOwner();
      }
    }

    public void getAppOwner(int appId, org.apache.thrift.async.AsyncMethodCallback<getAppOwner_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAppOwner_call method_call = new getAppOwner_call(appId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAppOwner_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int appId;
      public getAppOwner_call(int appId, org.apache.thrift.async.AsyncMethodCallback<getAppOwner_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appId = appId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAppOwner", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAppOwner_args args = new getAppOwner_args();
        args.setAppId(appId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public GetAppOwnerResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAppOwner();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("createMsg", new createMsg());
      processMap.put("getEventMsg", new getEventMsg());
      processMap.put("updateEventMsg", new updateEventMsg());
      processMap.put("findEventMsg", new findEventMsg());
      processMap.put("forceReloadEventMsg", new forceReloadEventMsg());
      processMap.put("deleteEventMsg", new deleteEventMsg());
      processMap.put("getViewCount", new getViewCount());
      processMap.put("getLastRequest", new getLastRequest());
      processMap.put("pushAndroidNoti", new pushAndroidNoti());
      processMap.put("pushIosNoti", new pushIosNoti());
      processMap.put("saveAndroidDeviceInfo", new saveAndroidDeviceInfo());
      processMap.put("getPushNotiTask", new getPushNotiTask());
      processMap.put("setApnsKeyFile", new setApnsKeyFile());
      processMap.put("createAppTable", new createAppTable());
      processMap.put("setGoogleApiKey", new setGoogleApiKey());
      processMap.put("getPushNotiTaskPage", new getPushNotiTaskPage());
      processMap.put("countPushNotiTask", new countPushNotiTask());
      processMap.put("hasApnsKeyFile", new hasApnsKeyFile());
      processMap.put("hasGcmKey", new hasGcmKey());
      processMap.put("getAllScheduledTask", new getAllScheduledTask());
      processMap.put("setAppOwner", new setAppOwner());
      processMap.put("removeAppOwner", new removeAppOwner());
      processMap.put("getAppOwner", new getAppOwner());
      return processMap;
    }

    public static class createMsg<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createMsg_args> {
      public createMsg() {
        super("createMsg");
      }

      public createMsg_args getEmptyArgsInstance() {
        return new createMsg_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createMsg_result getResult(I iface, createMsg_args args) throws org.apache.thrift.TException {
        createMsg_result result = new createMsg_result();
        result.success = iface.createMsg(args.eventMsg);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getEventMsg<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEventMsg_args> {
      public getEventMsg() {
        super("getEventMsg");
      }

      public getEventMsg_args getEmptyArgsInstance() {
        return new getEventMsg_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getEventMsg_result getResult(I iface, getEventMsg_args args) throws org.apache.thrift.TException {
        getEventMsg_result result = new getEventMsg_result();
        result.success = iface.getEventMsg(args.eventMsgId);
        return result;
      }
    }

    public static class updateEventMsg<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateEventMsg_args> {
      public updateEventMsg() {
        super("updateEventMsg");
      }

      public updateEventMsg_args getEmptyArgsInstance() {
        return new updateEventMsg_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateEventMsg_result getResult(I iface, updateEventMsg_args args) throws org.apache.thrift.TException {
        updateEventMsg_result result = new updateEventMsg_result();
        result.success = iface.updateEventMsg(args.eventMsg);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class findEventMsg<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findEventMsg_args> {
      public findEventMsg() {
        super("findEventMsg");
      }

      public findEventMsg_args getEmptyArgsInstance() {
        return new findEventMsg_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findEventMsg_result getResult(I iface, findEventMsg_args args) throws org.apache.thrift.TException {
        findEventMsg_result result = new findEventMsg_result();
        result.success = iface.findEventMsg(args.appId);
        return result;
      }
    }

    public static class forceReloadEventMsg<I extends Iface> extends org.apache.thrift.ProcessFunction<I, forceReloadEventMsg_args> {
      public forceReloadEventMsg() {
        super("forceReloadEventMsg");
      }

      public forceReloadEventMsg_args getEmptyArgsInstance() {
        return new forceReloadEventMsg_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public forceReloadEventMsg_result getResult(I iface, forceReloadEventMsg_args args) throws org.apache.thrift.TException {
        forceReloadEventMsg_result result = new forceReloadEventMsg_result();
        result.success = iface.forceReloadEventMsg(args.appId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class deleteEventMsg<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteEventMsg_args> {
      public deleteEventMsg() {
        super("deleteEventMsg");
      }

      public deleteEventMsg_args getEmptyArgsInstance() {
        return new deleteEventMsg_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteEventMsg_result getResult(I iface, deleteEventMsg_args args) throws org.apache.thrift.TException {
        deleteEventMsg_result result = new deleteEventMsg_result();
        result.success = iface.deleteEventMsg(args.eventMsgId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getViewCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getViewCount_args> {
      public getViewCount() {
        super("getViewCount");
      }

      public getViewCount_args getEmptyArgsInstance() {
        return new getViewCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getViewCount_result getResult(I iface, getViewCount_args args) throws org.apache.thrift.TException {
        getViewCount_result result = new getViewCount_result();
        result.success = iface.getViewCount(args.msgId, args.identifier);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getLastRequest<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLastRequest_args> {
      public getLastRequest() {
        super("getLastRequest");
      }

      public getLastRequest_args getEmptyArgsInstance() {
        return new getLastRequest_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLastRequest_result getResult(I iface, getLastRequest_args args) throws org.apache.thrift.TException {
        getLastRequest_result result = new getLastRequest_result();
        result.success = iface.getLastRequest(args.appId);
        return result;
      }
    }

    public static class pushAndroidNoti<I extends Iface> extends org.apache.thrift.ProcessFunction<I, pushAndroidNoti_args> {
      public pushAndroidNoti() {
        super("pushAndroidNoti");
      }

      public pushAndroidNoti_args getEmptyArgsInstance() {
        return new pushAndroidNoti_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public pushAndroidNoti_result getResult(I iface, pushAndroidNoti_args args) throws org.apache.thrift.TException {
        pushAndroidNoti_result result = new pushAndroidNoti_result();
        result.success = iface.pushAndroidNoti(args.appId, args.noti, args.appVersion, args.osVersion, args.sdkVersion, args.packageNames, args.zaloId, args.appuser, args.time);
        return result;
      }
    }

    public static class pushIosNoti<I extends Iface> extends org.apache.thrift.ProcessFunction<I, pushIosNoti_args> {
      public pushIosNoti() {
        super("pushIosNoti");
      }

      public pushIosNoti_args getEmptyArgsInstance() {
        return new pushIosNoti_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public pushIosNoti_result getResult(I iface, pushIosNoti_args args) throws org.apache.thrift.TException {
        pushIosNoti_result result = new pushIosNoti_result();
        result.success = iface.pushIosNoti(args.appId, args.noti, args.appVersion, args.osVersion, args.sdkVersion, args.packageNames, args.zaloId, args.appuser, args.time);
        return result;
      }
    }

    public static class saveAndroidDeviceInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveAndroidDeviceInfo_args> {
      public saveAndroidDeviceInfo() {
        super("saveAndroidDeviceInfo");
      }

      public saveAndroidDeviceInfo_args getEmptyArgsInstance() {
        return new saveAndroidDeviceInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveAndroidDeviceInfo_result getResult(I iface, saveAndroidDeviceInfo_args args) throws org.apache.thrift.TException {
        saveAndroidDeviceInfo_result result = new saveAndroidDeviceInfo_result();
        result.success = iface.saveAndroidDeviceInfo(args.sdkId, args.appId, args.platform, args.token, args.appVersion, args.osVersion, args.sdkVersion, args.packageName);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getPushNotiTask<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPushNotiTask_args> {
      public getPushNotiTask() {
        super("getPushNotiTask");
      }

      public getPushNotiTask_args getEmptyArgsInstance() {
        return new getPushNotiTask_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPushNotiTask_result getResult(I iface, getPushNotiTask_args args) throws org.apache.thrift.TException {
        getPushNotiTask_result result = new getPushNotiTask_result();
        result.success = iface.getPushNotiTask(args.requestId);
        return result;
      }
    }

    public static class setApnsKeyFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setApnsKeyFile_args> {
      public setApnsKeyFile() {
        super("setApnsKeyFile");
      }

      public setApnsKeyFile_args getEmptyArgsInstance() {
        return new setApnsKeyFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setApnsKeyFile_result getResult(I iface, setApnsKeyFile_args args) throws org.apache.thrift.TException {
        setApnsKeyFile_result result = new setApnsKeyFile_result();
        result.success = iface.setApnsKeyFile(args.appId, args.file, args.keyPass);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class createAppTable<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createAppTable_args> {
      public createAppTable() {
        super("createAppTable");
      }

      public createAppTable_args getEmptyArgsInstance() {
        return new createAppTable_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createAppTable_result getResult(I iface, createAppTable_args args) throws org.apache.thrift.TException {
        createAppTable_result result = new createAppTable_result();
        result.success = iface.createAppTable(args.appId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class setGoogleApiKey<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setGoogleApiKey_args> {
      public setGoogleApiKey() {
        super("setGoogleApiKey");
      }

      public setGoogleApiKey_args getEmptyArgsInstance() {
        return new setGoogleApiKey_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setGoogleApiKey_result getResult(I iface, setGoogleApiKey_args args) throws org.apache.thrift.TException {
        setGoogleApiKey_result result = new setGoogleApiKey_result();
        result.success = iface.setGoogleApiKey(args.appId, args.apiKey);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getPushNotiTaskPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPushNotiTaskPage_args> {
      public getPushNotiTaskPage() {
        super("getPushNotiTaskPage");
      }

      public getPushNotiTaskPage_args getEmptyArgsInstance() {
        return new getPushNotiTaskPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPushNotiTaskPage_result getResult(I iface, getPushNotiTaskPage_args args) throws org.apache.thrift.TException {
        getPushNotiTaskPage_result result = new getPushNotiTaskPage_result();
        result.success = iface.getPushNotiTaskPage(args.appId, args.offset, args.size);
        return result;
      }
    }

    public static class countPushNotiTask<I extends Iface> extends org.apache.thrift.ProcessFunction<I, countPushNotiTask_args> {
      public countPushNotiTask() {
        super("countPushNotiTask");
      }

      public countPushNotiTask_args getEmptyArgsInstance() {
        return new countPushNotiTask_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public countPushNotiTask_result getResult(I iface, countPushNotiTask_args args) throws org.apache.thrift.TException {
        countPushNotiTask_result result = new countPushNotiTask_result();
        result.success = iface.countPushNotiTask(args.appId);
        return result;
      }
    }

    public static class hasApnsKeyFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, hasApnsKeyFile_args> {
      public hasApnsKeyFile() {
        super("hasApnsKeyFile");
      }

      public hasApnsKeyFile_args getEmptyArgsInstance() {
        return new hasApnsKeyFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public hasApnsKeyFile_result getResult(I iface, hasApnsKeyFile_args args) throws org.apache.thrift.TException {
        hasApnsKeyFile_result result = new hasApnsKeyFile_result();
        result.success = iface.hasApnsKeyFile(args.appId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class hasGcmKey<I extends Iface> extends org.apache.thrift.ProcessFunction<I, hasGcmKey_args> {
      public hasGcmKey() {
        super("hasGcmKey");
      }

      public hasGcmKey_args getEmptyArgsInstance() {
        return new hasGcmKey_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public hasGcmKey_result getResult(I iface, hasGcmKey_args args) throws org.apache.thrift.TException {
        hasGcmKey_result result = new hasGcmKey_result();
        result.success = iface.hasGcmKey(args.appId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getAllScheduledTask<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllScheduledTask_args> {
      public getAllScheduledTask() {
        super("getAllScheduledTask");
      }

      public getAllScheduledTask_args getEmptyArgsInstance() {
        return new getAllScheduledTask_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllScheduledTask_result getResult(I iface, getAllScheduledTask_args args) throws org.apache.thrift.TException {
        getAllScheduledTask_result result = new getAllScheduledTask_result();
        result.success = iface.getAllScheduledTask(args.appId);
        return result;
      }
    }

    public static class setAppOwner<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setAppOwner_args> {
      public setAppOwner() {
        super("setAppOwner");
      }

      public setAppOwner_args getEmptyArgsInstance() {
        return new setAppOwner_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setAppOwner_result getResult(I iface, setAppOwner_args args) throws org.apache.thrift.TException {
        setAppOwner_result result = new setAppOwner_result();
        result.success = iface.setAppOwner(args.appId, args.userId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class removeAppOwner<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeAppOwner_args> {
      public removeAppOwner() {
        super("removeAppOwner");
      }

      public removeAppOwner_args getEmptyArgsInstance() {
        return new removeAppOwner_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeAppOwner_result getResult(I iface, removeAppOwner_args args) throws org.apache.thrift.TException {
        removeAppOwner_result result = new removeAppOwner_result();
        result.success = iface.removeAppOwner(args.appId, args.userId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getAppOwner<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAppOwner_args> {
      public getAppOwner() {
        super("getAppOwner");
      }

      public getAppOwner_args getEmptyArgsInstance() {
        return new getAppOwner_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAppOwner_result getResult(I iface, getAppOwner_args args) throws org.apache.thrift.TException {
        getAppOwner_result result = new getAppOwner_result();
        result.success = iface.getAppOwner(args.appId);
        return result;
      }
    }

  }

  public static class createMsg_args implements org.apache.thrift.TBase<createMsg_args, createMsg_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createMsg_args");

    private static final org.apache.thrift.protocol.TField EVENT_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("eventMsg", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createMsg_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createMsg_argsTupleSchemeFactory());
    }

    public EventMsg eventMsg; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EVENT_MSG((short)1, "eventMsg");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EVENT_MSG
            return EVENT_MSG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EVENT_MSG, new org.apache.thrift.meta_data.FieldMetaData("eventMsg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EventMsg.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createMsg_args.class, metaDataMap);
    }

    public createMsg_args() {
    }

    public createMsg_args(
      EventMsg eventMsg)
    {
      this();
      this.eventMsg = eventMsg;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createMsg_args(createMsg_args other) {
      if (other.isSetEventMsg()) {
        this.eventMsg = new EventMsg(other.eventMsg);
      }
    }

    public createMsg_args deepCopy() {
      return new createMsg_args(this);
    }

    @Override
    public void clear() {
      this.eventMsg = null;
    }

    public EventMsg getEventMsg() {
      return this.eventMsg;
    }

    public createMsg_args setEventMsg(EventMsg eventMsg) {
      this.eventMsg = eventMsg;
      return this;
    }

    public void unsetEventMsg() {
      this.eventMsg = null;
    }

    /** Returns true if field eventMsg is set (has been assigned a value) and false otherwise */
    public boolean isSetEventMsg() {
      return this.eventMsg != null;
    }

    public void setEventMsgIsSet(boolean value) {
      if (!value) {
        this.eventMsg = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EVENT_MSG:
        if (value == null) {
          unsetEventMsg();
        } else {
          setEventMsg((EventMsg)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EVENT_MSG:
        return getEventMsg();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EVENT_MSG:
        return isSetEventMsg();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createMsg_args)
        return this.equals((createMsg_args)that);
      return false;
    }

    public boolean equals(createMsg_args that) {
      if (that == null)
        return false;

      boolean this_present_eventMsg = true && this.isSetEventMsg();
      boolean that_present_eventMsg = true && that.isSetEventMsg();
      if (this_present_eventMsg || that_present_eventMsg) {
        if (!(this_present_eventMsg && that_present_eventMsg))
          return false;
        if (!this.eventMsg.equals(that.eventMsg))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createMsg_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createMsg_args typedOther = (createMsg_args)other;

      lastComparison = Boolean.valueOf(isSetEventMsg()).compareTo(typedOther.isSetEventMsg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEventMsg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventMsg, typedOther.eventMsg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createMsg_args(");
      boolean first = true;

      sb.append("eventMsg:");
      if (this.eventMsg == null) {
        sb.append("null");
      } else {
        sb.append(this.eventMsg);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (eventMsg != null) {
        eventMsg.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createMsg_argsStandardSchemeFactory implements SchemeFactory {
      public createMsg_argsStandardScheme getScheme() {
        return new createMsg_argsStandardScheme();
      }
    }

    private static class createMsg_argsStandardScheme extends StandardScheme<createMsg_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createMsg_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EVENT_MSG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.eventMsg = new EventMsg();
                struct.eventMsg.read(iprot);
                struct.setEventMsgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createMsg_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.eventMsg != null) {
          oprot.writeFieldBegin(EVENT_MSG_FIELD_DESC);
          struct.eventMsg.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createMsg_argsTupleSchemeFactory implements SchemeFactory {
      public createMsg_argsTupleScheme getScheme() {
        return new createMsg_argsTupleScheme();
      }
    }

    private static class createMsg_argsTupleScheme extends TupleScheme<createMsg_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createMsg_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEventMsg()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEventMsg()) {
          struct.eventMsg.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createMsg_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.eventMsg = new EventMsg();
          struct.eventMsg.read(iprot);
          struct.setEventMsgIsSet(true);
        }
      }
    }

  }

  public static class createMsg_result implements org.apache.thrift.TBase<createMsg_result, createMsg_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createMsg_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createMsg_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createMsg_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createMsg_result.class, metaDataMap);
    }

    public createMsg_result() {
    }

    public createMsg_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createMsg_result(createMsg_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public createMsg_result deepCopy() {
      return new createMsg_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public createMsg_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createMsg_result)
        return this.equals((createMsg_result)that);
      return false;
    }

    public boolean equals(createMsg_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createMsg_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createMsg_result typedOther = (createMsg_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createMsg_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createMsg_resultStandardSchemeFactory implements SchemeFactory {
      public createMsg_resultStandardScheme getScheme() {
        return new createMsg_resultStandardScheme();
      }
    }

    private static class createMsg_resultStandardScheme extends StandardScheme<createMsg_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createMsg_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createMsg_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createMsg_resultTupleSchemeFactory implements SchemeFactory {
      public createMsg_resultTupleScheme getScheme() {
        return new createMsg_resultTupleScheme();
      }
    }

    private static class createMsg_resultTupleScheme extends TupleScheme<createMsg_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createMsg_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createMsg_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getEventMsg_args implements org.apache.thrift.TBase<getEventMsg_args, getEventMsg_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEventMsg_args");

    private static final org.apache.thrift.protocol.TField EVENT_MSG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("eventMsgId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEventMsg_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEventMsg_argsTupleSchemeFactory());
    }

    public long eventMsgId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EVENT_MSG_ID((short)1, "eventMsgId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EVENT_MSG_ID
            return EVENT_MSG_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EVENTMSGID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EVENT_MSG_ID, new org.apache.thrift.meta_data.FieldMetaData("eventMsgId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEventMsg_args.class, metaDataMap);
    }

    public getEventMsg_args() {
    }

    public getEventMsg_args(
      long eventMsgId)
    {
      this();
      this.eventMsgId = eventMsgId;
      setEventMsgIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEventMsg_args(getEventMsg_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.eventMsgId = other.eventMsgId;
    }

    public getEventMsg_args deepCopy() {
      return new getEventMsg_args(this);
    }

    @Override
    public void clear() {
      setEventMsgIdIsSet(false);
      this.eventMsgId = 0;
    }

    public long getEventMsgId() {
      return this.eventMsgId;
    }

    public getEventMsg_args setEventMsgId(long eventMsgId) {
      this.eventMsgId = eventMsgId;
      setEventMsgIdIsSet(true);
      return this;
    }

    public void unsetEventMsgId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EVENTMSGID_ISSET_ID);
    }

    /** Returns true if field eventMsgId is set (has been assigned a value) and false otherwise */
    public boolean isSetEventMsgId() {
      return EncodingUtils.testBit(__isset_bitfield, __EVENTMSGID_ISSET_ID);
    }

    public void setEventMsgIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EVENTMSGID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EVENT_MSG_ID:
        if (value == null) {
          unsetEventMsgId();
        } else {
          setEventMsgId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EVENT_MSG_ID:
        return Long.valueOf(getEventMsgId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EVENT_MSG_ID:
        return isSetEventMsgId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEventMsg_args)
        return this.equals((getEventMsg_args)that);
      return false;
    }

    public boolean equals(getEventMsg_args that) {
      if (that == null)
        return false;

      boolean this_present_eventMsgId = true;
      boolean that_present_eventMsgId = true;
      if (this_present_eventMsgId || that_present_eventMsgId) {
        if (!(this_present_eventMsgId && that_present_eventMsgId))
          return false;
        if (this.eventMsgId != that.eventMsgId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getEventMsg_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getEventMsg_args typedOther = (getEventMsg_args)other;

      lastComparison = Boolean.valueOf(isSetEventMsgId()).compareTo(typedOther.isSetEventMsgId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEventMsgId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventMsgId, typedOther.eventMsgId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEventMsg_args(");
      boolean first = true;

      sb.append("eventMsgId:");
      sb.append(this.eventMsgId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEventMsg_argsStandardSchemeFactory implements SchemeFactory {
      public getEventMsg_argsStandardScheme getScheme() {
        return new getEventMsg_argsStandardScheme();
      }
    }

    private static class getEventMsg_argsStandardScheme extends StandardScheme<getEventMsg_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEventMsg_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EVENT_MSG_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.eventMsgId = iprot.readI64();
                struct.setEventMsgIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEventMsg_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(EVENT_MSG_ID_FIELD_DESC);
        oprot.writeI64(struct.eventMsgId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEventMsg_argsTupleSchemeFactory implements SchemeFactory {
      public getEventMsg_argsTupleScheme getScheme() {
        return new getEventMsg_argsTupleScheme();
      }
    }

    private static class getEventMsg_argsTupleScheme extends TupleScheme<getEventMsg_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEventMsg_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEventMsgId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEventMsgId()) {
          oprot.writeI64(struct.eventMsgId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEventMsg_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.eventMsgId = iprot.readI64();
          struct.setEventMsgIdIsSet(true);
        }
      }
    }

  }

  public static class getEventMsg_result implements org.apache.thrift.TBase<getEventMsg_result, getEventMsg_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEventMsg_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEventMsg_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEventMsg_resultTupleSchemeFactory());
    }

    public EventMsgResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EventMsgResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEventMsg_result.class, metaDataMap);
    }

    public getEventMsg_result() {
    }

    public getEventMsg_result(
      EventMsgResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEventMsg_result(getEventMsg_result other) {
      if (other.isSetSuccess()) {
        this.success = new EventMsgResult(other.success);
      }
    }

    public getEventMsg_result deepCopy() {
      return new getEventMsg_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public EventMsgResult getSuccess() {
      return this.success;
    }

    public getEventMsg_result setSuccess(EventMsgResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((EventMsgResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEventMsg_result)
        return this.equals((getEventMsg_result)that);
      return false;
    }

    public boolean equals(getEventMsg_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getEventMsg_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getEventMsg_result typedOther = (getEventMsg_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEventMsg_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEventMsg_resultStandardSchemeFactory implements SchemeFactory {
      public getEventMsg_resultStandardScheme getScheme() {
        return new getEventMsg_resultStandardScheme();
      }
    }

    private static class getEventMsg_resultStandardScheme extends StandardScheme<getEventMsg_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEventMsg_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new EventMsgResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEventMsg_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEventMsg_resultTupleSchemeFactory implements SchemeFactory {
      public getEventMsg_resultTupleScheme getScheme() {
        return new getEventMsg_resultTupleScheme();
      }
    }

    private static class getEventMsg_resultTupleScheme extends TupleScheme<getEventMsg_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEventMsg_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEventMsg_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new EventMsgResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateEventMsg_args implements org.apache.thrift.TBase<updateEventMsg_args, updateEventMsg_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateEventMsg_args");

    private static final org.apache.thrift.protocol.TField EVENT_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("eventMsg", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateEventMsg_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateEventMsg_argsTupleSchemeFactory());
    }

    public EventMsg eventMsg; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EVENT_MSG((short)1, "eventMsg");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EVENT_MSG
            return EVENT_MSG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EVENT_MSG, new org.apache.thrift.meta_data.FieldMetaData("eventMsg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EventMsg.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateEventMsg_args.class, metaDataMap);
    }

    public updateEventMsg_args() {
    }

    public updateEventMsg_args(
      EventMsg eventMsg)
    {
      this();
      this.eventMsg = eventMsg;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateEventMsg_args(updateEventMsg_args other) {
      if (other.isSetEventMsg()) {
        this.eventMsg = new EventMsg(other.eventMsg);
      }
    }

    public updateEventMsg_args deepCopy() {
      return new updateEventMsg_args(this);
    }

    @Override
    public void clear() {
      this.eventMsg = null;
    }

    public EventMsg getEventMsg() {
      return this.eventMsg;
    }

    public updateEventMsg_args setEventMsg(EventMsg eventMsg) {
      this.eventMsg = eventMsg;
      return this;
    }

    public void unsetEventMsg() {
      this.eventMsg = null;
    }

    /** Returns true if field eventMsg is set (has been assigned a value) and false otherwise */
    public boolean isSetEventMsg() {
      return this.eventMsg != null;
    }

    public void setEventMsgIsSet(boolean value) {
      if (!value) {
        this.eventMsg = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EVENT_MSG:
        if (value == null) {
          unsetEventMsg();
        } else {
          setEventMsg((EventMsg)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EVENT_MSG:
        return getEventMsg();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EVENT_MSG:
        return isSetEventMsg();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateEventMsg_args)
        return this.equals((updateEventMsg_args)that);
      return false;
    }

    public boolean equals(updateEventMsg_args that) {
      if (that == null)
        return false;

      boolean this_present_eventMsg = true && this.isSetEventMsg();
      boolean that_present_eventMsg = true && that.isSetEventMsg();
      if (this_present_eventMsg || that_present_eventMsg) {
        if (!(this_present_eventMsg && that_present_eventMsg))
          return false;
        if (!this.eventMsg.equals(that.eventMsg))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateEventMsg_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateEventMsg_args typedOther = (updateEventMsg_args)other;

      lastComparison = Boolean.valueOf(isSetEventMsg()).compareTo(typedOther.isSetEventMsg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEventMsg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventMsg, typedOther.eventMsg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateEventMsg_args(");
      boolean first = true;

      sb.append("eventMsg:");
      if (this.eventMsg == null) {
        sb.append("null");
      } else {
        sb.append(this.eventMsg);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (eventMsg != null) {
        eventMsg.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateEventMsg_argsStandardSchemeFactory implements SchemeFactory {
      public updateEventMsg_argsStandardScheme getScheme() {
        return new updateEventMsg_argsStandardScheme();
      }
    }

    private static class updateEventMsg_argsStandardScheme extends StandardScheme<updateEventMsg_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateEventMsg_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EVENT_MSG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.eventMsg = new EventMsg();
                struct.eventMsg.read(iprot);
                struct.setEventMsgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateEventMsg_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.eventMsg != null) {
          oprot.writeFieldBegin(EVENT_MSG_FIELD_DESC);
          struct.eventMsg.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateEventMsg_argsTupleSchemeFactory implements SchemeFactory {
      public updateEventMsg_argsTupleScheme getScheme() {
        return new updateEventMsg_argsTupleScheme();
      }
    }

    private static class updateEventMsg_argsTupleScheme extends TupleScheme<updateEventMsg_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateEventMsg_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEventMsg()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEventMsg()) {
          struct.eventMsg.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateEventMsg_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.eventMsg = new EventMsg();
          struct.eventMsg.read(iprot);
          struct.setEventMsgIsSet(true);
        }
      }
    }

  }

  public static class updateEventMsg_result implements org.apache.thrift.TBase<updateEventMsg_result, updateEventMsg_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateEventMsg_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateEventMsg_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateEventMsg_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateEventMsg_result.class, metaDataMap);
    }

    public updateEventMsg_result() {
    }

    public updateEventMsg_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateEventMsg_result(updateEventMsg_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateEventMsg_result deepCopy() {
      return new updateEventMsg_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateEventMsg_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateEventMsg_result)
        return this.equals((updateEventMsg_result)that);
      return false;
    }

    public boolean equals(updateEventMsg_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateEventMsg_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateEventMsg_result typedOther = (updateEventMsg_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateEventMsg_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateEventMsg_resultStandardSchemeFactory implements SchemeFactory {
      public updateEventMsg_resultStandardScheme getScheme() {
        return new updateEventMsg_resultStandardScheme();
      }
    }

    private static class updateEventMsg_resultStandardScheme extends StandardScheme<updateEventMsg_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateEventMsg_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateEventMsg_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateEventMsg_resultTupleSchemeFactory implements SchemeFactory {
      public updateEventMsg_resultTupleScheme getScheme() {
        return new updateEventMsg_resultTupleScheme();
      }
    }

    private static class updateEventMsg_resultTupleScheme extends TupleScheme<updateEventMsg_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateEventMsg_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateEventMsg_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findEventMsg_args implements org.apache.thrift.TBase<findEventMsg_args, findEventMsg_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findEventMsg_args");

    private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findEventMsg_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findEventMsg_argsTupleSchemeFactory());
    }

    public int appId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APP_ID((short)1, "appId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_ID
            return APP_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __APPID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findEventMsg_args.class, metaDataMap);
    }

    public findEventMsg_args() {
    }

    public findEventMsg_args(
      int appId)
    {
      this();
      this.appId = appId;
      setAppIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findEventMsg_args(findEventMsg_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.appId = other.appId;
    }

    public findEventMsg_args deepCopy() {
      return new findEventMsg_args(this);
    }

    @Override
    public void clear() {
      setAppIdIsSet(false);
      this.appId = 0;
    }

    public int getAppId() {
      return this.appId;
    }

    public findEventMsg_args setAppId(int appId) {
      this.appId = appId;
      setAppIdIsSet(true);
      return this;
    }

    public void unsetAppId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPID_ISSET_ID);
    }

    /** Returns true if field appId is set (has been assigned a value) and false otherwise */
    public boolean isSetAppId() {
      return EncodingUtils.testBit(__isset_bitfield, __APPID_ISSET_ID);
    }

    public void setAppIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_ID:
        if (value == null) {
          unsetAppId();
        } else {
          setAppId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_ID:
        return Integer.valueOf(getAppId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_ID:
        return isSetAppId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findEventMsg_args)
        return this.equals((findEventMsg_args)that);
      return false;
    }

    public boolean equals(findEventMsg_args that) {
      if (that == null)
        return false;

      boolean this_present_appId = true;
      boolean that_present_appId = true;
      if (this_present_appId || that_present_appId) {
        if (!(this_present_appId && that_present_appId))
          return false;
        if (this.appId != that.appId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findEventMsg_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findEventMsg_args typedOther = (findEventMsg_args)other;

      lastComparison = Boolean.valueOf(isSetAppId()).compareTo(typedOther.isSetAppId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, typedOther.appId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findEventMsg_args(");
      boolean first = true;

      sb.append("appId:");
      sb.append(this.appId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findEventMsg_argsStandardSchemeFactory implements SchemeFactory {
      public findEventMsg_argsStandardScheme getScheme() {
        return new findEventMsg_argsStandardScheme();
      }
    }

    private static class findEventMsg_argsStandardScheme extends StandardScheme<findEventMsg_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findEventMsg_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.appId = iprot.readI32();
                struct.setAppIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findEventMsg_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(APP_ID_FIELD_DESC);
        oprot.writeI32(struct.appId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findEventMsg_argsTupleSchemeFactory implements SchemeFactory {
      public findEventMsg_argsTupleScheme getScheme() {
        return new findEventMsg_argsTupleScheme();
      }
    }

    private static class findEventMsg_argsTupleScheme extends TupleScheme<findEventMsg_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findEventMsg_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAppId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAppId()) {
          oprot.writeI32(struct.appId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findEventMsg_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.appId = iprot.readI32();
          struct.setAppIdIsSet(true);
        }
      }
    }

  }

  public static class findEventMsg_result implements org.apache.thrift.TBase<findEventMsg_result, findEventMsg_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findEventMsg_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findEventMsg_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findEventMsg_resultTupleSchemeFactory());
    }

    public ListEventMsgResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ListEventMsgResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findEventMsg_result.class, metaDataMap);
    }

    public findEventMsg_result() {
    }

    public findEventMsg_result(
      ListEventMsgResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findEventMsg_result(findEventMsg_result other) {
      if (other.isSetSuccess()) {
        this.success = new ListEventMsgResult(other.success);
      }
    }

    public findEventMsg_result deepCopy() {
      return new findEventMsg_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ListEventMsgResult getSuccess() {
      return this.success;
    }

    public findEventMsg_result setSuccess(ListEventMsgResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ListEventMsgResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findEventMsg_result)
        return this.equals((findEventMsg_result)that);
      return false;
    }

    public boolean equals(findEventMsg_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findEventMsg_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findEventMsg_result typedOther = (findEventMsg_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findEventMsg_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findEventMsg_resultStandardSchemeFactory implements SchemeFactory {
      public findEventMsg_resultStandardScheme getScheme() {
        return new findEventMsg_resultStandardScheme();
      }
    }

    private static class findEventMsg_resultStandardScheme extends StandardScheme<findEventMsg_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findEventMsg_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ListEventMsgResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findEventMsg_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findEventMsg_resultTupleSchemeFactory implements SchemeFactory {
      public findEventMsg_resultTupleScheme getScheme() {
        return new findEventMsg_resultTupleScheme();
      }
    }

    private static class findEventMsg_resultTupleScheme extends TupleScheme<findEventMsg_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findEventMsg_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findEventMsg_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ListEventMsgResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class forceReloadEventMsg_args implements org.apache.thrift.TBase<forceReloadEventMsg_args, forceReloadEventMsg_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("forceReloadEventMsg_args");

    private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new forceReloadEventMsg_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new forceReloadEventMsg_argsTupleSchemeFactory());
    }

    public int appId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APP_ID((short)1, "appId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_ID
            return APP_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __APPID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(forceReloadEventMsg_args.class, metaDataMap);
    }

    public forceReloadEventMsg_args() {
    }

    public forceReloadEventMsg_args(
      int appId)
    {
      this();
      this.appId = appId;
      setAppIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public forceReloadEventMsg_args(forceReloadEventMsg_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.appId = other.appId;
    }

    public forceReloadEventMsg_args deepCopy() {
      return new forceReloadEventMsg_args(this);
    }

    @Override
    public void clear() {
      setAppIdIsSet(false);
      this.appId = 0;
    }

    public int getAppId() {
      return this.appId;
    }

    public forceReloadEventMsg_args setAppId(int appId) {
      this.appId = appId;
      setAppIdIsSet(true);
      return this;
    }

    public void unsetAppId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPID_ISSET_ID);
    }

    /** Returns true if field appId is set (has been assigned a value) and false otherwise */
    public boolean isSetAppId() {
      return EncodingUtils.testBit(__isset_bitfield, __APPID_ISSET_ID);
    }

    public void setAppIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_ID:
        if (value == null) {
          unsetAppId();
        } else {
          setAppId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_ID:
        return Integer.valueOf(getAppId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_ID:
        return isSetAppId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof forceReloadEventMsg_args)
        return this.equals((forceReloadEventMsg_args)that);
      return false;
    }

    public boolean equals(forceReloadEventMsg_args that) {
      if (that == null)
        return false;

      boolean this_present_appId = true;
      boolean that_present_appId = true;
      if (this_present_appId || that_present_appId) {
        if (!(this_present_appId && that_present_appId))
          return false;
        if (this.appId != that.appId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(forceReloadEventMsg_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      forceReloadEventMsg_args typedOther = (forceReloadEventMsg_args)other;

      lastComparison = Boolean.valueOf(isSetAppId()).compareTo(typedOther.isSetAppId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, typedOther.appId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("forceReloadEventMsg_args(");
      boolean first = true;

      sb.append("appId:");
      sb.append(this.appId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class forceReloadEventMsg_argsStandardSchemeFactory implements SchemeFactory {
      public forceReloadEventMsg_argsStandardScheme getScheme() {
        return new forceReloadEventMsg_argsStandardScheme();
      }
    }

    private static class forceReloadEventMsg_argsStandardScheme extends StandardScheme<forceReloadEventMsg_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, forceReloadEventMsg_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.appId = iprot.readI32();
                struct.setAppIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, forceReloadEventMsg_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(APP_ID_FIELD_DESC);
        oprot.writeI32(struct.appId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class forceReloadEventMsg_argsTupleSchemeFactory implements SchemeFactory {
      public forceReloadEventMsg_argsTupleScheme getScheme() {
        return new forceReloadEventMsg_argsTupleScheme();
      }
    }

    private static class forceReloadEventMsg_argsTupleScheme extends TupleScheme<forceReloadEventMsg_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, forceReloadEventMsg_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAppId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAppId()) {
          oprot.writeI32(struct.appId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, forceReloadEventMsg_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.appId = iprot.readI32();
          struct.setAppIdIsSet(true);
        }
      }
    }

  }

  public static class forceReloadEventMsg_result implements org.apache.thrift.TBase<forceReloadEventMsg_result, forceReloadEventMsg_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("forceReloadEventMsg_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new forceReloadEventMsg_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new forceReloadEventMsg_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(forceReloadEventMsg_result.class, metaDataMap);
    }

    public forceReloadEventMsg_result() {
    }

    public forceReloadEventMsg_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public forceReloadEventMsg_result(forceReloadEventMsg_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public forceReloadEventMsg_result deepCopy() {
      return new forceReloadEventMsg_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public forceReloadEventMsg_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof forceReloadEventMsg_result)
        return this.equals((forceReloadEventMsg_result)that);
      return false;
    }

    public boolean equals(forceReloadEventMsg_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(forceReloadEventMsg_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      forceReloadEventMsg_result typedOther = (forceReloadEventMsg_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("forceReloadEventMsg_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class forceReloadEventMsg_resultStandardSchemeFactory implements SchemeFactory {
      public forceReloadEventMsg_resultStandardScheme getScheme() {
        return new forceReloadEventMsg_resultStandardScheme();
      }
    }

    private static class forceReloadEventMsg_resultStandardScheme extends StandardScheme<forceReloadEventMsg_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, forceReloadEventMsg_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, forceReloadEventMsg_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class forceReloadEventMsg_resultTupleSchemeFactory implements SchemeFactory {
      public forceReloadEventMsg_resultTupleScheme getScheme() {
        return new forceReloadEventMsg_resultTupleScheme();
      }
    }

    private static class forceReloadEventMsg_resultTupleScheme extends TupleScheme<forceReloadEventMsg_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, forceReloadEventMsg_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, forceReloadEventMsg_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteEventMsg_args implements org.apache.thrift.TBase<deleteEventMsg_args, deleteEventMsg_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteEventMsg_args");

    private static final org.apache.thrift.protocol.TField EVENT_MSG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("eventMsgId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteEventMsg_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteEventMsg_argsTupleSchemeFactory());
    }

    public long eventMsgId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EVENT_MSG_ID((short)1, "eventMsgId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EVENT_MSG_ID
            return EVENT_MSG_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EVENTMSGID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EVENT_MSG_ID, new org.apache.thrift.meta_data.FieldMetaData("eventMsgId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteEventMsg_args.class, metaDataMap);
    }

    public deleteEventMsg_args() {
    }

    public deleteEventMsg_args(
      long eventMsgId)
    {
      this();
      this.eventMsgId = eventMsgId;
      setEventMsgIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteEventMsg_args(deleteEventMsg_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.eventMsgId = other.eventMsgId;
    }

    public deleteEventMsg_args deepCopy() {
      return new deleteEventMsg_args(this);
    }

    @Override
    public void clear() {
      setEventMsgIdIsSet(false);
      this.eventMsgId = 0;
    }

    public long getEventMsgId() {
      return this.eventMsgId;
    }

    public deleteEventMsg_args setEventMsgId(long eventMsgId) {
      this.eventMsgId = eventMsgId;
      setEventMsgIdIsSet(true);
      return this;
    }

    public void unsetEventMsgId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EVENTMSGID_ISSET_ID);
    }

    /** Returns true if field eventMsgId is set (has been assigned a value) and false otherwise */
    public boolean isSetEventMsgId() {
      return EncodingUtils.testBit(__isset_bitfield, __EVENTMSGID_ISSET_ID);
    }

    public void setEventMsgIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EVENTMSGID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EVENT_MSG_ID:
        if (value == null) {
          unsetEventMsgId();
        } else {
          setEventMsgId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EVENT_MSG_ID:
        return Long.valueOf(getEventMsgId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EVENT_MSG_ID:
        return isSetEventMsgId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteEventMsg_args)
        return this.equals((deleteEventMsg_args)that);
      return false;
    }

    public boolean equals(deleteEventMsg_args that) {
      if (that == null)
        return false;

      boolean this_present_eventMsgId = true;
      boolean that_present_eventMsgId = true;
      if (this_present_eventMsgId || that_present_eventMsgId) {
        if (!(this_present_eventMsgId && that_present_eventMsgId))
          return false;
        if (this.eventMsgId != that.eventMsgId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteEventMsg_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteEventMsg_args typedOther = (deleteEventMsg_args)other;

      lastComparison = Boolean.valueOf(isSetEventMsgId()).compareTo(typedOther.isSetEventMsgId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEventMsgId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventMsgId, typedOther.eventMsgId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteEventMsg_args(");
      boolean first = true;

      sb.append("eventMsgId:");
      sb.append(this.eventMsgId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteEventMsg_argsStandardSchemeFactory implements SchemeFactory {
      public deleteEventMsg_argsStandardScheme getScheme() {
        return new deleteEventMsg_argsStandardScheme();
      }
    }

    private static class deleteEventMsg_argsStandardScheme extends StandardScheme<deleteEventMsg_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteEventMsg_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EVENT_MSG_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.eventMsgId = iprot.readI64();
                struct.setEventMsgIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteEventMsg_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(EVENT_MSG_ID_FIELD_DESC);
        oprot.writeI64(struct.eventMsgId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteEventMsg_argsTupleSchemeFactory implements SchemeFactory {
      public deleteEventMsg_argsTupleScheme getScheme() {
        return new deleteEventMsg_argsTupleScheme();
      }
    }

    private static class deleteEventMsg_argsTupleScheme extends TupleScheme<deleteEventMsg_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteEventMsg_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEventMsgId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEventMsgId()) {
          oprot.writeI64(struct.eventMsgId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteEventMsg_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.eventMsgId = iprot.readI64();
          struct.setEventMsgIdIsSet(true);
        }
      }
    }

  }

  public static class deleteEventMsg_result implements org.apache.thrift.TBase<deleteEventMsg_result, deleteEventMsg_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteEventMsg_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteEventMsg_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteEventMsg_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteEventMsg_result.class, metaDataMap);
    }

    public deleteEventMsg_result() {
    }

    public deleteEventMsg_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteEventMsg_result(deleteEventMsg_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public deleteEventMsg_result deepCopy() {
      return new deleteEventMsg_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public deleteEventMsg_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteEventMsg_result)
        return this.equals((deleteEventMsg_result)that);
      return false;
    }

    public boolean equals(deleteEventMsg_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteEventMsg_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteEventMsg_result typedOther = (deleteEventMsg_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteEventMsg_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteEventMsg_resultStandardSchemeFactory implements SchemeFactory {
      public deleteEventMsg_resultStandardScheme getScheme() {
        return new deleteEventMsg_resultStandardScheme();
      }
    }

    private static class deleteEventMsg_resultStandardScheme extends StandardScheme<deleteEventMsg_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteEventMsg_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteEventMsg_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteEventMsg_resultTupleSchemeFactory implements SchemeFactory {
      public deleteEventMsg_resultTupleScheme getScheme() {
        return new deleteEventMsg_resultTupleScheme();
      }
    }

    private static class deleteEventMsg_resultTupleScheme extends TupleScheme<deleteEventMsg_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteEventMsg_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteEventMsg_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getViewCount_args implements org.apache.thrift.TBase<getViewCount_args, getViewCount_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getViewCount_args");

    private static final org.apache.thrift.protocol.TField MSG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("msgId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField IDENTIFIER_FIELD_DESC = new org.apache.thrift.protocol.TField("identifier", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getViewCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getViewCount_argsTupleSchemeFactory());
    }

    public long msgId; // required
    public String identifier; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MSG_ID((short)1, "msgId"),
      IDENTIFIER((short)2, "identifier");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MSG_ID
            return MSG_ID;
          case 2: // IDENTIFIER
            return IDENTIFIER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MSGID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MSG_ID, new org.apache.thrift.meta_data.FieldMetaData("msgId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.IDENTIFIER, new org.apache.thrift.meta_data.FieldMetaData("identifier", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getViewCount_args.class, metaDataMap);
    }

    public getViewCount_args() {
    }

    public getViewCount_args(
      long msgId,
      String identifier)
    {
      this();
      this.msgId = msgId;
      setMsgIdIsSet(true);
      this.identifier = identifier;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getViewCount_args(getViewCount_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.msgId = other.msgId;
      if (other.isSetIdentifier()) {
        this.identifier = other.identifier;
      }
    }

    public getViewCount_args deepCopy() {
      return new getViewCount_args(this);
    }

    @Override
    public void clear() {
      setMsgIdIsSet(false);
      this.msgId = 0;
      this.identifier = null;
    }

    public long getMsgId() {
      return this.msgId;
    }

    public getViewCount_args setMsgId(long msgId) {
      this.msgId = msgId;
      setMsgIdIsSet(true);
      return this;
    }

    public void unsetMsgId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MSGID_ISSET_ID);
    }

    /** Returns true if field msgId is set (has been assigned a value) and false otherwise */
    public boolean isSetMsgId() {
      return EncodingUtils.testBit(__isset_bitfield, __MSGID_ISSET_ID);
    }

    public void setMsgIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MSGID_ISSET_ID, value);
    }

    public String getIdentifier() {
      return this.identifier;
    }

    public getViewCount_args setIdentifier(String identifier) {
      this.identifier = identifier;
      return this;
    }

    public void unsetIdentifier() {
      this.identifier = null;
    }

    /** Returns true if field identifier is set (has been assigned a value) and false otherwise */
    public boolean isSetIdentifier() {
      return this.identifier != null;
    }

    public void setIdentifierIsSet(boolean value) {
      if (!value) {
        this.identifier = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MSG_ID:
        if (value == null) {
          unsetMsgId();
        } else {
          setMsgId((Long)value);
        }
        break;

      case IDENTIFIER:
        if (value == null) {
          unsetIdentifier();
        } else {
          setIdentifier((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MSG_ID:
        return Long.valueOf(getMsgId());

      case IDENTIFIER:
        return getIdentifier();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MSG_ID:
        return isSetMsgId();
      case IDENTIFIER:
        return isSetIdentifier();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getViewCount_args)
        return this.equals((getViewCount_args)that);
      return false;
    }

    public boolean equals(getViewCount_args that) {
      if (that == null)
        return false;

      boolean this_present_msgId = true;
      boolean that_present_msgId = true;
      if (this_present_msgId || that_present_msgId) {
        if (!(this_present_msgId && that_present_msgId))
          return false;
        if (this.msgId != that.msgId)
          return false;
      }

      boolean this_present_identifier = true && this.isSetIdentifier();
      boolean that_present_identifier = true && that.isSetIdentifier();
      if (this_present_identifier || that_present_identifier) {
        if (!(this_present_identifier && that_present_identifier))
          return false;
        if (!this.identifier.equals(that.identifier))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getViewCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getViewCount_args typedOther = (getViewCount_args)other;

      lastComparison = Boolean.valueOf(isSetMsgId()).compareTo(typedOther.isSetMsgId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsgId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgId, typedOther.msgId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIdentifier()).compareTo(typedOther.isSetIdentifier());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdentifier()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identifier, typedOther.identifier);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getViewCount_args(");
      boolean first = true;

      sb.append("msgId:");
      sb.append(this.msgId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("identifier:");
      if (this.identifier == null) {
        sb.append("null");
      } else {
        sb.append(this.identifier);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getViewCount_argsStandardSchemeFactory implements SchemeFactory {
      public getViewCount_argsStandardScheme getScheme() {
        return new getViewCount_argsStandardScheme();
      }
    }

    private static class getViewCount_argsStandardScheme extends StandardScheme<getViewCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getViewCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MSG_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.msgId = iprot.readI64();
                struct.setMsgIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IDENTIFIER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.identifier = iprot.readString();
                struct.setIdentifierIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getViewCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MSG_ID_FIELD_DESC);
        oprot.writeI64(struct.msgId);
        oprot.writeFieldEnd();
        if (struct.identifier != null) {
          oprot.writeFieldBegin(IDENTIFIER_FIELD_DESC);
          oprot.writeString(struct.identifier);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getViewCount_argsTupleSchemeFactory implements SchemeFactory {
      public getViewCount_argsTupleScheme getScheme() {
        return new getViewCount_argsTupleScheme();
      }
    }

    private static class getViewCount_argsTupleScheme extends TupleScheme<getViewCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getViewCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMsgId()) {
          optionals.set(0);
        }
        if (struct.isSetIdentifier()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMsgId()) {
          oprot.writeI64(struct.msgId);
        }
        if (struct.isSetIdentifier()) {
          oprot.writeString(struct.identifier);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getViewCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.msgId = iprot.readI64();
          struct.setMsgIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.identifier = iprot.readString();
          struct.setIdentifierIsSet(true);
        }
      }
    }

  }

  public static class getViewCount_result implements org.apache.thrift.TBase<getViewCount_result, getViewCount_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getViewCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getViewCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getViewCount_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getViewCount_result.class, metaDataMap);
    }

    public getViewCount_result() {
    }

    public getViewCount_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getViewCount_result(getViewCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getViewCount_result deepCopy() {
      return new getViewCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public getViewCount_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getViewCount_result)
        return this.equals((getViewCount_result)that);
      return false;
    }

    public boolean equals(getViewCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getViewCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getViewCount_result typedOther = (getViewCount_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getViewCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getViewCount_resultStandardSchemeFactory implements SchemeFactory {
      public getViewCount_resultStandardScheme getScheme() {
        return new getViewCount_resultStandardScheme();
      }
    }

    private static class getViewCount_resultStandardScheme extends StandardScheme<getViewCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getViewCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getViewCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getViewCount_resultTupleSchemeFactory implements SchemeFactory {
      public getViewCount_resultTupleScheme getScheme() {
        return new getViewCount_resultTupleScheme();
      }
    }

    private static class getViewCount_resultTupleScheme extends TupleScheme<getViewCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getViewCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getViewCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getLastRequest_args implements org.apache.thrift.TBase<getLastRequest_args, getLastRequest_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLastRequest_args");

    private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLastRequest_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLastRequest_argsTupleSchemeFactory());
    }

    public int appId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APP_ID((short)1, "appId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_ID
            return APP_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __APPID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLastRequest_args.class, metaDataMap);
    }

    public getLastRequest_args() {
    }

    public getLastRequest_args(
      int appId)
    {
      this();
      this.appId = appId;
      setAppIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLastRequest_args(getLastRequest_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.appId = other.appId;
    }

    public getLastRequest_args deepCopy() {
      return new getLastRequest_args(this);
    }

    @Override
    public void clear() {
      setAppIdIsSet(false);
      this.appId = 0;
    }

    public int getAppId() {
      return this.appId;
    }

    public getLastRequest_args setAppId(int appId) {
      this.appId = appId;
      setAppIdIsSet(true);
      return this;
    }

    public void unsetAppId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPID_ISSET_ID);
    }

    /** Returns true if field appId is set (has been assigned a value) and false otherwise */
    public boolean isSetAppId() {
      return EncodingUtils.testBit(__isset_bitfield, __APPID_ISSET_ID);
    }

    public void setAppIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_ID:
        if (value == null) {
          unsetAppId();
        } else {
          setAppId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_ID:
        return Integer.valueOf(getAppId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_ID:
        return isSetAppId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLastRequest_args)
        return this.equals((getLastRequest_args)that);
      return false;
    }

    public boolean equals(getLastRequest_args that) {
      if (that == null)
        return false;

      boolean this_present_appId = true;
      boolean that_present_appId = true;
      if (this_present_appId || that_present_appId) {
        if (!(this_present_appId && that_present_appId))
          return false;
        if (this.appId != that.appId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getLastRequest_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getLastRequest_args typedOther = (getLastRequest_args)other;

      lastComparison = Boolean.valueOf(isSetAppId()).compareTo(typedOther.isSetAppId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, typedOther.appId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLastRequest_args(");
      boolean first = true;

      sb.append("appId:");
      sb.append(this.appId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLastRequest_argsStandardSchemeFactory implements SchemeFactory {
      public getLastRequest_argsStandardScheme getScheme() {
        return new getLastRequest_argsStandardScheme();
      }
    }

    private static class getLastRequest_argsStandardScheme extends StandardScheme<getLastRequest_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLastRequest_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.appId = iprot.readI32();
                struct.setAppIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLastRequest_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(APP_ID_FIELD_DESC);
        oprot.writeI32(struct.appId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLastRequest_argsTupleSchemeFactory implements SchemeFactory {
      public getLastRequest_argsTupleScheme getScheme() {
        return new getLastRequest_argsTupleScheme();
      }
    }

    private static class getLastRequest_argsTupleScheme extends TupleScheme<getLastRequest_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLastRequest_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAppId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAppId()) {
          oprot.writeI32(struct.appId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLastRequest_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.appId = iprot.readI32();
          struct.setAppIdIsSet(true);
        }
      }
    }

  }

  public static class getLastRequest_result implements org.apache.thrift.TBase<getLastRequest_result, getLastRequest_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLastRequest_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLastRequest_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLastRequest_resultTupleSchemeFactory());
    }

    public GetLastRequestResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GetLastRequestResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLastRequest_result.class, metaDataMap);
    }

    public getLastRequest_result() {
    }

    public getLastRequest_result(
      GetLastRequestResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLastRequest_result(getLastRequest_result other) {
      if (other.isSetSuccess()) {
        this.success = new GetLastRequestResult(other.success);
      }
    }

    public getLastRequest_result deepCopy() {
      return new getLastRequest_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public GetLastRequestResult getSuccess() {
      return this.success;
    }

    public getLastRequest_result setSuccess(GetLastRequestResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((GetLastRequestResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLastRequest_result)
        return this.equals((getLastRequest_result)that);
      return false;
    }

    public boolean equals(getLastRequest_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getLastRequest_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getLastRequest_result typedOther = (getLastRequest_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLastRequest_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLastRequest_resultStandardSchemeFactory implements SchemeFactory {
      public getLastRequest_resultStandardScheme getScheme() {
        return new getLastRequest_resultStandardScheme();
      }
    }

    private static class getLastRequest_resultStandardScheme extends StandardScheme<getLastRequest_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLastRequest_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new GetLastRequestResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLastRequest_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLastRequest_resultTupleSchemeFactory implements SchemeFactory {
      public getLastRequest_resultTupleScheme getScheme() {
        return new getLastRequest_resultTupleScheme();
      }
    }

    private static class getLastRequest_resultTupleScheme extends TupleScheme<getLastRequest_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLastRequest_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLastRequest_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new GetLastRequestResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class pushAndroidNoti_args implements org.apache.thrift.TBase<pushAndroidNoti_args, pushAndroidNoti_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pushAndroidNoti_args");

    private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField NOTI_FIELD_DESC = new org.apache.thrift.protocol.TField("noti", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField APP_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("appVersion", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField OS_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("osVersion", org.apache.thrift.protocol.TType.LIST, (short)4);
    private static final org.apache.thrift.protocol.TField SDK_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("sdkVersion", org.apache.thrift.protocol.TType.LIST, (short)5);
    private static final org.apache.thrift.protocol.TField PACKAGE_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("packageNames", org.apache.thrift.protocol.TType.LIST, (short)6);
    private static final org.apache.thrift.protocol.TField ZALO_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("zaloId", org.apache.thrift.protocol.TType.LIST, (short)7);
    private static final org.apache.thrift.protocol.TField APPUSER_FIELD_DESC = new org.apache.thrift.protocol.TField("appuser", org.apache.thrift.protocol.TType.LIST, (short)8);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I64, (short)9);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pushAndroidNoti_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pushAndroidNoti_argsTupleSchemeFactory());
    }

    public int appId; // required
    public Noti noti; // required
    public List<String> appVersion; // required
    public List<String> osVersion; // required
    public List<String> sdkVersion; // required
    public List<String> packageNames; // required
    public List<Long> zaloId; // required
    public List<String> appuser; // required
    public long time; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APP_ID((short)1, "appId"),
      NOTI((short)2, "noti"),
      APP_VERSION((short)3, "appVersion"),
      OS_VERSION((short)4, "osVersion"),
      SDK_VERSION((short)5, "sdkVersion"),
      PACKAGE_NAMES((short)6, "packageNames"),
      ZALO_ID((short)7, "zaloId"),
      APPUSER((short)8, "appuser"),
      TIME((short)9, "time");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_ID
            return APP_ID;
          case 2: // NOTI
            return NOTI;
          case 3: // APP_VERSION
            return APP_VERSION;
          case 4: // OS_VERSION
            return OS_VERSION;
          case 5: // SDK_VERSION
            return SDK_VERSION;
          case 6: // PACKAGE_NAMES
            return PACKAGE_NAMES;
          case 7: // ZALO_ID
            return ZALO_ID;
          case 8: // APPUSER
            return APPUSER;
          case 9: // TIME
            return TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __APPID_ISSET_ID = 0;
    private static final int __TIME_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NOTI, new org.apache.thrift.meta_data.FieldMetaData("noti", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Noti.class)));
      tmpMap.put(_Fields.APP_VERSION, new org.apache.thrift.meta_data.FieldMetaData("appVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.OS_VERSION, new org.apache.thrift.meta_data.FieldMetaData("osVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.SDK_VERSION, new org.apache.thrift.meta_data.FieldMetaData("sdkVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.PACKAGE_NAMES, new org.apache.thrift.meta_data.FieldMetaData("packageNames", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.ZALO_ID, new org.apache.thrift.meta_data.FieldMetaData("zaloId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.APPUSER, new org.apache.thrift.meta_data.FieldMetaData("appuser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pushAndroidNoti_args.class, metaDataMap);
    }

    public pushAndroidNoti_args() {
    }

    public pushAndroidNoti_args(
      int appId,
      Noti noti,
      List<String> appVersion,
      List<String> osVersion,
      List<String> sdkVersion,
      List<String> packageNames,
      List<Long> zaloId,
      List<String> appuser,
      long time)
    {
      this();
      this.appId = appId;
      setAppIdIsSet(true);
      this.noti = noti;
      this.appVersion = appVersion;
      this.osVersion = osVersion;
      this.sdkVersion = sdkVersion;
      this.packageNames = packageNames;
      this.zaloId = zaloId;
      this.appuser = appuser;
      this.time = time;
      setTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pushAndroidNoti_args(pushAndroidNoti_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.appId = other.appId;
      if (other.isSetNoti()) {
        this.noti = new Noti(other.noti);
      }
      if (other.isSetAppVersion()) {
        List<String> __this__appVersion = new ArrayList<String>();
        for (String other_element : other.appVersion) {
          __this__appVersion.add(other_element);
        }
        this.appVersion = __this__appVersion;
      }
      if (other.isSetOsVersion()) {
        List<String> __this__osVersion = new ArrayList<String>();
        for (String other_element : other.osVersion) {
          __this__osVersion.add(other_element);
        }
        this.osVersion = __this__osVersion;
      }
      if (other.isSetSdkVersion()) {
        List<String> __this__sdkVersion = new ArrayList<String>();
        for (String other_element : other.sdkVersion) {
          __this__sdkVersion.add(other_element);
        }
        this.sdkVersion = __this__sdkVersion;
      }
      if (other.isSetPackageNames()) {
        List<String> __this__packageNames = new ArrayList<String>();
        for (String other_element : other.packageNames) {
          __this__packageNames.add(other_element);
        }
        this.packageNames = __this__packageNames;
      }
      if (other.isSetZaloId()) {
        List<Long> __this__zaloId = new ArrayList<Long>();
        for (Long other_element : other.zaloId) {
          __this__zaloId.add(other_element);
        }
        this.zaloId = __this__zaloId;
      }
      if (other.isSetAppuser()) {
        List<String> __this__appuser = new ArrayList<String>();
        for (String other_element : other.appuser) {
          __this__appuser.add(other_element);
        }
        this.appuser = __this__appuser;
      }
      this.time = other.time;
    }

    public pushAndroidNoti_args deepCopy() {
      return new pushAndroidNoti_args(this);
    }

    @Override
    public void clear() {
      setAppIdIsSet(false);
      this.appId = 0;
      this.noti = null;
      this.appVersion = null;
      this.osVersion = null;
      this.sdkVersion = null;
      this.packageNames = null;
      this.zaloId = null;
      this.appuser = null;
      setTimeIsSet(false);
      this.time = 0;
    }

    public int getAppId() {
      return this.appId;
    }

    public pushAndroidNoti_args setAppId(int appId) {
      this.appId = appId;
      setAppIdIsSet(true);
      return this;
    }

    public void unsetAppId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPID_ISSET_ID);
    }

    /** Returns true if field appId is set (has been assigned a value) and false otherwise */
    public boolean isSetAppId() {
      return EncodingUtils.testBit(__isset_bitfield, __APPID_ISSET_ID);
    }

    public void setAppIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPID_ISSET_ID, value);
    }

    public Noti getNoti() {
      return this.noti;
    }

    public pushAndroidNoti_args setNoti(Noti noti) {
      this.noti = noti;
      return this;
    }

    public void unsetNoti() {
      this.noti = null;
    }

    /** Returns true if field noti is set (has been assigned a value) and false otherwise */
    public boolean isSetNoti() {
      return this.noti != null;
    }

    public void setNotiIsSet(boolean value) {
      if (!value) {
        this.noti = null;
      }
    }

    public int getAppVersionSize() {
      return (this.appVersion == null) ? 0 : this.appVersion.size();
    }

    public java.util.Iterator<String> getAppVersionIterator() {
      return (this.appVersion == null) ? null : this.appVersion.iterator();
    }

    public void addToAppVersion(String elem) {
      if (this.appVersion == null) {
        this.appVersion = new ArrayList<String>();
      }
      this.appVersion.add(elem);
    }

    public List<String> getAppVersion() {
      return this.appVersion;
    }

    public pushAndroidNoti_args setAppVersion(List<String> appVersion) {
      this.appVersion = appVersion;
      return this;
    }

    public void unsetAppVersion() {
      this.appVersion = null;
    }

    /** Returns true if field appVersion is set (has been assigned a value) and false otherwise */
    public boolean isSetAppVersion() {
      return this.appVersion != null;
    }

    public void setAppVersionIsSet(boolean value) {
      if (!value) {
        this.appVersion = null;
      }
    }

    public int getOsVersionSize() {
      return (this.osVersion == null) ? 0 : this.osVersion.size();
    }

    public java.util.Iterator<String> getOsVersionIterator() {
      return (this.osVersion == null) ? null : this.osVersion.iterator();
    }

    public void addToOsVersion(String elem) {
      if (this.osVersion == null) {
        this.osVersion = new ArrayList<String>();
      }
      this.osVersion.add(elem);
    }

    public List<String> getOsVersion() {
      return this.osVersion;
    }

    public pushAndroidNoti_args setOsVersion(List<String> osVersion) {
      this.osVersion = osVersion;
      return this;
    }

    public void unsetOsVersion() {
      this.osVersion = null;
    }

    /** Returns true if field osVersion is set (has been assigned a value) and false otherwise */
    public boolean isSetOsVersion() {
      return this.osVersion != null;
    }

    public void setOsVersionIsSet(boolean value) {
      if (!value) {
        this.osVersion = null;
      }
    }

    public int getSdkVersionSize() {
      return (this.sdkVersion == null) ? 0 : this.sdkVersion.size();
    }

    public java.util.Iterator<String> getSdkVersionIterator() {
      return (this.sdkVersion == null) ? null : this.sdkVersion.iterator();
    }

    public void addToSdkVersion(String elem) {
      if (this.sdkVersion == null) {
        this.sdkVersion = new ArrayList<String>();
      }
      this.sdkVersion.add(elem);
    }

    public List<String> getSdkVersion() {
      return this.sdkVersion;
    }

    public pushAndroidNoti_args setSdkVersion(List<String> sdkVersion) {
      this.sdkVersion = sdkVersion;
      return this;
    }

    public void unsetSdkVersion() {
      this.sdkVersion = null;
    }

    /** Returns true if field sdkVersion is set (has been assigned a value) and false otherwise */
    public boolean isSetSdkVersion() {
      return this.sdkVersion != null;
    }

    public void setSdkVersionIsSet(boolean value) {
      if (!value) {
        this.sdkVersion = null;
      }
    }

    public int getPackageNamesSize() {
      return (this.packageNames == null) ? 0 : this.packageNames.size();
    }

    public java.util.Iterator<String> getPackageNamesIterator() {
      return (this.packageNames == null) ? null : this.packageNames.iterator();
    }

    public void addToPackageNames(String elem) {
      if (this.packageNames == null) {
        this.packageNames = new ArrayList<String>();
      }
      this.packageNames.add(elem);
    }

    public List<String> getPackageNames() {
      return this.packageNames;
    }

    public pushAndroidNoti_args setPackageNames(List<String> packageNames) {
      this.packageNames = packageNames;
      return this;
    }

    public void unsetPackageNames() {
      this.packageNames = null;
    }

    /** Returns true if field packageNames is set (has been assigned a value) and false otherwise */
    public boolean isSetPackageNames() {
      return this.packageNames != null;
    }

    public void setPackageNamesIsSet(boolean value) {
      if (!value) {
        this.packageNames = null;
      }
    }

    public int getZaloIdSize() {
      return (this.zaloId == null) ? 0 : this.zaloId.size();
    }

    public java.util.Iterator<Long> getZaloIdIterator() {
      return (this.zaloId == null) ? null : this.zaloId.iterator();
    }

    public void addToZaloId(long elem) {
      if (this.zaloId == null) {
        this.zaloId = new ArrayList<Long>();
      }
      this.zaloId.add(elem);
    }

    public List<Long> getZaloId() {
      return this.zaloId;
    }

    public pushAndroidNoti_args setZaloId(List<Long> zaloId) {
      this.zaloId = zaloId;
      return this;
    }

    public void unsetZaloId() {
      this.zaloId = null;
    }

    /** Returns true if field zaloId is set (has been assigned a value) and false otherwise */
    public boolean isSetZaloId() {
      return this.zaloId != null;
    }

    public void setZaloIdIsSet(boolean value) {
      if (!value) {
        this.zaloId = null;
      }
    }

    public int getAppuserSize() {
      return (this.appuser == null) ? 0 : this.appuser.size();
    }

    public java.util.Iterator<String> getAppuserIterator() {
      return (this.appuser == null) ? null : this.appuser.iterator();
    }

    public void addToAppuser(String elem) {
      if (this.appuser == null) {
        this.appuser = new ArrayList<String>();
      }
      this.appuser.add(elem);
    }

    public List<String> getAppuser() {
      return this.appuser;
    }

    public pushAndroidNoti_args setAppuser(List<String> appuser) {
      this.appuser = appuser;
      return this;
    }

    public void unsetAppuser() {
      this.appuser = null;
    }

    /** Returns true if field appuser is set (has been assigned a value) and false otherwise */
    public boolean isSetAppuser() {
      return this.appuser != null;
    }

    public void setAppuserIsSet(boolean value) {
      if (!value) {
        this.appuser = null;
      }
    }

    public long getTime() {
      return this.time;
    }

    public pushAndroidNoti_args setTime(long time) {
      this.time = time;
      setTimeIsSet(true);
      return this;
    }

    public void unsetTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIME_ISSET_ID);
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return EncodingUtils.testBit(__isset_bitfield, __TIME_ISSET_ID);
    }

    public void setTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_ID:
        if (value == null) {
          unsetAppId();
        } else {
          setAppId((Integer)value);
        }
        break;

      case NOTI:
        if (value == null) {
          unsetNoti();
        } else {
          setNoti((Noti)value);
        }
        break;

      case APP_VERSION:
        if (value == null) {
          unsetAppVersion();
        } else {
          setAppVersion((List<String>)value);
        }
        break;

      case OS_VERSION:
        if (value == null) {
          unsetOsVersion();
        } else {
          setOsVersion((List<String>)value);
        }
        break;

      case SDK_VERSION:
        if (value == null) {
          unsetSdkVersion();
        } else {
          setSdkVersion((List<String>)value);
        }
        break;

      case PACKAGE_NAMES:
        if (value == null) {
          unsetPackageNames();
        } else {
          setPackageNames((List<String>)value);
        }
        break;

      case ZALO_ID:
        if (value == null) {
          unsetZaloId();
        } else {
          setZaloId((List<Long>)value);
        }
        break;

      case APPUSER:
        if (value == null) {
          unsetAppuser();
        } else {
          setAppuser((List<String>)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_ID:
        return Integer.valueOf(getAppId());

      case NOTI:
        return getNoti();

      case APP_VERSION:
        return getAppVersion();

      case OS_VERSION:
        return getOsVersion();

      case SDK_VERSION:
        return getSdkVersion();

      case PACKAGE_NAMES:
        return getPackageNames();

      case ZALO_ID:
        return getZaloId();

      case APPUSER:
        return getAppuser();

      case TIME:
        return Long.valueOf(getTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_ID:
        return isSetAppId();
      case NOTI:
        return isSetNoti();
      case APP_VERSION:
        return isSetAppVersion();
      case OS_VERSION:
        return isSetOsVersion();
      case SDK_VERSION:
        return isSetSdkVersion();
      case PACKAGE_NAMES:
        return isSetPackageNames();
      case ZALO_ID:
        return isSetZaloId();
      case APPUSER:
        return isSetAppuser();
      case TIME:
        return isSetTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pushAndroidNoti_args)
        return this.equals((pushAndroidNoti_args)that);
      return false;
    }

    public boolean equals(pushAndroidNoti_args that) {
      if (that == null)
        return false;

      boolean this_present_appId = true;
      boolean that_present_appId = true;
      if (this_present_appId || that_present_appId) {
        if (!(this_present_appId && that_present_appId))
          return false;
        if (this.appId != that.appId)
          return false;
      }

      boolean this_present_noti = true && this.isSetNoti();
      boolean that_present_noti = true && that.isSetNoti();
      if (this_present_noti || that_present_noti) {
        if (!(this_present_noti && that_present_noti))
          return false;
        if (!this.noti.equals(that.noti))
          return false;
      }

      boolean this_present_appVersion = true && this.isSetAppVersion();
      boolean that_present_appVersion = true && that.isSetAppVersion();
      if (this_present_appVersion || that_present_appVersion) {
        if (!(this_present_appVersion && that_present_appVersion))
          return false;
        if (!this.appVersion.equals(that.appVersion))
          return false;
      }

      boolean this_present_osVersion = true && this.isSetOsVersion();
      boolean that_present_osVersion = true && that.isSetOsVersion();
      if (this_present_osVersion || that_present_osVersion) {
        if (!(this_present_osVersion && that_present_osVersion))
          return false;
        if (!this.osVersion.equals(that.osVersion))
          return false;
      }

      boolean this_present_sdkVersion = true && this.isSetSdkVersion();
      boolean that_present_sdkVersion = true && that.isSetSdkVersion();
      if (this_present_sdkVersion || that_present_sdkVersion) {
        if (!(this_present_sdkVersion && that_present_sdkVersion))
          return false;
        if (!this.sdkVersion.equals(that.sdkVersion))
          return false;
      }

      boolean this_present_packageNames = true && this.isSetPackageNames();
      boolean that_present_packageNames = true && that.isSetPackageNames();
      if (this_present_packageNames || that_present_packageNames) {
        if (!(this_present_packageNames && that_present_packageNames))
          return false;
        if (!this.packageNames.equals(that.packageNames))
          return false;
      }

      boolean this_present_zaloId = true && this.isSetZaloId();
      boolean that_present_zaloId = true && that.isSetZaloId();
      if (this_present_zaloId || that_present_zaloId) {
        if (!(this_present_zaloId && that_present_zaloId))
          return false;
        if (!this.zaloId.equals(that.zaloId))
          return false;
      }

      boolean this_present_appuser = true && this.isSetAppuser();
      boolean that_present_appuser = true && that.isSetAppuser();
      if (this_present_appuser || that_present_appuser) {
        if (!(this_present_appuser && that_present_appuser))
          return false;
        if (!this.appuser.equals(that.appuser))
          return false;
      }

      boolean this_present_time = true;
      boolean that_present_time = true;
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (this.time != that.time)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(pushAndroidNoti_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      pushAndroidNoti_args typedOther = (pushAndroidNoti_args)other;

      lastComparison = Boolean.valueOf(isSetAppId()).compareTo(typedOther.isSetAppId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, typedOther.appId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNoti()).compareTo(typedOther.isSetNoti());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNoti()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noti, typedOther.noti);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAppVersion()).compareTo(typedOther.isSetAppVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appVersion, typedOther.appVersion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOsVersion()).compareTo(typedOther.isSetOsVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOsVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.osVersion, typedOther.osVersion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSdkVersion()).compareTo(typedOther.isSetSdkVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSdkVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sdkVersion, typedOther.sdkVersion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPackageNames()).compareTo(typedOther.isSetPackageNames());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPackageNames()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.packageNames, typedOther.packageNames);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetZaloId()).compareTo(typedOther.isSetZaloId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetZaloId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zaloId, typedOther.zaloId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAppuser()).compareTo(typedOther.isSetAppuser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppuser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appuser, typedOther.appuser);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(typedOther.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, typedOther.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pushAndroidNoti_args(");
      boolean first = true;

      sb.append("appId:");
      sb.append(this.appId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("noti:");
      if (this.noti == null) {
        sb.append("null");
      } else {
        sb.append(this.noti);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("appVersion:");
      if (this.appVersion == null) {
        sb.append("null");
      } else {
        sb.append(this.appVersion);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("osVersion:");
      if (this.osVersion == null) {
        sb.append("null");
      } else {
        sb.append(this.osVersion);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sdkVersion:");
      if (this.sdkVersion == null) {
        sb.append("null");
      } else {
        sb.append(this.sdkVersion);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("packageNames:");
      if (this.packageNames == null) {
        sb.append("null");
      } else {
        sb.append(this.packageNames);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("zaloId:");
      if (this.zaloId == null) {
        sb.append("null");
      } else {
        sb.append(this.zaloId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("appuser:");
      if (this.appuser == null) {
        sb.append("null");
      } else {
        sb.append(this.appuser);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      sb.append(this.time);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (noti != null) {
        noti.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pushAndroidNoti_argsStandardSchemeFactory implements SchemeFactory {
      public pushAndroidNoti_argsStandardScheme getScheme() {
        return new pushAndroidNoti_argsStandardScheme();
      }
    }

    private static class pushAndroidNoti_argsStandardScheme extends StandardScheme<pushAndroidNoti_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pushAndroidNoti_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.appId = iprot.readI32();
                struct.setAppIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NOTI
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.noti = new Noti();
                struct.noti.read(iprot);
                struct.setNotiIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // APP_VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list160 = iprot.readListBegin();
                  struct.appVersion = new ArrayList<String>(_list160.size);
                  for (int _i161 = 0; _i161 < _list160.size; ++_i161)
                  {
                    String _elem162; // required
                    _elem162 = iprot.readString();
                    struct.appVersion.add(_elem162);
                  }
                  iprot.readListEnd();
                }
                struct.setAppVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OS_VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list163 = iprot.readListBegin();
                  struct.osVersion = new ArrayList<String>(_list163.size);
                  for (int _i164 = 0; _i164 < _list163.size; ++_i164)
                  {
                    String _elem165; // required
                    _elem165 = iprot.readString();
                    struct.osVersion.add(_elem165);
                  }
                  iprot.readListEnd();
                }
                struct.setOsVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SDK_VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list166 = iprot.readListBegin();
                  struct.sdkVersion = new ArrayList<String>(_list166.size);
                  for (int _i167 = 0; _i167 < _list166.size; ++_i167)
                  {
                    String _elem168; // required
                    _elem168 = iprot.readString();
                    struct.sdkVersion.add(_elem168);
                  }
                  iprot.readListEnd();
                }
                struct.setSdkVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // PACKAGE_NAMES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list169 = iprot.readListBegin();
                  struct.packageNames = new ArrayList<String>(_list169.size);
                  for (int _i170 = 0; _i170 < _list169.size; ++_i170)
                  {
                    String _elem171; // required
                    _elem171 = iprot.readString();
                    struct.packageNames.add(_elem171);
                  }
                  iprot.readListEnd();
                }
                struct.setPackageNamesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // ZALO_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list172 = iprot.readListBegin();
                  struct.zaloId = new ArrayList<Long>(_list172.size);
                  for (int _i173 = 0; _i173 < _list172.size; ++_i173)
                  {
                    long _elem174; // required
                    _elem174 = iprot.readI64();
                    struct.zaloId.add(_elem174);
                  }
                  iprot.readListEnd();
                }
                struct.setZaloIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // APPUSER
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list175 = iprot.readListBegin();
                  struct.appuser = new ArrayList<String>(_list175.size);
                  for (int _i176 = 0; _i176 < _list175.size; ++_i176)
                  {
                    String _elem177; // required
                    _elem177 = iprot.readString();
                    struct.appuser.add(_elem177);
                  }
                  iprot.readListEnd();
                }
                struct.setAppuserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.time = iprot.readI64();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pushAndroidNoti_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(APP_ID_FIELD_DESC);
        oprot.writeI32(struct.appId);
        oprot.writeFieldEnd();
        if (struct.noti != null) {
          oprot.writeFieldBegin(NOTI_FIELD_DESC);
          struct.noti.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.appVersion != null) {
          oprot.writeFieldBegin(APP_VERSION_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.appVersion.size()));
            for (String _iter178 : struct.appVersion)
            {
              oprot.writeString(_iter178);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.osVersion != null) {
          oprot.writeFieldBegin(OS_VERSION_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.osVersion.size()));
            for (String _iter179 : struct.osVersion)
            {
              oprot.writeString(_iter179);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.sdkVersion != null) {
          oprot.writeFieldBegin(SDK_VERSION_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.sdkVersion.size()));
            for (String _iter180 : struct.sdkVersion)
            {
              oprot.writeString(_iter180);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.packageNames != null) {
          oprot.writeFieldBegin(PACKAGE_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.packageNames.size()));
            for (String _iter181 : struct.packageNames)
            {
              oprot.writeString(_iter181);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.zaloId != null) {
          oprot.writeFieldBegin(ZALO_ID_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.zaloId.size()));
            for (long _iter182 : struct.zaloId)
            {
              oprot.writeI64(_iter182);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.appuser != null) {
          oprot.writeFieldBegin(APPUSER_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.appuser.size()));
            for (String _iter183 : struct.appuser)
            {
              oprot.writeString(_iter183);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeI64(struct.time);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pushAndroidNoti_argsTupleSchemeFactory implements SchemeFactory {
      public pushAndroidNoti_argsTupleScheme getScheme() {
        return new pushAndroidNoti_argsTupleScheme();
      }
    }

    private static class pushAndroidNoti_argsTupleScheme extends TupleScheme<pushAndroidNoti_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pushAndroidNoti_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAppId()) {
          optionals.set(0);
        }
        if (struct.isSetNoti()) {
          optionals.set(1);
        }
        if (struct.isSetAppVersion()) {
          optionals.set(2);
        }
        if (struct.isSetOsVersion()) {
          optionals.set(3);
        }
        if (struct.isSetSdkVersion()) {
          optionals.set(4);
        }
        if (struct.isSetPackageNames()) {
          optionals.set(5);
        }
        if (struct.isSetZaloId()) {
          optionals.set(6);
        }
        if (struct.isSetAppuser()) {
          optionals.set(7);
        }
        if (struct.isSetTime()) {
          optionals.set(8);
        }
        oprot.writeBitSet(optionals, 9);
        if (struct.isSetAppId()) {
          oprot.writeI32(struct.appId);
        }
        if (struct.isSetNoti()) {
          struct.noti.write(oprot);
        }
        if (struct.isSetAppVersion()) {
          {
            oprot.writeI32(struct.appVersion.size());
            for (String _iter184 : struct.appVersion)
            {
              oprot.writeString(_iter184);
            }
          }
        }
        if (struct.isSetOsVersion()) {
          {
            oprot.writeI32(struct.osVersion.size());
            for (String _iter185 : struct.osVersion)
            {
              oprot.writeString(_iter185);
            }
          }
        }
        if (struct.isSetSdkVersion()) {
          {
            oprot.writeI32(struct.sdkVersion.size());
            for (String _iter186 : struct.sdkVersion)
            {
              oprot.writeString(_iter186);
            }
          }
        }
        if (struct.isSetPackageNames()) {
          {
            oprot.writeI32(struct.packageNames.size());
            for (String _iter187 : struct.packageNames)
            {
              oprot.writeString(_iter187);
            }
          }
        }
        if (struct.isSetZaloId()) {
          {
            oprot.writeI32(struct.zaloId.size());
            for (long _iter188 : struct.zaloId)
            {
              oprot.writeI64(_iter188);
            }
          }
        }
        if (struct.isSetAppuser()) {
          {
            oprot.writeI32(struct.appuser.size());
            for (String _iter189 : struct.appuser)
            {
              oprot.writeString(_iter189);
            }
          }
        }
        if (struct.isSetTime()) {
          oprot.writeI64(struct.time);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pushAndroidNoti_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(9);
        if (incoming.get(0)) {
          struct.appId = iprot.readI32();
          struct.setAppIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.noti = new Noti();
          struct.noti.read(iprot);
          struct.setNotiIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list190 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.appVersion = new ArrayList<String>(_list190.size);
            for (int _i191 = 0; _i191 < _list190.size; ++_i191)
            {
              String _elem192; // required
              _elem192 = iprot.readString();
              struct.appVersion.add(_elem192);
            }
          }
          struct.setAppVersionIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list193 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.osVersion = new ArrayList<String>(_list193.size);
            for (int _i194 = 0; _i194 < _list193.size; ++_i194)
            {
              String _elem195; // required
              _elem195 = iprot.readString();
              struct.osVersion.add(_elem195);
            }
          }
          struct.setOsVersionIsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TList _list196 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.sdkVersion = new ArrayList<String>(_list196.size);
            for (int _i197 = 0; _i197 < _list196.size; ++_i197)
            {
              String _elem198; // required
              _elem198 = iprot.readString();
              struct.sdkVersion.add(_elem198);
            }
          }
          struct.setSdkVersionIsSet(true);
        }
        if (incoming.get(5)) {
          {
            org.apache.thrift.protocol.TList _list199 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.packageNames = new ArrayList<String>(_list199.size);
            for (int _i200 = 0; _i200 < _list199.size; ++_i200)
            {
              String _elem201; // required
              _elem201 = iprot.readString();
              struct.packageNames.add(_elem201);
            }
          }
          struct.setPackageNamesIsSet(true);
        }
        if (incoming.get(6)) {
          {
            org.apache.thrift.protocol.TList _list202 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.zaloId = new ArrayList<Long>(_list202.size);
            for (int _i203 = 0; _i203 < _list202.size; ++_i203)
            {
              long _elem204; // required
              _elem204 = iprot.readI64();
              struct.zaloId.add(_elem204);
            }
          }
          struct.setZaloIdIsSet(true);
        }
        if (incoming.get(7)) {
          {
            org.apache.thrift.protocol.TList _list205 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.appuser = new ArrayList<String>(_list205.size);
            for (int _i206 = 0; _i206 < _list205.size; ++_i206)
            {
              String _elem207; // required
              _elem207 = iprot.readString();
              struct.appuser.add(_elem207);
            }
          }
          struct.setAppuserIsSet(true);
        }
        if (incoming.get(8)) {
          struct.time = iprot.readI64();
          struct.setTimeIsSet(true);
        }
      }
    }

  }

  public static class pushAndroidNoti_result implements org.apache.thrift.TBase<pushAndroidNoti_result, pushAndroidNoti_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pushAndroidNoti_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pushAndroidNoti_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pushAndroidNoti_resultTupleSchemeFactory());
    }

    public PushNotiResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PushNotiResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pushAndroidNoti_result.class, metaDataMap);
    }

    public pushAndroidNoti_result() {
    }

    public pushAndroidNoti_result(
      PushNotiResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pushAndroidNoti_result(pushAndroidNoti_result other) {
      if (other.isSetSuccess()) {
        this.success = new PushNotiResult(other.success);
      }
    }

    public pushAndroidNoti_result deepCopy() {
      return new pushAndroidNoti_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public PushNotiResult getSuccess() {
      return this.success;
    }

    public pushAndroidNoti_result setSuccess(PushNotiResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PushNotiResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pushAndroidNoti_result)
        return this.equals((pushAndroidNoti_result)that);
      return false;
    }

    public boolean equals(pushAndroidNoti_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(pushAndroidNoti_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      pushAndroidNoti_result typedOther = (pushAndroidNoti_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pushAndroidNoti_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pushAndroidNoti_resultStandardSchemeFactory implements SchemeFactory {
      public pushAndroidNoti_resultStandardScheme getScheme() {
        return new pushAndroidNoti_resultStandardScheme();
      }
    }

    private static class pushAndroidNoti_resultStandardScheme extends StandardScheme<pushAndroidNoti_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pushAndroidNoti_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PushNotiResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pushAndroidNoti_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pushAndroidNoti_resultTupleSchemeFactory implements SchemeFactory {
      public pushAndroidNoti_resultTupleScheme getScheme() {
        return new pushAndroidNoti_resultTupleScheme();
      }
    }

    private static class pushAndroidNoti_resultTupleScheme extends TupleScheme<pushAndroidNoti_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pushAndroidNoti_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pushAndroidNoti_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new PushNotiResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class pushIosNoti_args implements org.apache.thrift.TBase<pushIosNoti_args, pushIosNoti_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pushIosNoti_args");

    private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField NOTI_FIELD_DESC = new org.apache.thrift.protocol.TField("noti", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField APP_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("appVersion", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField OS_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("osVersion", org.apache.thrift.protocol.TType.LIST, (short)4);
    private static final org.apache.thrift.protocol.TField SDK_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("sdkVersion", org.apache.thrift.protocol.TType.LIST, (short)5);
    private static final org.apache.thrift.protocol.TField PACKAGE_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("packageNames", org.apache.thrift.protocol.TType.LIST, (short)6);
    private static final org.apache.thrift.protocol.TField ZALO_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("zaloId", org.apache.thrift.protocol.TType.LIST, (short)7);
    private static final org.apache.thrift.protocol.TField APPUSER_FIELD_DESC = new org.apache.thrift.protocol.TField("appuser", org.apache.thrift.protocol.TType.LIST, (short)8);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I64, (short)9);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pushIosNoti_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pushIosNoti_argsTupleSchemeFactory());
    }

    public int appId; // required
    public Noti noti; // required
    public List<String> appVersion; // required
    public List<String> osVersion; // required
    public List<String> sdkVersion; // required
    public List<String> packageNames; // required
    public List<Long> zaloId; // required
    public List<String> appuser; // required
    public long time; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APP_ID((short)1, "appId"),
      NOTI((short)2, "noti"),
      APP_VERSION((short)3, "appVersion"),
      OS_VERSION((short)4, "osVersion"),
      SDK_VERSION((short)5, "sdkVersion"),
      PACKAGE_NAMES((short)6, "packageNames"),
      ZALO_ID((short)7, "zaloId"),
      APPUSER((short)8, "appuser"),
      TIME((short)9, "time");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_ID
            return APP_ID;
          case 2: // NOTI
            return NOTI;
          case 3: // APP_VERSION
            return APP_VERSION;
          case 4: // OS_VERSION
            return OS_VERSION;
          case 5: // SDK_VERSION
            return SDK_VERSION;
          case 6: // PACKAGE_NAMES
            return PACKAGE_NAMES;
          case 7: // ZALO_ID
            return ZALO_ID;
          case 8: // APPUSER
            return APPUSER;
          case 9: // TIME
            return TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __APPID_ISSET_ID = 0;
    private static final int __TIME_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NOTI, new org.apache.thrift.meta_data.FieldMetaData("noti", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Noti.class)));
      tmpMap.put(_Fields.APP_VERSION, new org.apache.thrift.meta_data.FieldMetaData("appVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.OS_VERSION, new org.apache.thrift.meta_data.FieldMetaData("osVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.SDK_VERSION, new org.apache.thrift.meta_data.FieldMetaData("sdkVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.PACKAGE_NAMES, new org.apache.thrift.meta_data.FieldMetaData("packageNames", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.ZALO_ID, new org.apache.thrift.meta_data.FieldMetaData("zaloId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.APPUSER, new org.apache.thrift.meta_data.FieldMetaData("appuser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pushIosNoti_args.class, metaDataMap);
    }

    public pushIosNoti_args() {
    }

    public pushIosNoti_args(
      int appId,
      Noti noti,
      List<String> appVersion,
      List<String> osVersion,
      List<String> sdkVersion,
      List<String> packageNames,
      List<Long> zaloId,
      List<String> appuser,
      long time)
    {
      this();
      this.appId = appId;
      setAppIdIsSet(true);
      this.noti = noti;
      this.appVersion = appVersion;
      this.osVersion = osVersion;
      this.sdkVersion = sdkVersion;
      this.packageNames = packageNames;
      this.zaloId = zaloId;
      this.appuser = appuser;
      this.time = time;
      setTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pushIosNoti_args(pushIosNoti_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.appId = other.appId;
      if (other.isSetNoti()) {
        this.noti = new Noti(other.noti);
      }
      if (other.isSetAppVersion()) {
        List<String> __this__appVersion = new ArrayList<String>();
        for (String other_element : other.appVersion) {
          __this__appVersion.add(other_element);
        }
        this.appVersion = __this__appVersion;
      }
      if (other.isSetOsVersion()) {
        List<String> __this__osVersion = new ArrayList<String>();
        for (String other_element : other.osVersion) {
          __this__osVersion.add(other_element);
        }
        this.osVersion = __this__osVersion;
      }
      if (other.isSetSdkVersion()) {
        List<String> __this__sdkVersion = new ArrayList<String>();
        for (String other_element : other.sdkVersion) {
          __this__sdkVersion.add(other_element);
        }
        this.sdkVersion = __this__sdkVersion;
      }
      if (other.isSetPackageNames()) {
        List<String> __this__packageNames = new ArrayList<String>();
        for (String other_element : other.packageNames) {
          __this__packageNames.add(other_element);
        }
        this.packageNames = __this__packageNames;
      }
      if (other.isSetZaloId()) {
        List<Long> __this__zaloId = new ArrayList<Long>();
        for (Long other_element : other.zaloId) {
          __this__zaloId.add(other_element);
        }
        this.zaloId = __this__zaloId;
      }
      if (other.isSetAppuser()) {
        List<String> __this__appuser = new ArrayList<String>();
        for (String other_element : other.appuser) {
          __this__appuser.add(other_element);
        }
        this.appuser = __this__appuser;
      }
      this.time = other.time;
    }

    public pushIosNoti_args deepCopy() {
      return new pushIosNoti_args(this);
    }

    @Override
    public void clear() {
      setAppIdIsSet(false);
      this.appId = 0;
      this.noti = null;
      this.appVersion = null;
      this.osVersion = null;
      this.sdkVersion = null;
      this.packageNames = null;
      this.zaloId = null;
      this.appuser = null;
      setTimeIsSet(false);
      this.time = 0;
    }

    public int getAppId() {
      return this.appId;
    }

    public pushIosNoti_args setAppId(int appId) {
      this.appId = appId;
      setAppIdIsSet(true);
      return this;
    }

    public void unsetAppId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPID_ISSET_ID);
    }

    /** Returns true if field appId is set (has been assigned a value) and false otherwise */
    public boolean isSetAppId() {
      return EncodingUtils.testBit(__isset_bitfield, __APPID_ISSET_ID);
    }

    public void setAppIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPID_ISSET_ID, value);
    }

    public Noti getNoti() {
      return this.noti;
    }

    public pushIosNoti_args setNoti(Noti noti) {
      this.noti = noti;
      return this;
    }

    public void unsetNoti() {
      this.noti = null;
    }

    /** Returns true if field noti is set (has been assigned a value) and false otherwise */
    public boolean isSetNoti() {
      return this.noti != null;
    }

    public void setNotiIsSet(boolean value) {
      if (!value) {
        this.noti = null;
      }
    }

    public int getAppVersionSize() {
      return (this.appVersion == null) ? 0 : this.appVersion.size();
    }

    public java.util.Iterator<String> getAppVersionIterator() {
      return (this.appVersion == null) ? null : this.appVersion.iterator();
    }

    public void addToAppVersion(String elem) {
      if (this.appVersion == null) {
        this.appVersion = new ArrayList<String>();
      }
      this.appVersion.add(elem);
    }

    public List<String> getAppVersion() {
      return this.appVersion;
    }

    public pushIosNoti_args setAppVersion(List<String> appVersion) {
      this.appVersion = appVersion;
      return this;
    }

    public void unsetAppVersion() {
      this.appVersion = null;
    }

    /** Returns true if field appVersion is set (has been assigned a value) and false otherwise */
    public boolean isSetAppVersion() {
      return this.appVersion != null;
    }

    public void setAppVersionIsSet(boolean value) {
      if (!value) {
        this.appVersion = null;
      }
    }

    public int getOsVersionSize() {
      return (this.osVersion == null) ? 0 : this.osVersion.size();
    }

    public java.util.Iterator<String> getOsVersionIterator() {
      return (this.osVersion == null) ? null : this.osVersion.iterator();
    }

    public void addToOsVersion(String elem) {
      if (this.osVersion == null) {
        this.osVersion = new ArrayList<String>();
      }
      this.osVersion.add(elem);
    }

    public List<String> getOsVersion() {
      return this.osVersion;
    }

    public pushIosNoti_args setOsVersion(List<String> osVersion) {
      this.osVersion = osVersion;
      return this;
    }

    public void unsetOsVersion() {
      this.osVersion = null;
    }

    /** Returns true if field osVersion is set (has been assigned a value) and false otherwise */
    public boolean isSetOsVersion() {
      return this.osVersion != null;
    }

    public void setOsVersionIsSet(boolean value) {
      if (!value) {
        this.osVersion = null;
      }
    }

    public int getSdkVersionSize() {
      return (this.sdkVersion == null) ? 0 : this.sdkVersion.size();
    }

    public java.util.Iterator<String> getSdkVersionIterator() {
      return (this.sdkVersion == null) ? null : this.sdkVersion.iterator();
    }

    public void addToSdkVersion(String elem) {
      if (this.sdkVersion == null) {
        this.sdkVersion = new ArrayList<String>();
      }
      this.sdkVersion.add(elem);
    }

    public List<String> getSdkVersion() {
      return this.sdkVersion;
    }

    public pushIosNoti_args setSdkVersion(List<String> sdkVersion) {
      this.sdkVersion = sdkVersion;
      return this;
    }

    public void unsetSdkVersion() {
      this.sdkVersion = null;
    }

    /** Returns true if field sdkVersion is set (has been assigned a value) and false otherwise */
    public boolean isSetSdkVersion() {
      return this.sdkVersion != null;
    }

    public void setSdkVersionIsSet(boolean value) {
      if (!value) {
        this.sdkVersion = null;
      }
    }

    public int getPackageNamesSize() {
      return (this.packageNames == null) ? 0 : this.packageNames.size();
    }

    public java.util.Iterator<String> getPackageNamesIterator() {
      return (this.packageNames == null) ? null : this.packageNames.iterator();
    }

    public void addToPackageNames(String elem) {
      if (this.packageNames == null) {
        this.packageNames = new ArrayList<String>();
      }
      this.packageNames.add(elem);
    }

    public List<String> getPackageNames() {
      return this.packageNames;
    }

    public pushIosNoti_args setPackageNames(List<String> packageNames) {
      this.packageNames = packageNames;
      return this;
    }

    public void unsetPackageNames() {
      this.packageNames = null;
    }

    /** Returns true if field packageNames is set (has been assigned a value) and false otherwise */
    public boolean isSetPackageNames() {
      return this.packageNames != null;
    }

    public void setPackageNamesIsSet(boolean value) {
      if (!value) {
        this.packageNames = null;
      }
    }

    public int getZaloIdSize() {
      return (this.zaloId == null) ? 0 : this.zaloId.size();
    }

    public java.util.Iterator<Long> getZaloIdIterator() {
      return (this.zaloId == null) ? null : this.zaloId.iterator();
    }

    public void addToZaloId(long elem) {
      if (this.zaloId == null) {
        this.zaloId = new ArrayList<Long>();
      }
      this.zaloId.add(elem);
    }

    public List<Long> getZaloId() {
      return this.zaloId;
    }

    public pushIosNoti_args setZaloId(List<Long> zaloId) {
      this.zaloId = zaloId;
      return this;
    }

    public void unsetZaloId() {
      this.zaloId = null;
    }

    /** Returns true if field zaloId is set (has been assigned a value) and false otherwise */
    public boolean isSetZaloId() {
      return this.zaloId != null;
    }

    public void setZaloIdIsSet(boolean value) {
      if (!value) {
        this.zaloId = null;
      }
    }

    public int getAppuserSize() {
      return (this.appuser == null) ? 0 : this.appuser.size();
    }

    public java.util.Iterator<String> getAppuserIterator() {
      return (this.appuser == null) ? null : this.appuser.iterator();
    }

    public void addToAppuser(String elem) {
      if (this.appuser == null) {
        this.appuser = new ArrayList<String>();
      }
      this.appuser.add(elem);
    }

    public List<String> getAppuser() {
      return this.appuser;
    }

    public pushIosNoti_args setAppuser(List<String> appuser) {
      this.appuser = appuser;
      return this;
    }

    public void unsetAppuser() {
      this.appuser = null;
    }

    /** Returns true if field appuser is set (has been assigned a value) and false otherwise */
    public boolean isSetAppuser() {
      return this.appuser != null;
    }

    public void setAppuserIsSet(boolean value) {
      if (!value) {
        this.appuser = null;
      }
    }

    public long getTime() {
      return this.time;
    }

    public pushIosNoti_args setTime(long time) {
      this.time = time;
      setTimeIsSet(true);
      return this;
    }

    public void unsetTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIME_ISSET_ID);
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return EncodingUtils.testBit(__isset_bitfield, __TIME_ISSET_ID);
    }

    public void setTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_ID:
        if (value == null) {
          unsetAppId();
        } else {
          setAppId((Integer)value);
        }
        break;

      case NOTI:
        if (value == null) {
          unsetNoti();
        } else {
          setNoti((Noti)value);
        }
        break;

      case APP_VERSION:
        if (value == null) {
          unsetAppVersion();
        } else {
          setAppVersion((List<String>)value);
        }
        break;

      case OS_VERSION:
        if (value == null) {
          unsetOsVersion();
        } else {
          setOsVersion((List<String>)value);
        }
        break;

      case SDK_VERSION:
        if (value == null) {
          unsetSdkVersion();
        } else {
          setSdkVersion((List<String>)value);
        }
        break;

      case PACKAGE_NAMES:
        if (value == null) {
          unsetPackageNames();
        } else {
          setPackageNames((List<String>)value);
        }
        break;

      case ZALO_ID:
        if (value == null) {
          unsetZaloId();
        } else {
          setZaloId((List<Long>)value);
        }
        break;

      case APPUSER:
        if (value == null) {
          unsetAppuser();
        } else {
          setAppuser((List<String>)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_ID:
        return Integer.valueOf(getAppId());

      case NOTI:
        return getNoti();

      case APP_VERSION:
        return getAppVersion();

      case OS_VERSION:
        return getOsVersion();

      case SDK_VERSION:
        return getSdkVersion();

      case PACKAGE_NAMES:
        return getPackageNames();

      case ZALO_ID:
        return getZaloId();

      case APPUSER:
        return getAppuser();

      case TIME:
        return Long.valueOf(getTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_ID:
        return isSetAppId();
      case NOTI:
        return isSetNoti();
      case APP_VERSION:
        return isSetAppVersion();
      case OS_VERSION:
        return isSetOsVersion();
      case SDK_VERSION:
        return isSetSdkVersion();
      case PACKAGE_NAMES:
        return isSetPackageNames();
      case ZALO_ID:
        return isSetZaloId();
      case APPUSER:
        return isSetAppuser();
      case TIME:
        return isSetTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pushIosNoti_args)
        return this.equals((pushIosNoti_args)that);
      return false;
    }

    public boolean equals(pushIosNoti_args that) {
      if (that == null)
        return false;

      boolean this_present_appId = true;
      boolean that_present_appId = true;
      if (this_present_appId || that_present_appId) {
        if (!(this_present_appId && that_present_appId))
          return false;
        if (this.appId != that.appId)
          return false;
      }

      boolean this_present_noti = true && this.isSetNoti();
      boolean that_present_noti = true && that.isSetNoti();
      if (this_present_noti || that_present_noti) {
        if (!(this_present_noti && that_present_noti))
          return false;
        if (!this.noti.equals(that.noti))
          return false;
      }

      boolean this_present_appVersion = true && this.isSetAppVersion();
      boolean that_present_appVersion = true && that.isSetAppVersion();
      if (this_present_appVersion || that_present_appVersion) {
        if (!(this_present_appVersion && that_present_appVersion))
          return false;
        if (!this.appVersion.equals(that.appVersion))
          return false;
      }

      boolean this_present_osVersion = true && this.isSetOsVersion();
      boolean that_present_osVersion = true && that.isSetOsVersion();
      if (this_present_osVersion || that_present_osVersion) {
        if (!(this_present_osVersion && that_present_osVersion))
          return false;
        if (!this.osVersion.equals(that.osVersion))
          return false;
      }

      boolean this_present_sdkVersion = true && this.isSetSdkVersion();
      boolean that_present_sdkVersion = true && that.isSetSdkVersion();
      if (this_present_sdkVersion || that_present_sdkVersion) {
        if (!(this_present_sdkVersion && that_present_sdkVersion))
          return false;
        if (!this.sdkVersion.equals(that.sdkVersion))
          return false;
      }

      boolean this_present_packageNames = true && this.isSetPackageNames();
      boolean that_present_packageNames = true && that.isSetPackageNames();
      if (this_present_packageNames || that_present_packageNames) {
        if (!(this_present_packageNames && that_present_packageNames))
          return false;
        if (!this.packageNames.equals(that.packageNames))
          return false;
      }

      boolean this_present_zaloId = true && this.isSetZaloId();
      boolean that_present_zaloId = true && that.isSetZaloId();
      if (this_present_zaloId || that_present_zaloId) {
        if (!(this_present_zaloId && that_present_zaloId))
          return false;
        if (!this.zaloId.equals(that.zaloId))
          return false;
      }

      boolean this_present_appuser = true && this.isSetAppuser();
      boolean that_present_appuser = true && that.isSetAppuser();
      if (this_present_appuser || that_present_appuser) {
        if (!(this_present_appuser && that_present_appuser))
          return false;
        if (!this.appuser.equals(that.appuser))
          return false;
      }

      boolean this_present_time = true;
      boolean that_present_time = true;
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (this.time != that.time)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(pushIosNoti_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      pushIosNoti_args typedOther = (pushIosNoti_args)other;

      lastComparison = Boolean.valueOf(isSetAppId()).compareTo(typedOther.isSetAppId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, typedOther.appId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNoti()).compareTo(typedOther.isSetNoti());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNoti()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noti, typedOther.noti);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAppVersion()).compareTo(typedOther.isSetAppVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appVersion, typedOther.appVersion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOsVersion()).compareTo(typedOther.isSetOsVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOsVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.osVersion, typedOther.osVersion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSdkVersion()).compareTo(typedOther.isSetSdkVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSdkVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sdkVersion, typedOther.sdkVersion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPackageNames()).compareTo(typedOther.isSetPackageNames());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPackageNames()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.packageNames, typedOther.packageNames);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetZaloId()).compareTo(typedOther.isSetZaloId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetZaloId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zaloId, typedOther.zaloId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAppuser()).compareTo(typedOther.isSetAppuser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppuser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appuser, typedOther.appuser);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(typedOther.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, typedOther.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pushIosNoti_args(");
      boolean first = true;

      sb.append("appId:");
      sb.append(this.appId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("noti:");
      if (this.noti == null) {
        sb.append("null");
      } else {
        sb.append(this.noti);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("appVersion:");
      if (this.appVersion == null) {
        sb.append("null");
      } else {
        sb.append(this.appVersion);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("osVersion:");
      if (this.osVersion == null) {
        sb.append("null");
      } else {
        sb.append(this.osVersion);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sdkVersion:");
      if (this.sdkVersion == null) {
        sb.append("null");
      } else {
        sb.append(this.sdkVersion);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("packageNames:");
      if (this.packageNames == null) {
        sb.append("null");
      } else {
        sb.append(this.packageNames);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("zaloId:");
      if (this.zaloId == null) {
        sb.append("null");
      } else {
        sb.append(this.zaloId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("appuser:");
      if (this.appuser == null) {
        sb.append("null");
      } else {
        sb.append(this.appuser);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      sb.append(this.time);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (noti != null) {
        noti.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pushIosNoti_argsStandardSchemeFactory implements SchemeFactory {
      public pushIosNoti_argsStandardScheme getScheme() {
        return new pushIosNoti_argsStandardScheme();
      }
    }

    private static class pushIosNoti_argsStandardScheme extends StandardScheme<pushIosNoti_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pushIosNoti_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.appId = iprot.readI32();
                struct.setAppIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NOTI
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.noti = new Noti();
                struct.noti.read(iprot);
                struct.setNotiIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // APP_VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list208 = iprot.readListBegin();
                  struct.appVersion = new ArrayList<String>(_list208.size);
                  for (int _i209 = 0; _i209 < _list208.size; ++_i209)
                  {
                    String _elem210; // required
                    _elem210 = iprot.readString();
                    struct.appVersion.add(_elem210);
                  }
                  iprot.readListEnd();
                }
                struct.setAppVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OS_VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list211 = iprot.readListBegin();
                  struct.osVersion = new ArrayList<String>(_list211.size);
                  for (int _i212 = 0; _i212 < _list211.size; ++_i212)
                  {
                    String _elem213; // required
                    _elem213 = iprot.readString();
                    struct.osVersion.add(_elem213);
                  }
                  iprot.readListEnd();
                }
                struct.setOsVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SDK_VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list214 = iprot.readListBegin();
                  struct.sdkVersion = new ArrayList<String>(_list214.size);
                  for (int _i215 = 0; _i215 < _list214.size; ++_i215)
                  {
                    String _elem216; // required
                    _elem216 = iprot.readString();
                    struct.sdkVersion.add(_elem216);
                  }
                  iprot.readListEnd();
                }
                struct.setSdkVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // PACKAGE_NAMES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list217 = iprot.readListBegin();
                  struct.packageNames = new ArrayList<String>(_list217.size);
                  for (int _i218 = 0; _i218 < _list217.size; ++_i218)
                  {
                    String _elem219; // required
                    _elem219 = iprot.readString();
                    struct.packageNames.add(_elem219);
                  }
                  iprot.readListEnd();
                }
                struct.setPackageNamesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // ZALO_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list220 = iprot.readListBegin();
                  struct.zaloId = new ArrayList<Long>(_list220.size);
                  for (int _i221 = 0; _i221 < _list220.size; ++_i221)
                  {
                    long _elem222; // required
                    _elem222 = iprot.readI64();
                    struct.zaloId.add(_elem222);
                  }
                  iprot.readListEnd();
                }
                struct.setZaloIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // APPUSER
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list223 = iprot.readListBegin();
                  struct.appuser = new ArrayList<String>(_list223.size);
                  for (int _i224 = 0; _i224 < _list223.size; ++_i224)
                  {
                    String _elem225; // required
                    _elem225 = iprot.readString();
                    struct.appuser.add(_elem225);
                  }
                  iprot.readListEnd();
                }
                struct.setAppuserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.time = iprot.readI64();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pushIosNoti_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(APP_ID_FIELD_DESC);
        oprot.writeI32(struct.appId);
        oprot.writeFieldEnd();
        if (struct.noti != null) {
          oprot.writeFieldBegin(NOTI_FIELD_DESC);
          struct.noti.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.appVersion != null) {
          oprot.writeFieldBegin(APP_VERSION_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.appVersion.size()));
            for (String _iter226 : struct.appVersion)
            {
              oprot.writeString(_iter226);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.osVersion != null) {
          oprot.writeFieldBegin(OS_VERSION_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.osVersion.size()));
            for (String _iter227 : struct.osVersion)
            {
              oprot.writeString(_iter227);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.sdkVersion != null) {
          oprot.writeFieldBegin(SDK_VERSION_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.sdkVersion.size()));
            for (String _iter228 : struct.sdkVersion)
            {
              oprot.writeString(_iter228);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.packageNames != null) {
          oprot.writeFieldBegin(PACKAGE_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.packageNames.size()));
            for (String _iter229 : struct.packageNames)
            {
              oprot.writeString(_iter229);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.zaloId != null) {
          oprot.writeFieldBegin(ZALO_ID_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.zaloId.size()));
            for (long _iter230 : struct.zaloId)
            {
              oprot.writeI64(_iter230);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.appuser != null) {
          oprot.writeFieldBegin(APPUSER_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.appuser.size()));
            for (String _iter231 : struct.appuser)
            {
              oprot.writeString(_iter231);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeI64(struct.time);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pushIosNoti_argsTupleSchemeFactory implements SchemeFactory {
      public pushIosNoti_argsTupleScheme getScheme() {
        return new pushIosNoti_argsTupleScheme();
      }
    }

    private static class pushIosNoti_argsTupleScheme extends TupleScheme<pushIosNoti_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pushIosNoti_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAppId()) {
          optionals.set(0);
        }
        if (struct.isSetNoti()) {
          optionals.set(1);
        }
        if (struct.isSetAppVersion()) {
          optionals.set(2);
        }
        if (struct.isSetOsVersion()) {
          optionals.set(3);
        }
        if (struct.isSetSdkVersion()) {
          optionals.set(4);
        }
        if (struct.isSetPackageNames()) {
          optionals.set(5);
        }
        if (struct.isSetZaloId()) {
          optionals.set(6);
        }
        if (struct.isSetAppuser()) {
          optionals.set(7);
        }
        if (struct.isSetTime()) {
          optionals.set(8);
        }
        oprot.writeBitSet(optionals, 9);
        if (struct.isSetAppId()) {
          oprot.writeI32(struct.appId);
        }
        if (struct.isSetNoti()) {
          struct.noti.write(oprot);
        }
        if (struct.isSetAppVersion()) {
          {
            oprot.writeI32(struct.appVersion.size());
            for (String _iter232 : struct.appVersion)
            {
              oprot.writeString(_iter232);
            }
          }
        }
        if (struct.isSetOsVersion()) {
          {
            oprot.writeI32(struct.osVersion.size());
            for (String _iter233 : struct.osVersion)
            {
              oprot.writeString(_iter233);
            }
          }
        }
        if (struct.isSetSdkVersion()) {
          {
            oprot.writeI32(struct.sdkVersion.size());
            for (String _iter234 : struct.sdkVersion)
            {
              oprot.writeString(_iter234);
            }
          }
        }
        if (struct.isSetPackageNames()) {
          {
            oprot.writeI32(struct.packageNames.size());
            for (String _iter235 : struct.packageNames)
            {
              oprot.writeString(_iter235);
            }
          }
        }
        if (struct.isSetZaloId()) {
          {
            oprot.writeI32(struct.zaloId.size());
            for (long _iter236 : struct.zaloId)
            {
              oprot.writeI64(_iter236);
            }
          }
        }
        if (struct.isSetAppuser()) {
          {
            oprot.writeI32(struct.appuser.size());
            for (String _iter237 : struct.appuser)
            {
              oprot.writeString(_iter237);
            }
          }
        }
        if (struct.isSetTime()) {
          oprot.writeI64(struct.time);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pushIosNoti_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(9);
        if (incoming.get(0)) {
          struct.appId = iprot.readI32();
          struct.setAppIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.noti = new Noti();
          struct.noti.read(iprot);
          struct.setNotiIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list238 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.appVersion = new ArrayList<String>(_list238.size);
            for (int _i239 = 0; _i239 < _list238.size; ++_i239)
            {
              String _elem240; // required
              _elem240 = iprot.readString();
              struct.appVersion.add(_elem240);
            }
          }
          struct.setAppVersionIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list241 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.osVersion = new ArrayList<String>(_list241.size);
            for (int _i242 = 0; _i242 < _list241.size; ++_i242)
            {
              String _elem243; // required
              _elem243 = iprot.readString();
              struct.osVersion.add(_elem243);
            }
          }
          struct.setOsVersionIsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TList _list244 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.sdkVersion = new ArrayList<String>(_list244.size);
            for (int _i245 = 0; _i245 < _list244.size; ++_i245)
            {
              String _elem246; // required
              _elem246 = iprot.readString();
              struct.sdkVersion.add(_elem246);
            }
          }
          struct.setSdkVersionIsSet(true);
        }
        if (incoming.get(5)) {
          {
            org.apache.thrift.protocol.TList _list247 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.packageNames = new ArrayList<String>(_list247.size);
            for (int _i248 = 0; _i248 < _list247.size; ++_i248)
            {
              String _elem249; // required
              _elem249 = iprot.readString();
              struct.packageNames.add(_elem249);
            }
          }
          struct.setPackageNamesIsSet(true);
        }
        if (incoming.get(6)) {
          {
            org.apache.thrift.protocol.TList _list250 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.zaloId = new ArrayList<Long>(_list250.size);
            for (int _i251 = 0; _i251 < _list250.size; ++_i251)
            {
              long _elem252; // required
              _elem252 = iprot.readI64();
              struct.zaloId.add(_elem252);
            }
          }
          struct.setZaloIdIsSet(true);
        }
        if (incoming.get(7)) {
          {
            org.apache.thrift.protocol.TList _list253 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.appuser = new ArrayList<String>(_list253.size);
            for (int _i254 = 0; _i254 < _list253.size; ++_i254)
            {
              String _elem255; // required
              _elem255 = iprot.readString();
              struct.appuser.add(_elem255);
            }
          }
          struct.setAppuserIsSet(true);
        }
        if (incoming.get(8)) {
          struct.time = iprot.readI64();
          struct.setTimeIsSet(true);
        }
      }
    }

  }

  public static class pushIosNoti_result implements org.apache.thrift.TBase<pushIosNoti_result, pushIosNoti_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pushIosNoti_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pushIosNoti_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pushIosNoti_resultTupleSchemeFactory());
    }

    public PushNotiResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PushNotiResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pushIosNoti_result.class, metaDataMap);
    }

    public pushIosNoti_result() {
    }

    public pushIosNoti_result(
      PushNotiResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pushIosNoti_result(pushIosNoti_result other) {
      if (other.isSetSuccess()) {
        this.success = new PushNotiResult(other.success);
      }
    }

    public pushIosNoti_result deepCopy() {
      return new pushIosNoti_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public PushNotiResult getSuccess() {
      return this.success;
    }

    public pushIosNoti_result setSuccess(PushNotiResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PushNotiResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pushIosNoti_result)
        return this.equals((pushIosNoti_result)that);
      return false;
    }

    public boolean equals(pushIosNoti_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(pushIosNoti_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      pushIosNoti_result typedOther = (pushIosNoti_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pushIosNoti_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pushIosNoti_resultStandardSchemeFactory implements SchemeFactory {
      public pushIosNoti_resultStandardScheme getScheme() {
        return new pushIosNoti_resultStandardScheme();
      }
    }

    private static class pushIosNoti_resultStandardScheme extends StandardScheme<pushIosNoti_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pushIosNoti_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PushNotiResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pushIosNoti_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pushIosNoti_resultTupleSchemeFactory implements SchemeFactory {
      public pushIosNoti_resultTupleScheme getScheme() {
        return new pushIosNoti_resultTupleScheme();
      }
    }

    private static class pushIosNoti_resultTupleScheme extends TupleScheme<pushIosNoti_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pushIosNoti_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pushIosNoti_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new PushNotiResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class saveAndroidDeviceInfo_args implements org.apache.thrift.TBase<saveAndroidDeviceInfo_args, saveAndroidDeviceInfo_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveAndroidDeviceInfo_args");

    private static final org.apache.thrift.protocol.TField SDK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sdkId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("platform", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField APP_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("appVersion", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField OS_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("osVersion", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField SDK_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("sdkVersion", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField PACKAGE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("packageName", org.apache.thrift.protocol.TType.STRING, (short)8);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveAndroidDeviceInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveAndroidDeviceInfo_argsTupleSchemeFactory());
    }

    public long sdkId; // required
    public int appId; // required
    public String platform; // required
    public String token; // required
    public String appVersion; // required
    public String osVersion; // required
    public String sdkVersion; // required
    public String packageName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SDK_ID((short)1, "sdkId"),
      APP_ID((short)2, "appId"),
      PLATFORM((short)3, "platform"),
      TOKEN((short)4, "token"),
      APP_VERSION((short)5, "appVersion"),
      OS_VERSION((short)6, "osVersion"),
      SDK_VERSION((short)7, "sdkVersion"),
      PACKAGE_NAME((short)8, "packageName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SDK_ID
            return SDK_ID;
          case 2: // APP_ID
            return APP_ID;
          case 3: // PLATFORM
            return PLATFORM;
          case 4: // TOKEN
            return TOKEN;
          case 5: // APP_VERSION
            return APP_VERSION;
          case 6: // OS_VERSION
            return OS_VERSION;
          case 7: // SDK_VERSION
            return SDK_VERSION;
          case 8: // PACKAGE_NAME
            return PACKAGE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SDKID_ISSET_ID = 0;
    private static final int __APPID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SDK_ID, new org.apache.thrift.meta_data.FieldMetaData("sdkId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("platform", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.APP_VERSION, new org.apache.thrift.meta_data.FieldMetaData("appVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OS_VERSION, new org.apache.thrift.meta_data.FieldMetaData("osVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SDK_VERSION, new org.apache.thrift.meta_data.FieldMetaData("sdkVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PACKAGE_NAME, new org.apache.thrift.meta_data.FieldMetaData("packageName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveAndroidDeviceInfo_args.class, metaDataMap);
    }

    public saveAndroidDeviceInfo_args() {
    }

    public saveAndroidDeviceInfo_args(
      long sdkId,
      int appId,
      String platform,
      String token,
      String appVersion,
      String osVersion,
      String sdkVersion,
      String packageName)
    {
      this();
      this.sdkId = sdkId;
      setSdkIdIsSet(true);
      this.appId = appId;
      setAppIdIsSet(true);
      this.platform = platform;
      this.token = token;
      this.appVersion = appVersion;
      this.osVersion = osVersion;
      this.sdkVersion = sdkVersion;
      this.packageName = packageName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveAndroidDeviceInfo_args(saveAndroidDeviceInfo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.sdkId = other.sdkId;
      this.appId = other.appId;
      if (other.isSetPlatform()) {
        this.platform = other.platform;
      }
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetAppVersion()) {
        this.appVersion = other.appVersion;
      }
      if (other.isSetOsVersion()) {
        this.osVersion = other.osVersion;
      }
      if (other.isSetSdkVersion()) {
        this.sdkVersion = other.sdkVersion;
      }
      if (other.isSetPackageName()) {
        this.packageName = other.packageName;
      }
    }

    public saveAndroidDeviceInfo_args deepCopy() {
      return new saveAndroidDeviceInfo_args(this);
    }

    @Override
    public void clear() {
      setSdkIdIsSet(false);
      this.sdkId = 0;
      setAppIdIsSet(false);
      this.appId = 0;
      this.platform = null;
      this.token = null;
      this.appVersion = null;
      this.osVersion = null;
      this.sdkVersion = null;
      this.packageName = null;
    }

    public long getSdkId() {
      return this.sdkId;
    }

    public saveAndroidDeviceInfo_args setSdkId(long sdkId) {
      this.sdkId = sdkId;
      setSdkIdIsSet(true);
      return this;
    }

    public void unsetSdkId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SDKID_ISSET_ID);
    }

    /** Returns true if field sdkId is set (has been assigned a value) and false otherwise */
    public boolean isSetSdkId() {
      return EncodingUtils.testBit(__isset_bitfield, __SDKID_ISSET_ID);
    }

    public void setSdkIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SDKID_ISSET_ID, value);
    }

    public int getAppId() {
      return this.appId;
    }

    public saveAndroidDeviceInfo_args setAppId(int appId) {
      this.appId = appId;
      setAppIdIsSet(true);
      return this;
    }

    public void unsetAppId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPID_ISSET_ID);
    }

    /** Returns true if field appId is set (has been assigned a value) and false otherwise */
    public boolean isSetAppId() {
      return EncodingUtils.testBit(__isset_bitfield, __APPID_ISSET_ID);
    }

    public void setAppIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPID_ISSET_ID, value);
    }

    public String getPlatform() {
      return this.platform;
    }

    public saveAndroidDeviceInfo_args setPlatform(String platform) {
      this.platform = platform;
      return this;
    }

    public void unsetPlatform() {
      this.platform = null;
    }

    /** Returns true if field platform is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatform() {
      return this.platform != null;
    }

    public void setPlatformIsSet(boolean value) {
      if (!value) {
        this.platform = null;
      }
    }

    public String getToken() {
      return this.token;
    }

    public saveAndroidDeviceInfo_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getAppVersion() {
      return this.appVersion;
    }

    public saveAndroidDeviceInfo_args setAppVersion(String appVersion) {
      this.appVersion = appVersion;
      return this;
    }

    public void unsetAppVersion() {
      this.appVersion = null;
    }

    /** Returns true if field appVersion is set (has been assigned a value) and false otherwise */
    public boolean isSetAppVersion() {
      return this.appVersion != null;
    }

    public void setAppVersionIsSet(boolean value) {
      if (!value) {
        this.appVersion = null;
      }
    }

    public String getOsVersion() {
      return this.osVersion;
    }

    public saveAndroidDeviceInfo_args setOsVersion(String osVersion) {
      this.osVersion = osVersion;
      return this;
    }

    public void unsetOsVersion() {
      this.osVersion = null;
    }

    /** Returns true if field osVersion is set (has been assigned a value) and false otherwise */
    public boolean isSetOsVersion() {
      return this.osVersion != null;
    }

    public void setOsVersionIsSet(boolean value) {
      if (!value) {
        this.osVersion = null;
      }
    }

    public String getSdkVersion() {
      return this.sdkVersion;
    }

    public saveAndroidDeviceInfo_args setSdkVersion(String sdkVersion) {
      this.sdkVersion = sdkVersion;
      return this;
    }

    public void unsetSdkVersion() {
      this.sdkVersion = null;
    }

    /** Returns true if field sdkVersion is set (has been assigned a value) and false otherwise */
    public boolean isSetSdkVersion() {
      return this.sdkVersion != null;
    }

    public void setSdkVersionIsSet(boolean value) {
      if (!value) {
        this.sdkVersion = null;
      }
    }

    public String getPackageName() {
      return this.packageName;
    }

    public saveAndroidDeviceInfo_args setPackageName(String packageName) {
      this.packageName = packageName;
      return this;
    }

    public void unsetPackageName() {
      this.packageName = null;
    }

    /** Returns true if field packageName is set (has been assigned a value) and false otherwise */
    public boolean isSetPackageName() {
      return this.packageName != null;
    }

    public void setPackageNameIsSet(boolean value) {
      if (!value) {
        this.packageName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SDK_ID:
        if (value == null) {
          unsetSdkId();
        } else {
          setSdkId((Long)value);
        }
        break;

      case APP_ID:
        if (value == null) {
          unsetAppId();
        } else {
          setAppId((Integer)value);
        }
        break;

      case PLATFORM:
        if (value == null) {
          unsetPlatform();
        } else {
          setPlatform((String)value);
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case APP_VERSION:
        if (value == null) {
          unsetAppVersion();
        } else {
          setAppVersion((String)value);
        }
        break;

      case OS_VERSION:
        if (value == null) {
          unsetOsVersion();
        } else {
          setOsVersion((String)value);
        }
        break;

      case SDK_VERSION:
        if (value == null) {
          unsetSdkVersion();
        } else {
          setSdkVersion((String)value);
        }
        break;

      case PACKAGE_NAME:
        if (value == null) {
          unsetPackageName();
        } else {
          setPackageName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SDK_ID:
        return Long.valueOf(getSdkId());

      case APP_ID:
        return Integer.valueOf(getAppId());

      case PLATFORM:
        return getPlatform();

      case TOKEN:
        return getToken();

      case APP_VERSION:
        return getAppVersion();

      case OS_VERSION:
        return getOsVersion();

      case SDK_VERSION:
        return getSdkVersion();

      case PACKAGE_NAME:
        return getPackageName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SDK_ID:
        return isSetSdkId();
      case APP_ID:
        return isSetAppId();
      case PLATFORM:
        return isSetPlatform();
      case TOKEN:
        return isSetToken();
      case APP_VERSION:
        return isSetAppVersion();
      case OS_VERSION:
        return isSetOsVersion();
      case SDK_VERSION:
        return isSetSdkVersion();
      case PACKAGE_NAME:
        return isSetPackageName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveAndroidDeviceInfo_args)
        return this.equals((saveAndroidDeviceInfo_args)that);
      return false;
    }

    public boolean equals(saveAndroidDeviceInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_sdkId = true;
      boolean that_present_sdkId = true;
      if (this_present_sdkId || that_present_sdkId) {
        if (!(this_present_sdkId && that_present_sdkId))
          return false;
        if (this.sdkId != that.sdkId)
          return false;
      }

      boolean this_present_appId = true;
      boolean that_present_appId = true;
      if (this_present_appId || that_present_appId) {
        if (!(this_present_appId && that_present_appId))
          return false;
        if (this.appId != that.appId)
          return false;
      }

      boolean this_present_platform = true && this.isSetPlatform();
      boolean that_present_platform = true && that.isSetPlatform();
      if (this_present_platform || that_present_platform) {
        if (!(this_present_platform && that_present_platform))
          return false;
        if (!this.platform.equals(that.platform))
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_appVersion = true && this.isSetAppVersion();
      boolean that_present_appVersion = true && that.isSetAppVersion();
      if (this_present_appVersion || that_present_appVersion) {
        if (!(this_present_appVersion && that_present_appVersion))
          return false;
        if (!this.appVersion.equals(that.appVersion))
          return false;
      }

      boolean this_present_osVersion = true && this.isSetOsVersion();
      boolean that_present_osVersion = true && that.isSetOsVersion();
      if (this_present_osVersion || that_present_osVersion) {
        if (!(this_present_osVersion && that_present_osVersion))
          return false;
        if (!this.osVersion.equals(that.osVersion))
          return false;
      }

      boolean this_present_sdkVersion = true && this.isSetSdkVersion();
      boolean that_present_sdkVersion = true && that.isSetSdkVersion();
      if (this_present_sdkVersion || that_present_sdkVersion) {
        if (!(this_present_sdkVersion && that_present_sdkVersion))
          return false;
        if (!this.sdkVersion.equals(that.sdkVersion))
          return false;
      }

      boolean this_present_packageName = true && this.isSetPackageName();
      boolean that_present_packageName = true && that.isSetPackageName();
      if (this_present_packageName || that_present_packageName) {
        if (!(this_present_packageName && that_present_packageName))
          return false;
        if (!this.packageName.equals(that.packageName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveAndroidDeviceInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveAndroidDeviceInfo_args typedOther = (saveAndroidDeviceInfo_args)other;

      lastComparison = Boolean.valueOf(isSetSdkId()).compareTo(typedOther.isSetSdkId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSdkId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sdkId, typedOther.sdkId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAppId()).compareTo(typedOther.isSetAppId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, typedOther.appId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPlatform()).compareTo(typedOther.isSetPlatform());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatform()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platform, typedOther.platform);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAppVersion()).compareTo(typedOther.isSetAppVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appVersion, typedOther.appVersion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOsVersion()).compareTo(typedOther.isSetOsVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOsVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.osVersion, typedOther.osVersion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSdkVersion()).compareTo(typedOther.isSetSdkVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSdkVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sdkVersion, typedOther.sdkVersion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPackageName()).compareTo(typedOther.isSetPackageName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPackageName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.packageName, typedOther.packageName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveAndroidDeviceInfo_args(");
      boolean first = true;

      sb.append("sdkId:");
      sb.append(this.sdkId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("appId:");
      sb.append(this.appId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("platform:");
      if (this.platform == null) {
        sb.append("null");
      } else {
        sb.append(this.platform);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("appVersion:");
      if (this.appVersion == null) {
        sb.append("null");
      } else {
        sb.append(this.appVersion);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("osVersion:");
      if (this.osVersion == null) {
        sb.append("null");
      } else {
        sb.append(this.osVersion);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sdkVersion:");
      if (this.sdkVersion == null) {
        sb.append("null");
      } else {
        sb.append(this.sdkVersion);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("packageName:");
      if (this.packageName == null) {
        sb.append("null");
      } else {
        sb.append(this.packageName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveAndroidDeviceInfo_argsStandardSchemeFactory implements SchemeFactory {
      public saveAndroidDeviceInfo_argsStandardScheme getScheme() {
        return new saveAndroidDeviceInfo_argsStandardScheme();
      }
    }

    private static class saveAndroidDeviceInfo_argsStandardScheme extends StandardScheme<saveAndroidDeviceInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveAndroidDeviceInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SDK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.sdkId = iprot.readI64();
                struct.setSdkIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // APP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.appId = iprot.readI32();
                struct.setAppIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PLATFORM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.platform = iprot.readString();
                struct.setPlatformIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // APP_VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appVersion = iprot.readString();
                struct.setAppVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // OS_VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.osVersion = iprot.readString();
                struct.setOsVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // SDK_VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sdkVersion = iprot.readString();
                struct.setSdkVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // PACKAGE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.packageName = iprot.readString();
                struct.setPackageNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveAndroidDeviceInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SDK_ID_FIELD_DESC);
        oprot.writeI64(struct.sdkId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(APP_ID_FIELD_DESC);
        oprot.writeI32(struct.appId);
        oprot.writeFieldEnd();
        if (struct.platform != null) {
          oprot.writeFieldBegin(PLATFORM_FIELD_DESC);
          oprot.writeString(struct.platform);
          oprot.writeFieldEnd();
        }
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.appVersion != null) {
          oprot.writeFieldBegin(APP_VERSION_FIELD_DESC);
          oprot.writeString(struct.appVersion);
          oprot.writeFieldEnd();
        }
        if (struct.osVersion != null) {
          oprot.writeFieldBegin(OS_VERSION_FIELD_DESC);
          oprot.writeString(struct.osVersion);
          oprot.writeFieldEnd();
        }
        if (struct.sdkVersion != null) {
          oprot.writeFieldBegin(SDK_VERSION_FIELD_DESC);
          oprot.writeString(struct.sdkVersion);
          oprot.writeFieldEnd();
        }
        if (struct.packageName != null) {
          oprot.writeFieldBegin(PACKAGE_NAME_FIELD_DESC);
          oprot.writeString(struct.packageName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveAndroidDeviceInfo_argsTupleSchemeFactory implements SchemeFactory {
      public saveAndroidDeviceInfo_argsTupleScheme getScheme() {
        return new saveAndroidDeviceInfo_argsTupleScheme();
      }
    }

    private static class saveAndroidDeviceInfo_argsTupleScheme extends TupleScheme<saveAndroidDeviceInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveAndroidDeviceInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSdkId()) {
          optionals.set(0);
        }
        if (struct.isSetAppId()) {
          optionals.set(1);
        }
        if (struct.isSetPlatform()) {
          optionals.set(2);
        }
        if (struct.isSetToken()) {
          optionals.set(3);
        }
        if (struct.isSetAppVersion()) {
          optionals.set(4);
        }
        if (struct.isSetOsVersion()) {
          optionals.set(5);
        }
        if (struct.isSetSdkVersion()) {
          optionals.set(6);
        }
        if (struct.isSetPackageName()) {
          optionals.set(7);
        }
        oprot.writeBitSet(optionals, 8);
        if (struct.isSetSdkId()) {
          oprot.writeI64(struct.sdkId);
        }
        if (struct.isSetAppId()) {
          oprot.writeI32(struct.appId);
        }
        if (struct.isSetPlatform()) {
          oprot.writeString(struct.platform);
        }
        if (struct.isSetToken()) {
          oprot.writeString(struct.token);
        }
        if (struct.isSetAppVersion()) {
          oprot.writeString(struct.appVersion);
        }
        if (struct.isSetOsVersion()) {
          oprot.writeString(struct.osVersion);
        }
        if (struct.isSetSdkVersion()) {
          oprot.writeString(struct.sdkVersion);
        }
        if (struct.isSetPackageName()) {
          oprot.writeString(struct.packageName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveAndroidDeviceInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(8);
        if (incoming.get(0)) {
          struct.sdkId = iprot.readI64();
          struct.setSdkIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.appId = iprot.readI32();
          struct.setAppIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.platform = iprot.readString();
          struct.setPlatformIsSet(true);
        }
        if (incoming.get(3)) {
          struct.token = iprot.readString();
          struct.setTokenIsSet(true);
        }
        if (incoming.get(4)) {
          struct.appVersion = iprot.readString();
          struct.setAppVersionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.osVersion = iprot.readString();
          struct.setOsVersionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.sdkVersion = iprot.readString();
          struct.setSdkVersionIsSet(true);
        }
        if (incoming.get(7)) {
          struct.packageName = iprot.readString();
          struct.setPackageNameIsSet(true);
        }
      }
    }

  }

  public static class saveAndroidDeviceInfo_result implements org.apache.thrift.TBase<saveAndroidDeviceInfo_result, saveAndroidDeviceInfo_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveAndroidDeviceInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveAndroidDeviceInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveAndroidDeviceInfo_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveAndroidDeviceInfo_result.class, metaDataMap);
    }

    public saveAndroidDeviceInfo_result() {
    }

    public saveAndroidDeviceInfo_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveAndroidDeviceInfo_result(saveAndroidDeviceInfo_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public saveAndroidDeviceInfo_result deepCopy() {
      return new saveAndroidDeviceInfo_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public saveAndroidDeviceInfo_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveAndroidDeviceInfo_result)
        return this.equals((saveAndroidDeviceInfo_result)that);
      return false;
    }

    public boolean equals(saveAndroidDeviceInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveAndroidDeviceInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveAndroidDeviceInfo_result typedOther = (saveAndroidDeviceInfo_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveAndroidDeviceInfo_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveAndroidDeviceInfo_resultStandardSchemeFactory implements SchemeFactory {
      public saveAndroidDeviceInfo_resultStandardScheme getScheme() {
        return new saveAndroidDeviceInfo_resultStandardScheme();
      }
    }

    private static class saveAndroidDeviceInfo_resultStandardScheme extends StandardScheme<saveAndroidDeviceInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveAndroidDeviceInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveAndroidDeviceInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveAndroidDeviceInfo_resultTupleSchemeFactory implements SchemeFactory {
      public saveAndroidDeviceInfo_resultTupleScheme getScheme() {
        return new saveAndroidDeviceInfo_resultTupleScheme();
      }
    }

    private static class saveAndroidDeviceInfo_resultTupleScheme extends TupleScheme<saveAndroidDeviceInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveAndroidDeviceInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveAndroidDeviceInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getPushNotiTask_args implements org.apache.thrift.TBase<getPushNotiTask_args, getPushNotiTask_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPushNotiTask_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPushNotiTask_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPushNotiTask_argsTupleSchemeFactory());
    }

    public String requestId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPushNotiTask_args.class, metaDataMap);
    }

    public getPushNotiTask_args() {
    }

    public getPushNotiTask_args(
      String requestId)
    {
      this();
      this.requestId = requestId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPushNotiTask_args(getPushNotiTask_args other) {
      if (other.isSetRequestId()) {
        this.requestId = other.requestId;
      }
    }

    public getPushNotiTask_args deepCopy() {
      return new getPushNotiTask_args(this);
    }

    @Override
    public void clear() {
      this.requestId = null;
    }

    public String getRequestId() {
      return this.requestId;
    }

    public getPushNotiTask_args setRequestId(String requestId) {
      this.requestId = requestId;
      return this;
    }

    public void unsetRequestId() {
      this.requestId = null;
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return this.requestId != null;
    }

    public void setRequestIdIsSet(boolean value) {
      if (!value) {
        this.requestId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return getRequestId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPushNotiTask_args)
        return this.equals((getPushNotiTask_args)that);
      return false;
    }

    public boolean equals(getPushNotiTask_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true && this.isSetRequestId();
      boolean that_present_requestId = true && that.isSetRequestId();
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (!this.requestId.equals(that.requestId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPushNotiTask_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPushNotiTask_args typedOther = (getPushNotiTask_args)other;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(typedOther.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, typedOther.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPushNotiTask_args(");
      boolean first = true;

      sb.append("requestId:");
      if (this.requestId == null) {
        sb.append("null");
      } else {
        sb.append(this.requestId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPushNotiTask_argsStandardSchemeFactory implements SchemeFactory {
      public getPushNotiTask_argsStandardScheme getScheme() {
        return new getPushNotiTask_argsStandardScheme();
      }
    }

    private static class getPushNotiTask_argsStandardScheme extends StandardScheme<getPushNotiTask_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPushNotiTask_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.requestId = iprot.readString();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPushNotiTask_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.requestId != null) {
          oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
          oprot.writeString(struct.requestId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPushNotiTask_argsTupleSchemeFactory implements SchemeFactory {
      public getPushNotiTask_argsTupleScheme getScheme() {
        return new getPushNotiTask_argsTupleScheme();
      }
    }

    private static class getPushNotiTask_argsTupleScheme extends TupleScheme<getPushNotiTask_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPushNotiTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRequestId()) {
          oprot.writeString(struct.requestId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPushNotiTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.requestId = iprot.readString();
          struct.setRequestIdIsSet(true);
        }
      }
    }

  }

  public static class getPushNotiTask_result implements org.apache.thrift.TBase<getPushNotiTask_result, getPushNotiTask_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPushNotiTask_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPushNotiTask_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPushNotiTask_resultTupleSchemeFactory());
    }

    public GetPushNotiTask success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GetPushNotiTask.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPushNotiTask_result.class, metaDataMap);
    }

    public getPushNotiTask_result() {
    }

    public getPushNotiTask_result(
      GetPushNotiTask success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPushNotiTask_result(getPushNotiTask_result other) {
      if (other.isSetSuccess()) {
        this.success = new GetPushNotiTask(other.success);
      }
    }

    public getPushNotiTask_result deepCopy() {
      return new getPushNotiTask_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public GetPushNotiTask getSuccess() {
      return this.success;
    }

    public getPushNotiTask_result setSuccess(GetPushNotiTask success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((GetPushNotiTask)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPushNotiTask_result)
        return this.equals((getPushNotiTask_result)that);
      return false;
    }

    public boolean equals(getPushNotiTask_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPushNotiTask_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPushNotiTask_result typedOther = (getPushNotiTask_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPushNotiTask_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPushNotiTask_resultStandardSchemeFactory implements SchemeFactory {
      public getPushNotiTask_resultStandardScheme getScheme() {
        return new getPushNotiTask_resultStandardScheme();
      }
    }

    private static class getPushNotiTask_resultStandardScheme extends StandardScheme<getPushNotiTask_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPushNotiTask_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new GetPushNotiTask();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPushNotiTask_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPushNotiTask_resultTupleSchemeFactory implements SchemeFactory {
      public getPushNotiTask_resultTupleScheme getScheme() {
        return new getPushNotiTask_resultTupleScheme();
      }
    }

    private static class getPushNotiTask_resultTupleScheme extends TupleScheme<getPushNotiTask_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPushNotiTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPushNotiTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new GetPushNotiTask();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class setApnsKeyFile_args implements org.apache.thrift.TBase<setApnsKeyFile_args, setApnsKeyFile_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setApnsKeyFile_args");

    private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("file", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField KEY_PASS_FIELD_DESC = new org.apache.thrift.protocol.TField("keyPass", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setApnsKeyFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setApnsKeyFile_argsTupleSchemeFactory());
    }

    public int appId; // required
    public ByteBuffer file; // required
    public String keyPass; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APP_ID((short)1, "appId"),
      FILE((short)2, "file"),
      KEY_PASS((short)3, "keyPass");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_ID
            return APP_ID;
          case 2: // FILE
            return FILE;
          case 3: // KEY_PASS
            return KEY_PASS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __APPID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.FILE, new org.apache.thrift.meta_data.FieldMetaData("file", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.KEY_PASS, new org.apache.thrift.meta_data.FieldMetaData("keyPass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setApnsKeyFile_args.class, metaDataMap);
    }

    public setApnsKeyFile_args() {
    }

    public setApnsKeyFile_args(
      int appId,
      ByteBuffer file,
      String keyPass)
    {
      this();
      this.appId = appId;
      setAppIdIsSet(true);
      this.file = file;
      this.keyPass = keyPass;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setApnsKeyFile_args(setApnsKeyFile_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.appId = other.appId;
      if (other.isSetFile()) {
        this.file = org.apache.thrift.TBaseHelper.copyBinary(other.file);
;
      }
      if (other.isSetKeyPass()) {
        this.keyPass = other.keyPass;
      }
    }

    public setApnsKeyFile_args deepCopy() {
      return new setApnsKeyFile_args(this);
    }

    @Override
    public void clear() {
      setAppIdIsSet(false);
      this.appId = 0;
      this.file = null;
      this.keyPass = null;
    }

    public int getAppId() {
      return this.appId;
    }

    public setApnsKeyFile_args setAppId(int appId) {
      this.appId = appId;
      setAppIdIsSet(true);
      return this;
    }

    public void unsetAppId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPID_ISSET_ID);
    }

    /** Returns true if field appId is set (has been assigned a value) and false otherwise */
    public boolean isSetAppId() {
      return EncodingUtils.testBit(__isset_bitfield, __APPID_ISSET_ID);
    }

    public void setAppIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPID_ISSET_ID, value);
    }

    public byte[] getFile() {
      setFile(org.apache.thrift.TBaseHelper.rightSize(file));
      return file == null ? null : file.array();
    }

    public ByteBuffer bufferForFile() {
      return file;
    }

    public setApnsKeyFile_args setFile(byte[] file) {
      setFile(file == null ? (ByteBuffer)null : ByteBuffer.wrap(file));
      return this;
    }

    public setApnsKeyFile_args setFile(ByteBuffer file) {
      this.file = file;
      return this;
    }

    public void unsetFile() {
      this.file = null;
    }

    /** Returns true if field file is set (has been assigned a value) and false otherwise */
    public boolean isSetFile() {
      return this.file != null;
    }

    public void setFileIsSet(boolean value) {
      if (!value) {
        this.file = null;
      }
    }

    public String getKeyPass() {
      return this.keyPass;
    }

    public setApnsKeyFile_args setKeyPass(String keyPass) {
      this.keyPass = keyPass;
      return this;
    }

    public void unsetKeyPass() {
      this.keyPass = null;
    }

    /** Returns true if field keyPass is set (has been assigned a value) and false otherwise */
    public boolean isSetKeyPass() {
      return this.keyPass != null;
    }

    public void setKeyPassIsSet(boolean value) {
      if (!value) {
        this.keyPass = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_ID:
        if (value == null) {
          unsetAppId();
        } else {
          setAppId((Integer)value);
        }
        break;

      case FILE:
        if (value == null) {
          unsetFile();
        } else {
          setFile((ByteBuffer)value);
        }
        break;

      case KEY_PASS:
        if (value == null) {
          unsetKeyPass();
        } else {
          setKeyPass((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_ID:
        return Integer.valueOf(getAppId());

      case FILE:
        return getFile();

      case KEY_PASS:
        return getKeyPass();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_ID:
        return isSetAppId();
      case FILE:
        return isSetFile();
      case KEY_PASS:
        return isSetKeyPass();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setApnsKeyFile_args)
        return this.equals((setApnsKeyFile_args)that);
      return false;
    }

    public boolean equals(setApnsKeyFile_args that) {
      if (that == null)
        return false;

      boolean this_present_appId = true;
      boolean that_present_appId = true;
      if (this_present_appId || that_present_appId) {
        if (!(this_present_appId && that_present_appId))
          return false;
        if (this.appId != that.appId)
          return false;
      }

      boolean this_present_file = true && this.isSetFile();
      boolean that_present_file = true && that.isSetFile();
      if (this_present_file || that_present_file) {
        if (!(this_present_file && that_present_file))
          return false;
        if (!this.file.equals(that.file))
          return false;
      }

      boolean this_present_keyPass = true && this.isSetKeyPass();
      boolean that_present_keyPass = true && that.isSetKeyPass();
      if (this_present_keyPass || that_present_keyPass) {
        if (!(this_present_keyPass && that_present_keyPass))
          return false;
        if (!this.keyPass.equals(that.keyPass))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setApnsKeyFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setApnsKeyFile_args typedOther = (setApnsKeyFile_args)other;

      lastComparison = Boolean.valueOf(isSetAppId()).compareTo(typedOther.isSetAppId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, typedOther.appId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFile()).compareTo(typedOther.isSetFile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file, typedOther.file);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKeyPass()).compareTo(typedOther.isSetKeyPass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeyPass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyPass, typedOther.keyPass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setApnsKeyFile_args(");
      boolean first = true;

      sb.append("appId:");
      sb.append(this.appId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("file:");
      if (this.file == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.file, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("keyPass:");
      if (this.keyPass == null) {
        sb.append("null");
      } else {
        sb.append(this.keyPass);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setApnsKeyFile_argsStandardSchemeFactory implements SchemeFactory {
      public setApnsKeyFile_argsStandardScheme getScheme() {
        return new setApnsKeyFile_argsStandardScheme();
      }
    }

    private static class setApnsKeyFile_argsStandardScheme extends StandardScheme<setApnsKeyFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setApnsKeyFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.appId = iprot.readI32();
                struct.setAppIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.file = iprot.readBinary();
                struct.setFileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // KEY_PASS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.keyPass = iprot.readString();
                struct.setKeyPassIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setApnsKeyFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(APP_ID_FIELD_DESC);
        oprot.writeI32(struct.appId);
        oprot.writeFieldEnd();
        if (struct.file != null) {
          oprot.writeFieldBegin(FILE_FIELD_DESC);
          oprot.writeBinary(struct.file);
          oprot.writeFieldEnd();
        }
        if (struct.keyPass != null) {
          oprot.writeFieldBegin(KEY_PASS_FIELD_DESC);
          oprot.writeString(struct.keyPass);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setApnsKeyFile_argsTupleSchemeFactory implements SchemeFactory {
      public setApnsKeyFile_argsTupleScheme getScheme() {
        return new setApnsKeyFile_argsTupleScheme();
      }
    }

    private static class setApnsKeyFile_argsTupleScheme extends TupleScheme<setApnsKeyFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setApnsKeyFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAppId()) {
          optionals.set(0);
        }
        if (struct.isSetFile()) {
          optionals.set(1);
        }
        if (struct.isSetKeyPass()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAppId()) {
          oprot.writeI32(struct.appId);
        }
        if (struct.isSetFile()) {
          oprot.writeBinary(struct.file);
        }
        if (struct.isSetKeyPass()) {
          oprot.writeString(struct.keyPass);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setApnsKeyFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.appId = iprot.readI32();
          struct.setAppIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.file = iprot.readBinary();
          struct.setFileIsSet(true);
        }
        if (incoming.get(2)) {
          struct.keyPass = iprot.readString();
          struct.setKeyPassIsSet(true);
        }
      }
    }

  }

  public static class setApnsKeyFile_result implements org.apache.thrift.TBase<setApnsKeyFile_result, setApnsKeyFile_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setApnsKeyFile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setApnsKeyFile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setApnsKeyFile_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setApnsKeyFile_result.class, metaDataMap);
    }

    public setApnsKeyFile_result() {
    }

    public setApnsKeyFile_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setApnsKeyFile_result(setApnsKeyFile_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public setApnsKeyFile_result deepCopy() {
      return new setApnsKeyFile_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public setApnsKeyFile_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setApnsKeyFile_result)
        return this.equals((setApnsKeyFile_result)that);
      return false;
    }

    public boolean equals(setApnsKeyFile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setApnsKeyFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setApnsKeyFile_result typedOther = (setApnsKeyFile_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setApnsKeyFile_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setApnsKeyFile_resultStandardSchemeFactory implements SchemeFactory {
      public setApnsKeyFile_resultStandardScheme getScheme() {
        return new setApnsKeyFile_resultStandardScheme();
      }
    }

    private static class setApnsKeyFile_resultStandardScheme extends StandardScheme<setApnsKeyFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setApnsKeyFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setApnsKeyFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setApnsKeyFile_resultTupleSchemeFactory implements SchemeFactory {
      public setApnsKeyFile_resultTupleScheme getScheme() {
        return new setApnsKeyFile_resultTupleScheme();
      }
    }

    private static class setApnsKeyFile_resultTupleScheme extends TupleScheme<setApnsKeyFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setApnsKeyFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setApnsKeyFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class createAppTable_args implements org.apache.thrift.TBase<createAppTable_args, createAppTable_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createAppTable_args");

    private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createAppTable_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createAppTable_argsTupleSchemeFactory());
    }

    public int appId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APP_ID((short)1, "appId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_ID
            return APP_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __APPID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createAppTable_args.class, metaDataMap);
    }

    public createAppTable_args() {
    }

    public createAppTable_args(
      int appId)
    {
      this();
      this.appId = appId;
      setAppIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createAppTable_args(createAppTable_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.appId = other.appId;
    }

    public createAppTable_args deepCopy() {
      return new createAppTable_args(this);
    }

    @Override
    public void clear() {
      setAppIdIsSet(false);
      this.appId = 0;
    }

    public int getAppId() {
      return this.appId;
    }

    public createAppTable_args setAppId(int appId) {
      this.appId = appId;
      setAppIdIsSet(true);
      return this;
    }

    public void unsetAppId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPID_ISSET_ID);
    }

    /** Returns true if field appId is set (has been assigned a value) and false otherwise */
    public boolean isSetAppId() {
      return EncodingUtils.testBit(__isset_bitfield, __APPID_ISSET_ID);
    }

    public void setAppIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_ID:
        if (value == null) {
          unsetAppId();
        } else {
          setAppId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_ID:
        return Integer.valueOf(getAppId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_ID:
        return isSetAppId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createAppTable_args)
        return this.equals((createAppTable_args)that);
      return false;
    }

    public boolean equals(createAppTable_args that) {
      if (that == null)
        return false;

      boolean this_present_appId = true;
      boolean that_present_appId = true;
      if (this_present_appId || that_present_appId) {
        if (!(this_present_appId && that_present_appId))
          return false;
        if (this.appId != that.appId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createAppTable_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createAppTable_args typedOther = (createAppTable_args)other;

      lastComparison = Boolean.valueOf(isSetAppId()).compareTo(typedOther.isSetAppId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, typedOther.appId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createAppTable_args(");
      boolean first = true;

      sb.append("appId:");
      sb.append(this.appId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createAppTable_argsStandardSchemeFactory implements SchemeFactory {
      public createAppTable_argsStandardScheme getScheme() {
        return new createAppTable_argsStandardScheme();
      }
    }

    private static class createAppTable_argsStandardScheme extends StandardScheme<createAppTable_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createAppTable_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.appId = iprot.readI32();
                struct.setAppIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createAppTable_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(APP_ID_FIELD_DESC);
        oprot.writeI32(struct.appId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createAppTable_argsTupleSchemeFactory implements SchemeFactory {
      public createAppTable_argsTupleScheme getScheme() {
        return new createAppTable_argsTupleScheme();
      }
    }

    private static class createAppTable_argsTupleScheme extends TupleScheme<createAppTable_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createAppTable_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAppId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAppId()) {
          oprot.writeI32(struct.appId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createAppTable_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.appId = iprot.readI32();
          struct.setAppIdIsSet(true);
        }
      }
    }

  }

  public static class createAppTable_result implements org.apache.thrift.TBase<createAppTable_result, createAppTable_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createAppTable_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createAppTable_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createAppTable_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createAppTable_result.class, metaDataMap);
    }

    public createAppTable_result() {
    }

    public createAppTable_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createAppTable_result(createAppTable_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public createAppTable_result deepCopy() {
      return new createAppTable_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public createAppTable_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createAppTable_result)
        return this.equals((createAppTable_result)that);
      return false;
    }

    public boolean equals(createAppTable_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createAppTable_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createAppTable_result typedOther = (createAppTable_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createAppTable_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createAppTable_resultStandardSchemeFactory implements SchemeFactory {
      public createAppTable_resultStandardScheme getScheme() {
        return new createAppTable_resultStandardScheme();
      }
    }

    private static class createAppTable_resultStandardScheme extends StandardScheme<createAppTable_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createAppTable_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createAppTable_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createAppTable_resultTupleSchemeFactory implements SchemeFactory {
      public createAppTable_resultTupleScheme getScheme() {
        return new createAppTable_resultTupleScheme();
      }
    }

    private static class createAppTable_resultTupleScheme extends TupleScheme<createAppTable_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createAppTable_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createAppTable_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class setGoogleApiKey_args implements org.apache.thrift.TBase<setGoogleApiKey_args, setGoogleApiKey_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setGoogleApiKey_args");

    private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField API_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("apiKey", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setGoogleApiKey_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setGoogleApiKey_argsTupleSchemeFactory());
    }

    public int appId; // required
    public String apiKey; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APP_ID((short)1, "appId"),
      API_KEY((short)2, "apiKey");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_ID
            return APP_ID;
          case 2: // API_KEY
            return API_KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __APPID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.API_KEY, new org.apache.thrift.meta_data.FieldMetaData("apiKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setGoogleApiKey_args.class, metaDataMap);
    }

    public setGoogleApiKey_args() {
    }

    public setGoogleApiKey_args(
      int appId,
      String apiKey)
    {
      this();
      this.appId = appId;
      setAppIdIsSet(true);
      this.apiKey = apiKey;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setGoogleApiKey_args(setGoogleApiKey_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.appId = other.appId;
      if (other.isSetApiKey()) {
        this.apiKey = other.apiKey;
      }
    }

    public setGoogleApiKey_args deepCopy() {
      return new setGoogleApiKey_args(this);
    }

    @Override
    public void clear() {
      setAppIdIsSet(false);
      this.appId = 0;
      this.apiKey = null;
    }

    public int getAppId() {
      return this.appId;
    }

    public setGoogleApiKey_args setAppId(int appId) {
      this.appId = appId;
      setAppIdIsSet(true);
      return this;
    }

    public void unsetAppId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPID_ISSET_ID);
    }

    /** Returns true if field appId is set (has been assigned a value) and false otherwise */
    public boolean isSetAppId() {
      return EncodingUtils.testBit(__isset_bitfield, __APPID_ISSET_ID);
    }

    public void setAppIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPID_ISSET_ID, value);
    }

    public String getApiKey() {
      return this.apiKey;
    }

    public setGoogleApiKey_args setApiKey(String apiKey) {
      this.apiKey = apiKey;
      return this;
    }

    public void unsetApiKey() {
      this.apiKey = null;
    }

    /** Returns true if field apiKey is set (has been assigned a value) and false otherwise */
    public boolean isSetApiKey() {
      return this.apiKey != null;
    }

    public void setApiKeyIsSet(boolean value) {
      if (!value) {
        this.apiKey = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_ID:
        if (value == null) {
          unsetAppId();
        } else {
          setAppId((Integer)value);
        }
        break;

      case API_KEY:
        if (value == null) {
          unsetApiKey();
        } else {
          setApiKey((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_ID:
        return Integer.valueOf(getAppId());

      case API_KEY:
        return getApiKey();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_ID:
        return isSetAppId();
      case API_KEY:
        return isSetApiKey();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setGoogleApiKey_args)
        return this.equals((setGoogleApiKey_args)that);
      return false;
    }

    public boolean equals(setGoogleApiKey_args that) {
      if (that == null)
        return false;

      boolean this_present_appId = true;
      boolean that_present_appId = true;
      if (this_present_appId || that_present_appId) {
        if (!(this_present_appId && that_present_appId))
          return false;
        if (this.appId != that.appId)
          return false;
      }

      boolean this_present_apiKey = true && this.isSetApiKey();
      boolean that_present_apiKey = true && that.isSetApiKey();
      if (this_present_apiKey || that_present_apiKey) {
        if (!(this_present_apiKey && that_present_apiKey))
          return false;
        if (!this.apiKey.equals(that.apiKey))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setGoogleApiKey_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setGoogleApiKey_args typedOther = (setGoogleApiKey_args)other;

      lastComparison = Boolean.valueOf(isSetAppId()).compareTo(typedOther.isSetAppId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, typedOther.appId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetApiKey()).compareTo(typedOther.isSetApiKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApiKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apiKey, typedOther.apiKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setGoogleApiKey_args(");
      boolean first = true;

      sb.append("appId:");
      sb.append(this.appId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("apiKey:");
      if (this.apiKey == null) {
        sb.append("null");
      } else {
        sb.append(this.apiKey);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setGoogleApiKey_argsStandardSchemeFactory implements SchemeFactory {
      public setGoogleApiKey_argsStandardScheme getScheme() {
        return new setGoogleApiKey_argsStandardScheme();
      }
    }

    private static class setGoogleApiKey_argsStandardScheme extends StandardScheme<setGoogleApiKey_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setGoogleApiKey_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.appId = iprot.readI32();
                struct.setAppIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // API_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.apiKey = iprot.readString();
                struct.setApiKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setGoogleApiKey_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(APP_ID_FIELD_DESC);
        oprot.writeI32(struct.appId);
        oprot.writeFieldEnd();
        if (struct.apiKey != null) {
          oprot.writeFieldBegin(API_KEY_FIELD_DESC);
          oprot.writeString(struct.apiKey);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setGoogleApiKey_argsTupleSchemeFactory implements SchemeFactory {
      public setGoogleApiKey_argsTupleScheme getScheme() {
        return new setGoogleApiKey_argsTupleScheme();
      }
    }

    private static class setGoogleApiKey_argsTupleScheme extends TupleScheme<setGoogleApiKey_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setGoogleApiKey_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAppId()) {
          optionals.set(0);
        }
        if (struct.isSetApiKey()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAppId()) {
          oprot.writeI32(struct.appId);
        }
        if (struct.isSetApiKey()) {
          oprot.writeString(struct.apiKey);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setGoogleApiKey_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.appId = iprot.readI32();
          struct.setAppIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.apiKey = iprot.readString();
          struct.setApiKeyIsSet(true);
        }
      }
    }

  }

  public static class setGoogleApiKey_result implements org.apache.thrift.TBase<setGoogleApiKey_result, setGoogleApiKey_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setGoogleApiKey_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setGoogleApiKey_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setGoogleApiKey_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setGoogleApiKey_result.class, metaDataMap);
    }

    public setGoogleApiKey_result() {
    }

    public setGoogleApiKey_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setGoogleApiKey_result(setGoogleApiKey_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public setGoogleApiKey_result deepCopy() {
      return new setGoogleApiKey_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public setGoogleApiKey_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setGoogleApiKey_result)
        return this.equals((setGoogleApiKey_result)that);
      return false;
    }

    public boolean equals(setGoogleApiKey_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setGoogleApiKey_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setGoogleApiKey_result typedOther = (setGoogleApiKey_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setGoogleApiKey_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setGoogleApiKey_resultStandardSchemeFactory implements SchemeFactory {
      public setGoogleApiKey_resultStandardScheme getScheme() {
        return new setGoogleApiKey_resultStandardScheme();
      }
    }

    private static class setGoogleApiKey_resultStandardScheme extends StandardScheme<setGoogleApiKey_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setGoogleApiKey_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setGoogleApiKey_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setGoogleApiKey_resultTupleSchemeFactory implements SchemeFactory {
      public setGoogleApiKey_resultTupleScheme getScheme() {
        return new setGoogleApiKey_resultTupleScheme();
      }
    }

    private static class setGoogleApiKey_resultTupleScheme extends TupleScheme<setGoogleApiKey_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setGoogleApiKey_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setGoogleApiKey_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getPushNotiTaskPage_args implements org.apache.thrift.TBase<getPushNotiTaskPage_args, getPushNotiTaskPage_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPushNotiTaskPage_args");

    private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("size", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPushNotiTaskPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPushNotiTaskPage_argsTupleSchemeFactory());
    }

    public int appId; // required
    public int offset; // required
    public int size; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APP_ID((short)1, "appId"),
      OFFSET((short)2, "offset"),
      SIZE((short)3, "size");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_ID
            return APP_ID;
          case 2: // OFFSET
            return OFFSET;
          case 3: // SIZE
            return SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __APPID_ISSET_ID = 0;
    private static final int __OFFSET_ISSET_ID = 1;
    private static final int __SIZE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SIZE, new org.apache.thrift.meta_data.FieldMetaData("size", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPushNotiTaskPage_args.class, metaDataMap);
    }

    public getPushNotiTaskPage_args() {
    }

    public getPushNotiTaskPage_args(
      int appId,
      int offset,
      int size)
    {
      this();
      this.appId = appId;
      setAppIdIsSet(true);
      this.offset = offset;
      setOffsetIsSet(true);
      this.size = size;
      setSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPushNotiTaskPage_args(getPushNotiTaskPage_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.appId = other.appId;
      this.offset = other.offset;
      this.size = other.size;
    }

    public getPushNotiTaskPage_args deepCopy() {
      return new getPushNotiTaskPage_args(this);
    }

    @Override
    public void clear() {
      setAppIdIsSet(false);
      this.appId = 0;
      setOffsetIsSet(false);
      this.offset = 0;
      setSizeIsSet(false);
      this.size = 0;
    }

    public int getAppId() {
      return this.appId;
    }

    public getPushNotiTaskPage_args setAppId(int appId) {
      this.appId = appId;
      setAppIdIsSet(true);
      return this;
    }

    public void unsetAppId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPID_ISSET_ID);
    }

    /** Returns true if field appId is set (has been assigned a value) and false otherwise */
    public boolean isSetAppId() {
      return EncodingUtils.testBit(__isset_bitfield, __APPID_ISSET_ID);
    }

    public void setAppIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPID_ISSET_ID, value);
    }

    public int getOffset() {
      return this.offset;
    }

    public getPushNotiTaskPage_args setOffset(int offset) {
      this.offset = offset;
      setOffsetIsSet(true);
      return this;
    }

    public void unsetOffset() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OFFSET_ISSET_ID);
    }

    /** Returns true if field offset is set (has been assigned a value) and false otherwise */
    public boolean isSetOffset() {
      return EncodingUtils.testBit(__isset_bitfield, __OFFSET_ISSET_ID);
    }

    public void setOffsetIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OFFSET_ISSET_ID, value);
    }

    public int getSize() {
      return this.size;
    }

    public getPushNotiTaskPage_args setSize(int size) {
      this.size = size;
      setSizeIsSet(true);
      return this;
    }

    public void unsetSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SIZE_ISSET_ID);
    }

    /** Returns true if field size is set (has been assigned a value) and false otherwise */
    public boolean isSetSize() {
      return EncodingUtils.testBit(__isset_bitfield, __SIZE_ISSET_ID);
    }

    public void setSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_ID:
        if (value == null) {
          unsetAppId();
        } else {
          setAppId((Integer)value);
        }
        break;

      case OFFSET:
        if (value == null) {
          unsetOffset();
        } else {
          setOffset((Integer)value);
        }
        break;

      case SIZE:
        if (value == null) {
          unsetSize();
        } else {
          setSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_ID:
        return Integer.valueOf(getAppId());

      case OFFSET:
        return Integer.valueOf(getOffset());

      case SIZE:
        return Integer.valueOf(getSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_ID:
        return isSetAppId();
      case OFFSET:
        return isSetOffset();
      case SIZE:
        return isSetSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPushNotiTaskPage_args)
        return this.equals((getPushNotiTaskPage_args)that);
      return false;
    }

    public boolean equals(getPushNotiTaskPage_args that) {
      if (that == null)
        return false;

      boolean this_present_appId = true;
      boolean that_present_appId = true;
      if (this_present_appId || that_present_appId) {
        if (!(this_present_appId && that_present_appId))
          return false;
        if (this.appId != that.appId)
          return false;
      }

      boolean this_present_offset = true;
      boolean that_present_offset = true;
      if (this_present_offset || that_present_offset) {
        if (!(this_present_offset && that_present_offset))
          return false;
        if (this.offset != that.offset)
          return false;
      }

      boolean this_present_size = true;
      boolean that_present_size = true;
      if (this_present_size || that_present_size) {
        if (!(this_present_size && that_present_size))
          return false;
        if (this.size != that.size)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPushNotiTaskPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPushNotiTaskPage_args typedOther = (getPushNotiTaskPage_args)other;

      lastComparison = Boolean.valueOf(isSetAppId()).compareTo(typedOther.isSetAppId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, typedOther.appId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOffset()).compareTo(typedOther.isSetOffset());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOffset()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, typedOther.offset);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSize()).compareTo(typedOther.isSetSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.size, typedOther.size);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPushNotiTaskPage_args(");
      boolean first = true;

      sb.append("appId:");
      sb.append(this.appId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("offset:");
      sb.append(this.offset);
      first = false;
      if (!first) sb.append(", ");
      sb.append("size:");
      sb.append(this.size);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPushNotiTaskPage_argsStandardSchemeFactory implements SchemeFactory {
      public getPushNotiTaskPage_argsStandardScheme getScheme() {
        return new getPushNotiTaskPage_argsStandardScheme();
      }
    }

    private static class getPushNotiTaskPage_argsStandardScheme extends StandardScheme<getPushNotiTaskPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPushNotiTaskPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.appId = iprot.readI32();
                struct.setAppIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OFFSET
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.offset = iprot.readI32();
                struct.setOffsetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.size = iprot.readI32();
                struct.setSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPushNotiTaskPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(APP_ID_FIELD_DESC);
        oprot.writeI32(struct.appId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(OFFSET_FIELD_DESC);
        oprot.writeI32(struct.offset);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SIZE_FIELD_DESC);
        oprot.writeI32(struct.size);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPushNotiTaskPage_argsTupleSchemeFactory implements SchemeFactory {
      public getPushNotiTaskPage_argsTupleScheme getScheme() {
        return new getPushNotiTaskPage_argsTupleScheme();
      }
    }

    private static class getPushNotiTaskPage_argsTupleScheme extends TupleScheme<getPushNotiTaskPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPushNotiTaskPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAppId()) {
          optionals.set(0);
        }
        if (struct.isSetOffset()) {
          optionals.set(1);
        }
        if (struct.isSetSize()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAppId()) {
          oprot.writeI32(struct.appId);
        }
        if (struct.isSetOffset()) {
          oprot.writeI32(struct.offset);
        }
        if (struct.isSetSize()) {
          oprot.writeI32(struct.size);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPushNotiTaskPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.appId = iprot.readI32();
          struct.setAppIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.offset = iprot.readI32();
          struct.setOffsetIsSet(true);
        }
        if (incoming.get(2)) {
          struct.size = iprot.readI32();
          struct.setSizeIsSet(true);
        }
      }
    }

  }

  public static class getPushNotiTaskPage_result implements org.apache.thrift.TBase<getPushNotiTaskPage_result, getPushNotiTaskPage_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPushNotiTaskPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPushNotiTaskPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPushNotiTaskPage_resultTupleSchemeFactory());
    }

    public GetPushNotiTaskPage success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GetPushNotiTaskPage.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPushNotiTaskPage_result.class, metaDataMap);
    }

    public getPushNotiTaskPage_result() {
    }

    public getPushNotiTaskPage_result(
      GetPushNotiTaskPage success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPushNotiTaskPage_result(getPushNotiTaskPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new GetPushNotiTaskPage(other.success);
      }
    }

    public getPushNotiTaskPage_result deepCopy() {
      return new getPushNotiTaskPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public GetPushNotiTaskPage getSuccess() {
      return this.success;
    }

    public getPushNotiTaskPage_result setSuccess(GetPushNotiTaskPage success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((GetPushNotiTaskPage)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPushNotiTaskPage_result)
        return this.equals((getPushNotiTaskPage_result)that);
      return false;
    }

    public boolean equals(getPushNotiTaskPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPushNotiTaskPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPushNotiTaskPage_result typedOther = (getPushNotiTaskPage_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPushNotiTaskPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPushNotiTaskPage_resultStandardSchemeFactory implements SchemeFactory {
      public getPushNotiTaskPage_resultStandardScheme getScheme() {
        return new getPushNotiTaskPage_resultStandardScheme();
      }
    }

    private static class getPushNotiTaskPage_resultStandardScheme extends StandardScheme<getPushNotiTaskPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPushNotiTaskPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new GetPushNotiTaskPage();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPushNotiTaskPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPushNotiTaskPage_resultTupleSchemeFactory implements SchemeFactory {
      public getPushNotiTaskPage_resultTupleScheme getScheme() {
        return new getPushNotiTaskPage_resultTupleScheme();
      }
    }

    private static class getPushNotiTaskPage_resultTupleScheme extends TupleScheme<getPushNotiTaskPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPushNotiTaskPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPushNotiTaskPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new GetPushNotiTaskPage();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class countPushNotiTask_args implements org.apache.thrift.TBase<countPushNotiTask_args, countPushNotiTask_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countPushNotiTask_args");

    private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new countPushNotiTask_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new countPushNotiTask_argsTupleSchemeFactory());
    }

    public int appId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APP_ID((short)1, "appId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_ID
            return APP_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __APPID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countPushNotiTask_args.class, metaDataMap);
    }

    public countPushNotiTask_args() {
    }

    public countPushNotiTask_args(
      int appId)
    {
      this();
      this.appId = appId;
      setAppIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countPushNotiTask_args(countPushNotiTask_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.appId = other.appId;
    }

    public countPushNotiTask_args deepCopy() {
      return new countPushNotiTask_args(this);
    }

    @Override
    public void clear() {
      setAppIdIsSet(false);
      this.appId = 0;
    }

    public int getAppId() {
      return this.appId;
    }

    public countPushNotiTask_args setAppId(int appId) {
      this.appId = appId;
      setAppIdIsSet(true);
      return this;
    }

    public void unsetAppId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPID_ISSET_ID);
    }

    /** Returns true if field appId is set (has been assigned a value) and false otherwise */
    public boolean isSetAppId() {
      return EncodingUtils.testBit(__isset_bitfield, __APPID_ISSET_ID);
    }

    public void setAppIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_ID:
        if (value == null) {
          unsetAppId();
        } else {
          setAppId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_ID:
        return Integer.valueOf(getAppId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_ID:
        return isSetAppId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof countPushNotiTask_args)
        return this.equals((countPushNotiTask_args)that);
      return false;
    }

    public boolean equals(countPushNotiTask_args that) {
      if (that == null)
        return false;

      boolean this_present_appId = true;
      boolean that_present_appId = true;
      if (this_present_appId || that_present_appId) {
        if (!(this_present_appId && that_present_appId))
          return false;
        if (this.appId != that.appId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(countPushNotiTask_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      countPushNotiTask_args typedOther = (countPushNotiTask_args)other;

      lastComparison = Boolean.valueOf(isSetAppId()).compareTo(typedOther.isSetAppId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, typedOther.appId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("countPushNotiTask_args(");
      boolean first = true;

      sb.append("appId:");
      sb.append(this.appId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countPushNotiTask_argsStandardSchemeFactory implements SchemeFactory {
      public countPushNotiTask_argsStandardScheme getScheme() {
        return new countPushNotiTask_argsStandardScheme();
      }
    }

    private static class countPushNotiTask_argsStandardScheme extends StandardScheme<countPushNotiTask_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countPushNotiTask_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.appId = iprot.readI32();
                struct.setAppIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countPushNotiTask_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(APP_ID_FIELD_DESC);
        oprot.writeI32(struct.appId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countPushNotiTask_argsTupleSchemeFactory implements SchemeFactory {
      public countPushNotiTask_argsTupleScheme getScheme() {
        return new countPushNotiTask_argsTupleScheme();
      }
    }

    private static class countPushNotiTask_argsTupleScheme extends TupleScheme<countPushNotiTask_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countPushNotiTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAppId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAppId()) {
          oprot.writeI32(struct.appId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countPushNotiTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.appId = iprot.readI32();
          struct.setAppIdIsSet(true);
        }
      }
    }

  }

  public static class countPushNotiTask_result implements org.apache.thrift.TBase<countPushNotiTask_result, countPushNotiTask_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countPushNotiTask_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new countPushNotiTask_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new countPushNotiTask_resultTupleSchemeFactory());
    }

    public CountResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CountResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countPushNotiTask_result.class, metaDataMap);
    }

    public countPushNotiTask_result() {
    }

    public countPushNotiTask_result(
      CountResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countPushNotiTask_result(countPushNotiTask_result other) {
      if (other.isSetSuccess()) {
        this.success = new CountResult(other.success);
      }
    }

    public countPushNotiTask_result deepCopy() {
      return new countPushNotiTask_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public CountResult getSuccess() {
      return this.success;
    }

    public countPushNotiTask_result setSuccess(CountResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CountResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof countPushNotiTask_result)
        return this.equals((countPushNotiTask_result)that);
      return false;
    }

    public boolean equals(countPushNotiTask_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(countPushNotiTask_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      countPushNotiTask_result typedOther = (countPushNotiTask_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("countPushNotiTask_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countPushNotiTask_resultStandardSchemeFactory implements SchemeFactory {
      public countPushNotiTask_resultStandardScheme getScheme() {
        return new countPushNotiTask_resultStandardScheme();
      }
    }

    private static class countPushNotiTask_resultStandardScheme extends StandardScheme<countPushNotiTask_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countPushNotiTask_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CountResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countPushNotiTask_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countPushNotiTask_resultTupleSchemeFactory implements SchemeFactory {
      public countPushNotiTask_resultTupleScheme getScheme() {
        return new countPushNotiTask_resultTupleScheme();
      }
    }

    private static class countPushNotiTask_resultTupleScheme extends TupleScheme<countPushNotiTask_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countPushNotiTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countPushNotiTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new CountResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class hasApnsKeyFile_args implements org.apache.thrift.TBase<hasApnsKeyFile_args, hasApnsKeyFile_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hasApnsKeyFile_args");

    private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new hasApnsKeyFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new hasApnsKeyFile_argsTupleSchemeFactory());
    }

    public int appId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APP_ID((short)1, "appId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_ID
            return APP_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __APPID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hasApnsKeyFile_args.class, metaDataMap);
    }

    public hasApnsKeyFile_args() {
    }

    public hasApnsKeyFile_args(
      int appId)
    {
      this();
      this.appId = appId;
      setAppIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hasApnsKeyFile_args(hasApnsKeyFile_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.appId = other.appId;
    }

    public hasApnsKeyFile_args deepCopy() {
      return new hasApnsKeyFile_args(this);
    }

    @Override
    public void clear() {
      setAppIdIsSet(false);
      this.appId = 0;
    }

    public int getAppId() {
      return this.appId;
    }

    public hasApnsKeyFile_args setAppId(int appId) {
      this.appId = appId;
      setAppIdIsSet(true);
      return this;
    }

    public void unsetAppId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPID_ISSET_ID);
    }

    /** Returns true if field appId is set (has been assigned a value) and false otherwise */
    public boolean isSetAppId() {
      return EncodingUtils.testBit(__isset_bitfield, __APPID_ISSET_ID);
    }

    public void setAppIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_ID:
        if (value == null) {
          unsetAppId();
        } else {
          setAppId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_ID:
        return Integer.valueOf(getAppId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_ID:
        return isSetAppId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof hasApnsKeyFile_args)
        return this.equals((hasApnsKeyFile_args)that);
      return false;
    }

    public boolean equals(hasApnsKeyFile_args that) {
      if (that == null)
        return false;

      boolean this_present_appId = true;
      boolean that_present_appId = true;
      if (this_present_appId || that_present_appId) {
        if (!(this_present_appId && that_present_appId))
          return false;
        if (this.appId != that.appId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(hasApnsKeyFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      hasApnsKeyFile_args typedOther = (hasApnsKeyFile_args)other;

      lastComparison = Boolean.valueOf(isSetAppId()).compareTo(typedOther.isSetAppId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, typedOther.appId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("hasApnsKeyFile_args(");
      boolean first = true;

      sb.append("appId:");
      sb.append(this.appId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hasApnsKeyFile_argsStandardSchemeFactory implements SchemeFactory {
      public hasApnsKeyFile_argsStandardScheme getScheme() {
        return new hasApnsKeyFile_argsStandardScheme();
      }
    }

    private static class hasApnsKeyFile_argsStandardScheme extends StandardScheme<hasApnsKeyFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hasApnsKeyFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.appId = iprot.readI32();
                struct.setAppIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hasApnsKeyFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(APP_ID_FIELD_DESC);
        oprot.writeI32(struct.appId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hasApnsKeyFile_argsTupleSchemeFactory implements SchemeFactory {
      public hasApnsKeyFile_argsTupleScheme getScheme() {
        return new hasApnsKeyFile_argsTupleScheme();
      }
    }

    private static class hasApnsKeyFile_argsTupleScheme extends TupleScheme<hasApnsKeyFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hasApnsKeyFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAppId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAppId()) {
          oprot.writeI32(struct.appId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hasApnsKeyFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.appId = iprot.readI32();
          struct.setAppIdIsSet(true);
        }
      }
    }

  }

  public static class hasApnsKeyFile_result implements org.apache.thrift.TBase<hasApnsKeyFile_result, hasApnsKeyFile_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hasApnsKeyFile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new hasApnsKeyFile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new hasApnsKeyFile_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hasApnsKeyFile_result.class, metaDataMap);
    }

    public hasApnsKeyFile_result() {
    }

    public hasApnsKeyFile_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hasApnsKeyFile_result(hasApnsKeyFile_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public hasApnsKeyFile_result deepCopy() {
      return new hasApnsKeyFile_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public hasApnsKeyFile_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof hasApnsKeyFile_result)
        return this.equals((hasApnsKeyFile_result)that);
      return false;
    }

    public boolean equals(hasApnsKeyFile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(hasApnsKeyFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      hasApnsKeyFile_result typedOther = (hasApnsKeyFile_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("hasApnsKeyFile_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hasApnsKeyFile_resultStandardSchemeFactory implements SchemeFactory {
      public hasApnsKeyFile_resultStandardScheme getScheme() {
        return new hasApnsKeyFile_resultStandardScheme();
      }
    }

    private static class hasApnsKeyFile_resultStandardScheme extends StandardScheme<hasApnsKeyFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hasApnsKeyFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hasApnsKeyFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hasApnsKeyFile_resultTupleSchemeFactory implements SchemeFactory {
      public hasApnsKeyFile_resultTupleScheme getScheme() {
        return new hasApnsKeyFile_resultTupleScheme();
      }
    }

    private static class hasApnsKeyFile_resultTupleScheme extends TupleScheme<hasApnsKeyFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hasApnsKeyFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hasApnsKeyFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class hasGcmKey_args implements org.apache.thrift.TBase<hasGcmKey_args, hasGcmKey_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hasGcmKey_args");

    private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new hasGcmKey_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new hasGcmKey_argsTupleSchemeFactory());
    }

    public int appId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APP_ID((short)1, "appId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_ID
            return APP_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __APPID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hasGcmKey_args.class, metaDataMap);
    }

    public hasGcmKey_args() {
    }

    public hasGcmKey_args(
      int appId)
    {
      this();
      this.appId = appId;
      setAppIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hasGcmKey_args(hasGcmKey_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.appId = other.appId;
    }

    public hasGcmKey_args deepCopy() {
      return new hasGcmKey_args(this);
    }

    @Override
    public void clear() {
      setAppIdIsSet(false);
      this.appId = 0;
    }

    public int getAppId() {
      return this.appId;
    }

    public hasGcmKey_args setAppId(int appId) {
      this.appId = appId;
      setAppIdIsSet(true);
      return this;
    }

    public void unsetAppId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPID_ISSET_ID);
    }

    /** Returns true if field appId is set (has been assigned a value) and false otherwise */
    public boolean isSetAppId() {
      return EncodingUtils.testBit(__isset_bitfield, __APPID_ISSET_ID);
    }

    public void setAppIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_ID:
        if (value == null) {
          unsetAppId();
        } else {
          setAppId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_ID:
        return Integer.valueOf(getAppId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_ID:
        return isSetAppId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof hasGcmKey_args)
        return this.equals((hasGcmKey_args)that);
      return false;
    }

    public boolean equals(hasGcmKey_args that) {
      if (that == null)
        return false;

      boolean this_present_appId = true;
      boolean that_present_appId = true;
      if (this_present_appId || that_present_appId) {
        if (!(this_present_appId && that_present_appId))
          return false;
        if (this.appId != that.appId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(hasGcmKey_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      hasGcmKey_args typedOther = (hasGcmKey_args)other;

      lastComparison = Boolean.valueOf(isSetAppId()).compareTo(typedOther.isSetAppId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, typedOther.appId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("hasGcmKey_args(");
      boolean first = true;

      sb.append("appId:");
      sb.append(this.appId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hasGcmKey_argsStandardSchemeFactory implements SchemeFactory {
      public hasGcmKey_argsStandardScheme getScheme() {
        return new hasGcmKey_argsStandardScheme();
      }
    }

    private static class hasGcmKey_argsStandardScheme extends StandardScheme<hasGcmKey_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hasGcmKey_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.appId = iprot.readI32();
                struct.setAppIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hasGcmKey_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(APP_ID_FIELD_DESC);
        oprot.writeI32(struct.appId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hasGcmKey_argsTupleSchemeFactory implements SchemeFactory {
      public hasGcmKey_argsTupleScheme getScheme() {
        return new hasGcmKey_argsTupleScheme();
      }
    }

    private static class hasGcmKey_argsTupleScheme extends TupleScheme<hasGcmKey_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hasGcmKey_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAppId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAppId()) {
          oprot.writeI32(struct.appId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hasGcmKey_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.appId = iprot.readI32();
          struct.setAppIdIsSet(true);
        }
      }
    }

  }

  public static class hasGcmKey_result implements org.apache.thrift.TBase<hasGcmKey_result, hasGcmKey_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hasGcmKey_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new hasGcmKey_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new hasGcmKey_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hasGcmKey_result.class, metaDataMap);
    }

    public hasGcmKey_result() {
    }

    public hasGcmKey_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hasGcmKey_result(hasGcmKey_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public hasGcmKey_result deepCopy() {
      return new hasGcmKey_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public hasGcmKey_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof hasGcmKey_result)
        return this.equals((hasGcmKey_result)that);
      return false;
    }

    public boolean equals(hasGcmKey_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(hasGcmKey_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      hasGcmKey_result typedOther = (hasGcmKey_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("hasGcmKey_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hasGcmKey_resultStandardSchemeFactory implements SchemeFactory {
      public hasGcmKey_resultStandardScheme getScheme() {
        return new hasGcmKey_resultStandardScheme();
      }
    }

    private static class hasGcmKey_resultStandardScheme extends StandardScheme<hasGcmKey_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hasGcmKey_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hasGcmKey_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hasGcmKey_resultTupleSchemeFactory implements SchemeFactory {
      public hasGcmKey_resultTupleScheme getScheme() {
        return new hasGcmKey_resultTupleScheme();
      }
    }

    private static class hasGcmKey_resultTupleScheme extends TupleScheme<hasGcmKey_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hasGcmKey_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hasGcmKey_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getAllScheduledTask_args implements org.apache.thrift.TBase<getAllScheduledTask_args, getAllScheduledTask_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllScheduledTask_args");

    private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllScheduledTask_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllScheduledTask_argsTupleSchemeFactory());
    }

    public int appId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APP_ID((short)1, "appId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_ID
            return APP_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __APPID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllScheduledTask_args.class, metaDataMap);
    }

    public getAllScheduledTask_args() {
    }

    public getAllScheduledTask_args(
      int appId)
    {
      this();
      this.appId = appId;
      setAppIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllScheduledTask_args(getAllScheduledTask_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.appId = other.appId;
    }

    public getAllScheduledTask_args deepCopy() {
      return new getAllScheduledTask_args(this);
    }

    @Override
    public void clear() {
      setAppIdIsSet(false);
      this.appId = 0;
    }

    public int getAppId() {
      return this.appId;
    }

    public getAllScheduledTask_args setAppId(int appId) {
      this.appId = appId;
      setAppIdIsSet(true);
      return this;
    }

    public void unsetAppId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPID_ISSET_ID);
    }

    /** Returns true if field appId is set (has been assigned a value) and false otherwise */
    public boolean isSetAppId() {
      return EncodingUtils.testBit(__isset_bitfield, __APPID_ISSET_ID);
    }

    public void setAppIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_ID:
        if (value == null) {
          unsetAppId();
        } else {
          setAppId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_ID:
        return Integer.valueOf(getAppId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_ID:
        return isSetAppId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllScheduledTask_args)
        return this.equals((getAllScheduledTask_args)that);
      return false;
    }

    public boolean equals(getAllScheduledTask_args that) {
      if (that == null)
        return false;

      boolean this_present_appId = true;
      boolean that_present_appId = true;
      if (this_present_appId || that_present_appId) {
        if (!(this_present_appId && that_present_appId))
          return false;
        if (this.appId != that.appId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getAllScheduledTask_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAllScheduledTask_args typedOther = (getAllScheduledTask_args)other;

      lastComparison = Boolean.valueOf(isSetAppId()).compareTo(typedOther.isSetAppId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, typedOther.appId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllScheduledTask_args(");
      boolean first = true;

      sb.append("appId:");
      sb.append(this.appId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllScheduledTask_argsStandardSchemeFactory implements SchemeFactory {
      public getAllScheduledTask_argsStandardScheme getScheme() {
        return new getAllScheduledTask_argsStandardScheme();
      }
    }

    private static class getAllScheduledTask_argsStandardScheme extends StandardScheme<getAllScheduledTask_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllScheduledTask_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.appId = iprot.readI32();
                struct.setAppIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllScheduledTask_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(APP_ID_FIELD_DESC);
        oprot.writeI32(struct.appId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllScheduledTask_argsTupleSchemeFactory implements SchemeFactory {
      public getAllScheduledTask_argsTupleScheme getScheme() {
        return new getAllScheduledTask_argsTupleScheme();
      }
    }

    private static class getAllScheduledTask_argsTupleScheme extends TupleScheme<getAllScheduledTask_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllScheduledTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAppId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAppId()) {
          oprot.writeI32(struct.appId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllScheduledTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.appId = iprot.readI32();
          struct.setAppIdIsSet(true);
        }
      }
    }

  }

  public static class getAllScheduledTask_result implements org.apache.thrift.TBase<getAllScheduledTask_result, getAllScheduledTask_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllScheduledTask_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllScheduledTask_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllScheduledTask_resultTupleSchemeFactory());
    }

    public GetAllScheduledTaskResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GetAllScheduledTaskResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllScheduledTask_result.class, metaDataMap);
    }

    public getAllScheduledTask_result() {
    }

    public getAllScheduledTask_result(
      GetAllScheduledTaskResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllScheduledTask_result(getAllScheduledTask_result other) {
      if (other.isSetSuccess()) {
        this.success = new GetAllScheduledTaskResult(other.success);
      }
    }

    public getAllScheduledTask_result deepCopy() {
      return new getAllScheduledTask_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public GetAllScheduledTaskResult getSuccess() {
      return this.success;
    }

    public getAllScheduledTask_result setSuccess(GetAllScheduledTaskResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((GetAllScheduledTaskResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllScheduledTask_result)
        return this.equals((getAllScheduledTask_result)that);
      return false;
    }

    public boolean equals(getAllScheduledTask_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getAllScheduledTask_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAllScheduledTask_result typedOther = (getAllScheduledTask_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllScheduledTask_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllScheduledTask_resultStandardSchemeFactory implements SchemeFactory {
      public getAllScheduledTask_resultStandardScheme getScheme() {
        return new getAllScheduledTask_resultStandardScheme();
      }
    }

    private static class getAllScheduledTask_resultStandardScheme extends StandardScheme<getAllScheduledTask_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllScheduledTask_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new GetAllScheduledTaskResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllScheduledTask_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllScheduledTask_resultTupleSchemeFactory implements SchemeFactory {
      public getAllScheduledTask_resultTupleScheme getScheme() {
        return new getAllScheduledTask_resultTupleScheme();
      }
    }

    private static class getAllScheduledTask_resultTupleScheme extends TupleScheme<getAllScheduledTask_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllScheduledTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllScheduledTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new GetAllScheduledTaskResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class setAppOwner_args implements org.apache.thrift.TBase<setAppOwner_args, setAppOwner_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setAppOwner_args");

    private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setAppOwner_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setAppOwner_argsTupleSchemeFactory());
    }

    public int appId; // required
    public long userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APP_ID((short)1, "appId"),
      USER_ID((short)2, "userId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_ID
            return APP_ID;
          case 2: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __APPID_ISSET_ID = 0;
    private static final int __USERID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setAppOwner_args.class, metaDataMap);
    }

    public setAppOwner_args() {
    }

    public setAppOwner_args(
      int appId,
      long userId)
    {
      this();
      this.appId = appId;
      setAppIdIsSet(true);
      this.userId = userId;
      setUserIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setAppOwner_args(setAppOwner_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.appId = other.appId;
      this.userId = other.userId;
    }

    public setAppOwner_args deepCopy() {
      return new setAppOwner_args(this);
    }

    @Override
    public void clear() {
      setAppIdIsSet(false);
      this.appId = 0;
      setUserIdIsSet(false);
      this.userId = 0;
    }

    public int getAppId() {
      return this.appId;
    }

    public setAppOwner_args setAppId(int appId) {
      this.appId = appId;
      setAppIdIsSet(true);
      return this;
    }

    public void unsetAppId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPID_ISSET_ID);
    }

    /** Returns true if field appId is set (has been assigned a value) and false otherwise */
    public boolean isSetAppId() {
      return EncodingUtils.testBit(__isset_bitfield, __APPID_ISSET_ID);
    }

    public void setAppIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPID_ISSET_ID, value);
    }

    public long getUserId() {
      return this.userId;
    }

    public setAppOwner_args setUserId(long userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_ID:
        if (value == null) {
          unsetAppId();
        } else {
          setAppId((Integer)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_ID:
        return Integer.valueOf(getAppId());

      case USER_ID:
        return Long.valueOf(getUserId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_ID:
        return isSetAppId();
      case USER_ID:
        return isSetUserId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setAppOwner_args)
        return this.equals((setAppOwner_args)that);
      return false;
    }

    public boolean equals(setAppOwner_args that) {
      if (that == null)
        return false;

      boolean this_present_appId = true;
      boolean that_present_appId = true;
      if (this_present_appId || that_present_appId) {
        if (!(this_present_appId && that_present_appId))
          return false;
        if (this.appId != that.appId)
          return false;
      }

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setAppOwner_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setAppOwner_args typedOther = (setAppOwner_args)other;

      lastComparison = Boolean.valueOf(isSetAppId()).compareTo(typedOther.isSetAppId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, typedOther.appId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, typedOther.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setAppOwner_args(");
      boolean first = true;

      sb.append("appId:");
      sb.append(this.appId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setAppOwner_argsStandardSchemeFactory implements SchemeFactory {
      public setAppOwner_argsStandardScheme getScheme() {
        return new setAppOwner_argsStandardScheme();
      }
    }

    private static class setAppOwner_argsStandardScheme extends StandardScheme<setAppOwner_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setAppOwner_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.appId = iprot.readI32();
                struct.setAppIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.userId = iprot.readI64();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setAppOwner_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(APP_ID_FIELD_DESC);
        oprot.writeI32(struct.appId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI64(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setAppOwner_argsTupleSchemeFactory implements SchemeFactory {
      public setAppOwner_argsTupleScheme getScheme() {
        return new setAppOwner_argsTupleScheme();
      }
    }

    private static class setAppOwner_argsTupleScheme extends TupleScheme<setAppOwner_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setAppOwner_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAppId()) {
          optionals.set(0);
        }
        if (struct.isSetUserId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAppId()) {
          oprot.writeI32(struct.appId);
        }
        if (struct.isSetUserId()) {
          oprot.writeI64(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setAppOwner_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.appId = iprot.readI32();
          struct.setAppIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userId = iprot.readI64();
          struct.setUserIdIsSet(true);
        }
      }
    }

  }

  public static class setAppOwner_result implements org.apache.thrift.TBase<setAppOwner_result, setAppOwner_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setAppOwner_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setAppOwner_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setAppOwner_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setAppOwner_result.class, metaDataMap);
    }

    public setAppOwner_result() {
    }

    public setAppOwner_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setAppOwner_result(setAppOwner_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public setAppOwner_result deepCopy() {
      return new setAppOwner_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public setAppOwner_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setAppOwner_result)
        return this.equals((setAppOwner_result)that);
      return false;
    }

    public boolean equals(setAppOwner_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setAppOwner_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setAppOwner_result typedOther = (setAppOwner_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setAppOwner_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setAppOwner_resultStandardSchemeFactory implements SchemeFactory {
      public setAppOwner_resultStandardScheme getScheme() {
        return new setAppOwner_resultStandardScheme();
      }
    }

    private static class setAppOwner_resultStandardScheme extends StandardScheme<setAppOwner_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setAppOwner_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setAppOwner_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setAppOwner_resultTupleSchemeFactory implements SchemeFactory {
      public setAppOwner_resultTupleScheme getScheme() {
        return new setAppOwner_resultTupleScheme();
      }
    }

    private static class setAppOwner_resultTupleScheme extends TupleScheme<setAppOwner_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setAppOwner_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setAppOwner_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class removeAppOwner_args implements org.apache.thrift.TBase<removeAppOwner_args, removeAppOwner_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeAppOwner_args");

    private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeAppOwner_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeAppOwner_argsTupleSchemeFactory());
    }

    public int appId; // required
    public long userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APP_ID((short)1, "appId"),
      USER_ID((short)2, "userId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_ID
            return APP_ID;
          case 2: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __APPID_ISSET_ID = 0;
    private static final int __USERID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeAppOwner_args.class, metaDataMap);
    }

    public removeAppOwner_args() {
    }

    public removeAppOwner_args(
      int appId,
      long userId)
    {
      this();
      this.appId = appId;
      setAppIdIsSet(true);
      this.userId = userId;
      setUserIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeAppOwner_args(removeAppOwner_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.appId = other.appId;
      this.userId = other.userId;
    }

    public removeAppOwner_args deepCopy() {
      return new removeAppOwner_args(this);
    }

    @Override
    public void clear() {
      setAppIdIsSet(false);
      this.appId = 0;
      setUserIdIsSet(false);
      this.userId = 0;
    }

    public int getAppId() {
      return this.appId;
    }

    public removeAppOwner_args setAppId(int appId) {
      this.appId = appId;
      setAppIdIsSet(true);
      return this;
    }

    public void unsetAppId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPID_ISSET_ID);
    }

    /** Returns true if field appId is set (has been assigned a value) and false otherwise */
    public boolean isSetAppId() {
      return EncodingUtils.testBit(__isset_bitfield, __APPID_ISSET_ID);
    }

    public void setAppIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPID_ISSET_ID, value);
    }

    public long getUserId() {
      return this.userId;
    }

    public removeAppOwner_args setUserId(long userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_ID:
        if (value == null) {
          unsetAppId();
        } else {
          setAppId((Integer)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_ID:
        return Integer.valueOf(getAppId());

      case USER_ID:
        return Long.valueOf(getUserId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_ID:
        return isSetAppId();
      case USER_ID:
        return isSetUserId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeAppOwner_args)
        return this.equals((removeAppOwner_args)that);
      return false;
    }

    public boolean equals(removeAppOwner_args that) {
      if (that == null)
        return false;

      boolean this_present_appId = true;
      boolean that_present_appId = true;
      if (this_present_appId || that_present_appId) {
        if (!(this_present_appId && that_present_appId))
          return false;
        if (this.appId != that.appId)
          return false;
      }

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(removeAppOwner_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      removeAppOwner_args typedOther = (removeAppOwner_args)other;

      lastComparison = Boolean.valueOf(isSetAppId()).compareTo(typedOther.isSetAppId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, typedOther.appId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, typedOther.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeAppOwner_args(");
      boolean first = true;

      sb.append("appId:");
      sb.append(this.appId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeAppOwner_argsStandardSchemeFactory implements SchemeFactory {
      public removeAppOwner_argsStandardScheme getScheme() {
        return new removeAppOwner_argsStandardScheme();
      }
    }

    private static class removeAppOwner_argsStandardScheme extends StandardScheme<removeAppOwner_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeAppOwner_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.appId = iprot.readI32();
                struct.setAppIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.userId = iprot.readI64();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeAppOwner_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(APP_ID_FIELD_DESC);
        oprot.writeI32(struct.appId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI64(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeAppOwner_argsTupleSchemeFactory implements SchemeFactory {
      public removeAppOwner_argsTupleScheme getScheme() {
        return new removeAppOwner_argsTupleScheme();
      }
    }

    private static class removeAppOwner_argsTupleScheme extends TupleScheme<removeAppOwner_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeAppOwner_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAppId()) {
          optionals.set(0);
        }
        if (struct.isSetUserId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAppId()) {
          oprot.writeI32(struct.appId);
        }
        if (struct.isSetUserId()) {
          oprot.writeI64(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeAppOwner_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.appId = iprot.readI32();
          struct.setAppIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userId = iprot.readI64();
          struct.setUserIdIsSet(true);
        }
      }
    }

  }

  public static class removeAppOwner_result implements org.apache.thrift.TBase<removeAppOwner_result, removeAppOwner_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeAppOwner_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeAppOwner_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeAppOwner_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeAppOwner_result.class, metaDataMap);
    }

    public removeAppOwner_result() {
    }

    public removeAppOwner_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeAppOwner_result(removeAppOwner_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public removeAppOwner_result deepCopy() {
      return new removeAppOwner_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public removeAppOwner_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeAppOwner_result)
        return this.equals((removeAppOwner_result)that);
      return false;
    }

    public boolean equals(removeAppOwner_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(removeAppOwner_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      removeAppOwner_result typedOther = (removeAppOwner_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeAppOwner_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeAppOwner_resultStandardSchemeFactory implements SchemeFactory {
      public removeAppOwner_resultStandardScheme getScheme() {
        return new removeAppOwner_resultStandardScheme();
      }
    }

    private static class removeAppOwner_resultStandardScheme extends StandardScheme<removeAppOwner_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeAppOwner_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeAppOwner_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeAppOwner_resultTupleSchemeFactory implements SchemeFactory {
      public removeAppOwner_resultTupleScheme getScheme() {
        return new removeAppOwner_resultTupleScheme();
      }
    }

    private static class removeAppOwner_resultTupleScheme extends TupleScheme<removeAppOwner_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeAppOwner_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeAppOwner_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getAppOwner_args implements org.apache.thrift.TBase<getAppOwner_args, getAppOwner_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAppOwner_args");

    private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAppOwner_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAppOwner_argsTupleSchemeFactory());
    }

    public int appId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APP_ID((short)1, "appId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_ID
            return APP_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __APPID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAppOwner_args.class, metaDataMap);
    }

    public getAppOwner_args() {
    }

    public getAppOwner_args(
      int appId)
    {
      this();
      this.appId = appId;
      setAppIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAppOwner_args(getAppOwner_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.appId = other.appId;
    }

    public getAppOwner_args deepCopy() {
      return new getAppOwner_args(this);
    }

    @Override
    public void clear() {
      setAppIdIsSet(false);
      this.appId = 0;
    }

    public int getAppId() {
      return this.appId;
    }

    public getAppOwner_args setAppId(int appId) {
      this.appId = appId;
      setAppIdIsSet(true);
      return this;
    }

    public void unsetAppId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPID_ISSET_ID);
    }

    /** Returns true if field appId is set (has been assigned a value) and false otherwise */
    public boolean isSetAppId() {
      return EncodingUtils.testBit(__isset_bitfield, __APPID_ISSET_ID);
    }

    public void setAppIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_ID:
        if (value == null) {
          unsetAppId();
        } else {
          setAppId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_ID:
        return Integer.valueOf(getAppId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_ID:
        return isSetAppId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAppOwner_args)
        return this.equals((getAppOwner_args)that);
      return false;
    }

    public boolean equals(getAppOwner_args that) {
      if (that == null)
        return false;

      boolean this_present_appId = true;
      boolean that_present_appId = true;
      if (this_present_appId || that_present_appId) {
        if (!(this_present_appId && that_present_appId))
          return false;
        if (this.appId != that.appId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getAppOwner_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAppOwner_args typedOther = (getAppOwner_args)other;

      lastComparison = Boolean.valueOf(isSetAppId()).compareTo(typedOther.isSetAppId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, typedOther.appId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAppOwner_args(");
      boolean first = true;

      sb.append("appId:");
      sb.append(this.appId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAppOwner_argsStandardSchemeFactory implements SchemeFactory {
      public getAppOwner_argsStandardScheme getScheme() {
        return new getAppOwner_argsStandardScheme();
      }
    }

    private static class getAppOwner_argsStandardScheme extends StandardScheme<getAppOwner_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAppOwner_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.appId = iprot.readI32();
                struct.setAppIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAppOwner_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(APP_ID_FIELD_DESC);
        oprot.writeI32(struct.appId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAppOwner_argsTupleSchemeFactory implements SchemeFactory {
      public getAppOwner_argsTupleScheme getScheme() {
        return new getAppOwner_argsTupleScheme();
      }
    }

    private static class getAppOwner_argsTupleScheme extends TupleScheme<getAppOwner_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAppOwner_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAppId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAppId()) {
          oprot.writeI32(struct.appId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAppOwner_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.appId = iprot.readI32();
          struct.setAppIdIsSet(true);
        }
      }
    }

  }

  public static class getAppOwner_result implements org.apache.thrift.TBase<getAppOwner_result, getAppOwner_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAppOwner_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAppOwner_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAppOwner_resultTupleSchemeFactory());
    }

    public GetAppOwnerResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GetAppOwnerResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAppOwner_result.class, metaDataMap);
    }

    public getAppOwner_result() {
    }

    public getAppOwner_result(
      GetAppOwnerResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAppOwner_result(getAppOwner_result other) {
      if (other.isSetSuccess()) {
        this.success = new GetAppOwnerResult(other.success);
      }
    }

    public getAppOwner_result deepCopy() {
      return new getAppOwner_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public GetAppOwnerResult getSuccess() {
      return this.success;
    }

    public getAppOwner_result setSuccess(GetAppOwnerResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((GetAppOwnerResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAppOwner_result)
        return this.equals((getAppOwner_result)that);
      return false;
    }

    public boolean equals(getAppOwner_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getAppOwner_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAppOwner_result typedOther = (getAppOwner_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAppOwner_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAppOwner_resultStandardSchemeFactory implements SchemeFactory {
      public getAppOwner_resultStandardScheme getScheme() {
        return new getAppOwner_resultStandardScheme();
      }
    }

    private static class getAppOwner_resultStandardScheme extends StandardScheme<getAppOwner_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAppOwner_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new GetAppOwnerResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAppOwner_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAppOwner_resultTupleSchemeFactory implements SchemeFactory {
      public getAppOwner_resultTupleScheme getScheme() {
        return new getAppOwner_resultTupleScheme();
      }
    }

    private static class getAppOwner_resultTupleScheme extends TupleScheme<getAppOwner_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAppOwner_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAppOwner_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new GetAppOwnerResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
